<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2b458a3a49aa36580b42fa89950a3b8bec20fe99" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58715628" /></Metadata><TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <TypeSignature Language="F#" Value="type MethodBody = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="49692-101">Предоставляет доступ к метаданным и MSIL для тела метода.</span><span class="sxs-lookup"><span data-stu-id="49692-101">Provides access to the metadata and MSIL for the body of a method.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-102"><xref:System.Reflection.MethodBody> Класс предоставляет доступ к информации о локальных переменных и предложений обработки исключений в теле метода, а также в промежуточный язык Майкрософт (MSIL), составляющих тело метода.</span><span class="sxs-lookup"><span data-stu-id="49692-102">The <xref:System.Reflection.MethodBody> class provides access to information about the local variables and exception-handling clauses in a method body, and to the Microsoft intermediate language (MSIL) that makes up the method body.</span></span>  
  
 <span data-ttu-id="49692-103">Можно использовать методы разрешения токен класса модуля, такие как <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, и <xref:System.Reflection.Module.ResolveType%2A>, для разрешения токенов в теле метода для <xref:System.Type> объектов, <xref:System.Reflection.MethodInfo> объектов, и <xref:System.Reflection.FieldInfo> объектов, которые предоставляют Подробные сведения о типах, методы и поля, доступ к MSIL в теле метода.</span><span class="sxs-lookup"><span data-stu-id="49692-103">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveType%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49692-104">Для разбора тела методов необходимо иметь хорошее представление о метаданных и форматах инструкций MSIL.</span><span class="sxs-lookup"><span data-stu-id="49692-104">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="49692-105">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="49692-105">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="49692-106">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="49692-106">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="49692-107">Для получения <xref:System.Reflection.MethodBody> объекта для данного метода, сначала получите <xref:System.Reflection.MethodInfo> объекта используется метод, затем вызвать <xref:System.Reflection.MethodInfo> объекта <xref:System.Reflection.MethodBase.GetMethodBody%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="49692-107">To obtain a <xref:System.Reflection.MethodBody> object for a given method, first obtain a <xref:System.Reflection.MethodInfo> object for the method, then call the <xref:System.Reflection.MethodInfo> object's <xref:System.Reflection.MethodBase.GetMethodBody%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49692-108">В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="49692-108">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="49692-109"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="49692-109">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span>  
  
 <span data-ttu-id="49692-110">В примере используется <xref:System.Reflection.MethodBody.LocalVariables%2A> свойство для получения списка <xref:System.Reflection.LocalVariableInfo> объектов, а затем отображает их типы и порядок индексов.</span><span class="sxs-lookup"><span data-stu-id="49692-110">The example uses the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects and then displays their types and index order.</span></span> <span data-ttu-id="49692-111"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="49692-111">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of exception-handling clauses.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49692-112">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="49692-112">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="49692-113">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="49692-113">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49692-114">Инициализирует новый экземпляр класса <see cref="T:System.Reflection.MethodBody" />.</span><span class="sxs-lookup"><span data-stu-id="49692-114">Initializes a new instance of the <see cref="T:System.Reflection.MethodBody" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-115">Этот конструктор вызывается производными классами во время создания <xref:System.Reflection.MethodBody> объектов.</span><span class="sxs-lookup"><span data-stu-id="49692-115">This constructor is invoked by derived classes during the construction of <xref:System.Reflection.MethodBody> objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandlingClauses : System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;" Usage="System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49692-116">Возвращает список, содержащий все предложения обработки исключений, содержащиеся в теле метода.</span><span class="sxs-lookup"><span data-stu-id="49692-116">Gets a list that includes all the exception-handling clauses in the method body.</span></span></summary>
        <value><span data-ttu-id="49692-117">Список <see cref="T:System.Collections.Generic.IList`1" /> объектов <see cref="T:System.Reflection.ExceptionHandlingClause" />, представляющих предложения обработки исключений в теле этого метода.</span><span class="sxs-lookup"><span data-stu-id="49692-117">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.ExceptionHandlingClause" /> objects representing the exception-handling clauses in the body of the method.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-118">Список содержит все предложения всех блоков в теле метода.</span><span class="sxs-lookup"><span data-stu-id="49692-118">The list includes all clauses from all try blocks in the method body.</span></span> <span data-ttu-id="49692-119">Каждый <xref:System.Reflection.ExceptionHandlingClause> объект содержит информацию, определяющую блока try, с которым он связан.</span><span class="sxs-lookup"><span data-stu-id="49692-119">Each <xref:System.Reflection.ExceptionHandlingClause> object contains information that identifies the try block with which it is associated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49692-120">Работа с предложения обработки исключений требует глубокого понимания метаданных и форматах инструкций MSIL.</span><span class="sxs-lookup"><span data-stu-id="49692-120">Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="49692-121">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="49692-121">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="49692-122">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="49692-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49692-123">В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает информацию о его предложения обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="49692-123">The following code example defines a test method named `MethodBodyExample` and displays information about its exception-handling clauses.</span></span> <span data-ttu-id="49692-124"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="49692-124">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="49692-125"><xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов.</span><span class="sxs-lookup"><span data-stu-id="49692-125">The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49692-126">Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения.</span><span class="sxs-lookup"><span data-stu-id="49692-126">Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> clauses.</span></span> <span data-ttu-id="49692-127">В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.</span><span class="sxs-lookup"><span data-stu-id="49692-127">The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.</span></span>  
  
 <span data-ttu-id="49692-128">Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.</span><span class="sxs-lookup"><span data-stu-id="49692-128">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberSignature Language="F#" Value="abstract member GetILAsByteArray : unit -&gt; byte[]&#xA;override this.GetILAsByteArray : unit -&gt; byte[]" Usage="methodBody.GetILAsByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="49692-129">Возвращает код MSIL тела метода в виде массива байтов.</span><span class="sxs-lookup"><span data-stu-id="49692-129">Returns the MSIL for the method body, as an array of bytes.</span></span></summary>
        <returns><span data-ttu-id="49692-130">Массив типа <see cref="T:System.Byte" />, который содержит MSIL для тела метода.</span><span class="sxs-lookup"><span data-stu-id="49692-130">An array of type <see cref="T:System.Byte" /> that contains the MSIL for the method body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-131">Можно использовать методы разрешения токен класса модуля, такие как <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, и <xref:System.Reflection.Module.ResolveMember%2A>, для разрешения токенов в теле метода для <xref:System.Type> объектов, <xref:System.Reflection.MethodInfo> объектов, и <xref:System.Reflection.FieldInfo> объектов, которые предоставляют Подробные сведения о типах, методы и поля, доступ к MSIL в теле метода.</span><span class="sxs-lookup"><span data-stu-id="49692-131">You can use the token-resolution methods of the module class, such as <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, and <xref:System.Reflection.Module.ResolveMember%2A>, to resolve the tokens in the method body to <xref:System.Type> objects, <xref:System.Reflection.MethodInfo> objects, and <xref:System.Reflection.FieldInfo> objects that provide detailed information about the types, methods, and fields accessed by the MSIL in the method body.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49692-132">Для разбора тела методов необходимо иметь хорошее представление о метаданных и форматах инструкций MSIL.</span><span class="sxs-lookup"><span data-stu-id="49692-132">Parsing method bodies requires a thorough understanding of metadata and MSIL instruction formats.</span></span> <span data-ttu-id="49692-133">Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="49692-133">Information can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="49692-134">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="49692-134">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool" Usage="System.Reflection.MethodBody.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49692-135">Возвращает значение, которое определяет, будут ли локальные переменные в теле метода инициализированы значениями по умолчанию, предусмотренными для соответствующих типов.</span><span class="sxs-lookup"><span data-stu-id="49692-135">Gets a value indicating whether local variables in the method body are initialized to the default values for their types.</span></span></summary>
        <value><span data-ttu-id="49692-136">Значение <see langword="true" />, если тело метода содержит код, инициализирующий локальные переменные значениями <see langword="null" /> для ссылочных типов, или нулевыми значениями для типов значений; в обратном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="49692-136"><see langword="true" /> if the method body contains code to initialize local variables to <see langword="null" /> for reference types, or to the zero-initialized value for value types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-137"><xref:System.Reflection.MethodBody.InitLocals%2A> Свойство ссылается на переменные, которые не инициализируются явно, то есть, переменные, объявленные с помощью синтаксиса, такие как `int x;` в C# или `Dim x As Integer` в Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="49692-137">The <xref:System.Reflection.MethodBody.InitLocals%2A> property refers to variables that are not explicitly initialized; that is, variables that are declared with syntax such as `int x;` in C# or `Dim x As Integer` in Visual Basic.</span></span>  
  
 <span data-ttu-id="49692-138">Ссылочные переменные инициализируются `null` по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="49692-138">Reference variables are initialized to `null` by default.</span></span> <span data-ttu-id="49692-139">Числовые переменные инициализируются нулевым значением.</span><span class="sxs-lookup"><span data-stu-id="49692-139">Numeric variables are initialized to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49692-140">В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="49692-140">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="49692-141"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="49692-141">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="49692-142"><xref:System.Reflection.MethodBody.MaxStackSize%2A> И <xref:System.Reflection.MethodBody.InitLocals%2A> будут показаны свойства.</span><span class="sxs-lookup"><span data-stu-id="49692-142">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="49692-143">Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.</span><span class="sxs-lookup"><span data-stu-id="49692-143">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalSignatureMetadataToken : int" Usage="System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49692-144">Возвращает токен метаданных для подписи, которая описывает локальные переменные для этого метода в метаданных.</span><span class="sxs-lookup"><span data-stu-id="49692-144">Gets a metadata token for the signature that describes the local variables for the method in metadata.</span></span></summary>
        <value><span data-ttu-id="49692-145">Целочисленное значение, представляющее токен метаданных.</span><span class="sxs-lookup"><span data-stu-id="49692-145">An integer that represents the metadata token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-146">Используйте <xref:System.Reflection.MethodBody.LocalVariables%2A> свойство для получения сведений о локальных переменных метода.</span><span class="sxs-lookup"><span data-stu-id="49692-146">Use the <xref:System.Reflection.MethodBody.LocalVariables%2A> property to obtain information about the method's local variables.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49692-147">Сведения о подписях локальных переменных можно найти в документации по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="49692-147">Information about local variable signatures can be found in the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="49692-148">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="49692-148">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalVariables : System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;" Usage="System.Reflection.MethodBody.LocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49692-149">Возвращает список локальных переменных, объявленных в теле метода.</span><span class="sxs-lookup"><span data-stu-id="49692-149">Gets the list of local variables declared in the method body.</span></span></summary>
        <value><span data-ttu-id="49692-150">Список <see cref="T:System.Collections.Generic.IList`1" /> объектов <see cref="T:System.Reflection.LocalVariableInfo" />, которые описывают локальные переменные, объявленные в теле метода.</span><span class="sxs-lookup"><span data-stu-id="49692-150">An <see cref="T:System.Collections.Generic.IList`1" /> of <see cref="T:System.Reflection.LocalVariableInfo" /> objects that describe the local variables declared in the method body.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-151">Это следует маркер метаданных для подписи локальной переменной, предоставляемые <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="49692-151">You do not need the metadata token for the local variable signature provided by the <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49692-152">В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает сведения о ее локальных переменных.</span><span class="sxs-lookup"><span data-stu-id="49692-152">The following code example defines a test method named `MethodBodyExample` and displays its local variable information.</span></span> <span data-ttu-id="49692-153"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="49692-153">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="49692-154"><xref:System.Reflection.MethodBody.LocalVariables%2A> Свойство используется для получения списка <xref:System.Reflection.LocalVariableInfo> объектов.</span><span class="sxs-lookup"><span data-stu-id="49692-154">The <xref:System.Reflection.MethodBody.LocalVariables%2A> property is used to obtain a list of <xref:System.Reflection.LocalVariableInfo> objects.</span></span>  
  
 <span data-ttu-id="49692-155">Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.</span><span class="sxs-lookup"><span data-stu-id="49692-155">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxStackSize : int" Usage="System.Reflection.MethodBody.MaxStackSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="49692-156">Возвращает максимальное количество элементов в стеке операторов при выполнении метода.</span><span class="sxs-lookup"><span data-stu-id="49692-156">Gets the maximum number of items on the operand stack when the method is executing.</span></span></summary>
        <value><span data-ttu-id="49692-157">Максимальное количество элементов в стеке операторов при выполнении метода.</span><span class="sxs-lookup"><span data-stu-id="49692-157">The maximum number of items on the operand stack when the method is executing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49692-158">Дополнительные сведения см. в документации Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="49692-158">For more information, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="49692-159">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="49692-159">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49692-160">В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает ее локальных переменных и предложений обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="49692-160">The following code example defines a test method named `MethodBodyExample` and displays its local variable information and exception-handling clauses.</span></span> <span data-ttu-id="49692-161"><xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.</span><span class="sxs-lookup"><span data-stu-id="49692-161">The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method.</span></span> <span data-ttu-id="49692-162"><xref:System.Reflection.MethodBody.MaxStackSize%2A> И <xref:System.Reflection.MethodBody.InitLocals%2A> будут показаны свойства.</span><span class="sxs-lookup"><span data-stu-id="49692-162">The <xref:System.Reflection.MethodBody.MaxStackSize%2A> and <xref:System.Reflection.MethodBody.InitLocals%2A> properties are displayed.</span></span>  
  
 <span data-ttu-id="49692-163">Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.</span><span class="sxs-lookup"><span data-stu-id="49692-163">This code example is part of a larger example provided for the <xref:System.Reflection.MethodBody> class.</span></span>  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>