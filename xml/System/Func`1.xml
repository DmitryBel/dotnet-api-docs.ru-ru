<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="480607eeba6a1c1badfd92906bfb9b87a52e39e4" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690803" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult"><span data-ttu-id="b106b-101">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="b106b-101">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <summary><span data-ttu-id="b106b-102">Инкапсулирует метод без параметров и возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="b106b-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="b106b-103">Возвращаемое значение метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="b106b-103">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b106b-104">Можно использовать этот делегат, представляющий метод, который может передаваться в качестве параметра без явного объявления пользовательского делегата.</span><span class="sxs-lookup"><span data-stu-id="b106b-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="b106b-105">Инкапсулированный метод должно соответствовать сигнатуре метода, который определен этот делегат.</span><span class="sxs-lookup"><span data-stu-id="b106b-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="b106b-106">Это означает, что инкапсулированный метод не принимает параметров и должен возвращать значение.</span><span class="sxs-lookup"><span data-stu-id="b106b-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b106b-107">Для ссылки на метод, который не имеет параметров и возвращает `void` (или в Visual Basic, объявленный как `Sub` , а не как `Function`), используйте <xref:System.Action> вместо этого делегата.</span><span class="sxs-lookup"><span data-stu-id="b106b-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="b106b-108">При использовании <xref:System.Func%601> делегата, не нужно явным образом определять делегат, инкапсулирующий метод без параметров.</span><span class="sxs-lookup"><span data-stu-id="b106b-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="b106b-109">Например, в следующем коде явно объявляется делегат с именем `WriteMethod` и ссылка на `OutputTarget.SendToFile` метод его экземпляру делегата экземпляра.</span><span class="sxs-lookup"><span data-stu-id="b106b-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="b106b-110">В следующем примере этот код упрощается путем создания экземпляра <xref:System.Func%601> делегат вместо явного объявления нового делегата и присвоения именованного метода.</span><span class="sxs-lookup"><span data-stu-id="b106b-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="b106b-111">Можно использовать <xref:System.Func%601> делегировать с анонимными методами в C#, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="b106b-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="b106b-112">(Введение в анонимные методы, см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="b106b-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="b106b-113">Вы также можете назначить лямбда-выражения <xref:System.Func%602> делегата, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="b106b-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="b106b-114">(Введение в лямбда-выражения, см. в разделе [лямбда-выражения](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) и [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="b106b-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="b106b-115">Базовый тип лямбда-выражения является одним из универсальных `Func` делегатов.</span><span class="sxs-lookup"><span data-stu-id="b106b-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="b106b-116">Это дает возможность передать лямбда-выражение в качестве параметра без явного присвоения его делегату.</span><span class="sxs-lookup"><span data-stu-id="b106b-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="b106b-117">В частности так как многие методы типов в <xref:System.Linq> пространство имен обязательно `Func` параметры, вы можете передать эти методы лямбда-выражения без явного создания `Func` делегировать.</span><span class="sxs-lookup"><span data-stu-id="b106b-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="b106b-118">При наличии ресурсоемких вычислений, который должен выполняться только в том случае, если результат возникает потребность в, можно назначить затратная функция для <xref:System.Func%601> делегировать.</span><span class="sxs-lookup"><span data-stu-id="b106b-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="b106b-119">Выполнение этой функции можно отложить до свойство, которое использует это значение используется в выражении.</span><span class="sxs-lookup"><span data-stu-id="b106b-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="b106b-120">В примере в следующем разделе показано, как это сделать.</span><span class="sxs-lookup"><span data-stu-id="b106b-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b106b-121">В следующем примере демонстрируется использование делегат, который не принимает никаких параметров.</span><span class="sxs-lookup"><span data-stu-id="b106b-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="b106b-122">Этот код создает универсальный класс с именем `LazyValue` , имеет поле типа <xref:System.Func%601>.</span><span class="sxs-lookup"><span data-stu-id="b106b-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="b106b-123">Это поле делегата может содержать ссылку на любую функцию, возвращающую значение типа, соответствующего параметру типа `LazyValue` объекта.</span><span class="sxs-lookup"><span data-stu-id="b106b-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="b106b-124">`LazyValue` Тип также имеет `Value` свойство, которое выполняет функцию (если он еще не был выполнен) и возвращает результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="b106b-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="b106b-125">В примере создается два метода и создает два `LazyValue` объектов с помощью лямбда-выражения, которые вызывают эти методы.</span><span class="sxs-lookup"><span data-stu-id="b106b-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="b106b-126">Лямбда-выражения не принимают параметры, так как им просто нужно вызвать метод.</span><span class="sxs-lookup"><span data-stu-id="b106b-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="b106b-127">Как показывает вывод, два метода выполняются только тогда, когда значение каждого `LazyValue` извлечения объекта.</span><span class="sxs-lookup"><span data-stu-id="b106b-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="b106b-128">Лямбда-выражения (Руководство по программированию в C#)</span><span class="sxs-lookup"><span data-stu-id="b106b-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="b106b-129">Лямбда-выражения</span><span class="sxs-lookup"><span data-stu-id="b106b-129">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="b106b-130">Делегаты (Руководство по программированию на C#)</span><span class="sxs-lookup"><span data-stu-id="b106b-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="b106b-131">Делегаты в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="b106b-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>