<Type Name="Func&lt;T1,T2,T3,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="759a59b663b11958aee79d0d84eee78a6d843a98" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57912790" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`4&lt;- T1, - T2, - T3, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`4" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T1, 'T2, 'T3, 'Result&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" Index="0" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg2" Type="T2" Index="1" FrameworkAlternate="xamarinmac-3.0" />
    <Parameter Name="arg3" Type="T3" Index="2" FrameworkAlternate="xamarinmac-3.0" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="f37bb-101">Тип первого параметра метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="f37bb-102">Тип второго параметра метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="f37bb-103">Тип третьего параметра метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="f37bb-104">Тип возвращаемого значения метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-104">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="f37bb-105">Первый параметр метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-105">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="f37bb-106">Второй параметр метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-106">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="f37bb-107">Третий параметр метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-107">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="f37bb-108">Инкапсулирует метод с тремя параметрами и возвращает значение типа, указанного в параметре <typeparamref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="f37bb-108">Encapsulates a method that has three parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="f37bb-109">Возвращаемое значение метода, инкапсулируемого данным делегатом.</span><span class="sxs-lookup"><span data-stu-id="f37bb-109">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f37bb-110">Можно использовать этот делегат, представляющий метод, который может передаваться в качестве параметра без явного объявления пользовательского делегата.</span><span class="sxs-lookup"><span data-stu-id="f37bb-110">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="f37bb-111">Инкапсулированный метод должно соответствовать сигнатуре метода, который определен этот делегат.</span><span class="sxs-lookup"><span data-stu-id="f37bb-111">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="f37bb-112">Это означает, что инкапсулированный метод должен иметь три параметра, каждый из которых передается в него по значению, и что он должен возвращать значение.</span><span class="sxs-lookup"><span data-stu-id="f37bb-112">This means that the encapsulated method must have three parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f37bb-113">Ссылки на метод, который принимает три параметра и возвращает `void` (или в Visual Basic, объявленный как `Sub` , а не как `Function`), использовать универсальный <xref:System.Action%603> вместо этого делегата.</span><span class="sxs-lookup"><span data-stu-id="f37bb-113">To reference a method that has three parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%603> delegate instead.</span></span>  
  
 <span data-ttu-id="f37bb-114">При использовании <xref:System.Func%604> делегата, не нужно явным образом определять делегат, который инкапсулирует метод с тремя параметрами.</span><span class="sxs-lookup"><span data-stu-id="f37bb-114">When you use the <xref:System.Func%604> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="f37bb-115">Например, следующий код явно объявляется универсальный делегат с именем `ParseNumber` и ссылка на <xref:System.Int32.Parse%2A> метод его экземпляру делегата.</span><span class="sxs-lookup"><span data-stu-id="f37bb-115">For example, the following code explicitly declares a generic delegate named `ParseNumber` and assigns a reference to the <xref:System.Int32.Parse%2A> method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~4#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Delegate.cs#1)]
 [!code-vb[System.Func~4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="f37bb-116">В следующем примере этот код упрощается путем создания экземпляра <xref:System.Func%604> делегат вместо явного объявления нового делегата и присвоения именованного метода.</span><span class="sxs-lookup"><span data-stu-id="f37bb-116">The following example simplifies this code by instantiating the <xref:System.Func%604> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~4#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Func4.cs#2)]
 [!code-vb[System.Func~4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Func4.vb#2)]  
  
 <span data-ttu-id="f37bb-117">Можно использовать <xref:System.Func%604> делегировать с анонимными методами в C#, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="f37bb-117">You can use the <xref:System.Func%604> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="f37bb-118">(Введение в анонимные методы, см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span><span class="sxs-lookup"><span data-stu-id="f37bb-118">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~4#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Anon.cs#3)]  
  
 <span data-ttu-id="f37bb-119">Вы также можете назначить лямбда-выражения <xref:System.Func%604> делегата, как показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="f37bb-119">You can also assign a lambda expression to a <xref:System.Func%604> delegate, as the following example illustrates.</span></span> <span data-ttu-id="f37bb-120">(Введение в лямбда-выражения, см. в разделе [лямбда-выражения](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) и [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span><span class="sxs-lookup"><span data-stu-id="f37bb-120">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~4#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~4/cs/Lambda.cs#4)]
 [!code-vb[System.Func~4#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~4/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="f37bb-121">Базовый тип лямбда-выражения является одним из универсальных `Func` делегатов.</span><span class="sxs-lookup"><span data-stu-id="f37bb-121">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="f37bb-122">Это дает возможность передать лямбда-выражение в качестве параметра без явного присвоения его делегату.</span><span class="sxs-lookup"><span data-stu-id="f37bb-122">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="f37bb-123">В частности так как многие методы типов в <xref:System.Linq> пространство имен обязательно `Func` параметры, вы можете передать эти методы лямбда-выражения без явного создания `Func` делегировать.</span><span class="sxs-lookup"><span data-stu-id="f37bb-123">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f37bb-124">Следующий пример демонстрирует объявление и использование <xref:System.Func%603> делегировать.</span><span class="sxs-lookup"><span data-stu-id="f37bb-124">The following example demonstrates how to declare and use a <xref:System.Func%603> delegate.</span></span> <span data-ttu-id="f37bb-125">В этом примере объявляется <xref:System.Func%603> переменной и присваивает его лямбда-выражение, которое принимает <xref:System.String> значение и <xref:System.Int32> значение в качестве параметров.</span><span class="sxs-lookup"><span data-stu-id="f37bb-125">This example declares a <xref:System.Func%603> variable and assigns it a lambda expression that takes a <xref:System.String> value and an <xref:System.Int32> value as parameters.</span></span> <span data-ttu-id="f37bb-126">Лямбда-выражение возвращает `true` Если длина <xref:System.String> параметр равен значению <xref:System.Int32> параметра.</span><span class="sxs-lookup"><span data-stu-id="f37bb-126">The lambda expression returns `true` if the length of the <xref:System.String> parameter is equal to the value of the <xref:System.Int32> parameter.</span></span> <span data-ttu-id="f37bb-127">Делегат, который инкапсулирует этот метод впоследствии используется в запросе для фильтрации строк в массиве строк.</span><span class="sxs-lookup"><span data-stu-id="f37bb-127">The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.</span></span>  
  
 [!code-csharp[System.Func~3#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~3/cs/Example.cs#5)]
 [!code-vb[System.Func~3#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~3/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="f37bb-128">Лямбда-выражения (Руководство по программированию в C#)</span><span class="sxs-lookup"><span data-stu-id="f37bb-128">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="f37bb-129">Лямбда-выражения</span><span class="sxs-lookup"><span data-stu-id="f37bb-129">Lambda Expressions</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="f37bb-130">Делегаты (Руководство по программированию на C#)</span><span class="sxs-lookup"><span data-stu-id="f37bb-130">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="f37bb-131">Делегаты в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="f37bb-131">Delegates in Visual Basic</span></span></related>
  </Docs>
</Type>