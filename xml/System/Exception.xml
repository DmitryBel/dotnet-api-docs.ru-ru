<Type Name="Exception" FullName="System.Exception">
  <Metadata><Meta Name="ms.openlocfilehash" Value="941ce6ec902db92558c052227196f17b68b2f254" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58725192" /></Metadata><TypeSignature Language="C#" Value="public class Exception : System.Runtime.InteropServices._Exception, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit Exception extends System.Object implements class System.Runtime.InteropServices._Exception, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Exception" />
  <TypeSignature Language="VB.NET" Value="Public Class Exception&#xA;Implements _Exception, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Exception : System::Runtime::InteropServices::_Exception, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Exception = class&#xA;    interface ISerializable&#xA;    interface _Exception" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Exception</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Exception))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c996a-101">Представляет ошибки, происходящие во время выполнения приложения.</span><span class="sxs-lookup"><span data-stu-id="c996a-101">Represents errors that occur during application execution.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-102">Этот класс является базовым классом для всех исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-102">This class is the base class for all exceptions.</span></span> <span data-ttu-id="c996a-103">При возникновении ошибки, системой или выполняющееся приложение выдает, создавая исключение, содержащее сведения об ошибке.</span><span class="sxs-lookup"><span data-stu-id="c996a-103">When an error occurs, either the system or the currently executing application reports it by throwing an exception that contains information about the error.</span></span> <span data-ttu-id="c996a-104">После создается исключение, он обрабатывается приложением или обработчиком исключений по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c996a-104">After an exception is thrown, it is handled by the application or by the default exception handler.</span></span>  
  
 <span data-ttu-id="c996a-105">В данном разделе:</span><span class="sxs-lookup"><span data-stu-id="c996a-105">In this section:</span></span>  
  
 <span data-ttu-id="c996a-106">[Ошибки и исключения](#Errors) </span><span class="sxs-lookup"><span data-stu-id="c996a-106">[Errors and exceptions](#Errors) </span></span>  
 <span data-ttu-id="c996a-107">[Блоки try/catch](#TryCatch) </span><span class="sxs-lookup"><span data-stu-id="c996a-107">[Try/catch blocks](#TryCatch) </span></span>  
 <span data-ttu-id="c996a-108">[Возможности типов исключений](#Features) </span><span class="sxs-lookup"><span data-stu-id="c996a-108">[Exception type features](#Features) </span></span>  
 <span data-ttu-id="c996a-109">[Свойства класса исключений](#Properties) </span><span class="sxs-lookup"><span data-stu-id="c996a-109">[Exception class properties](#Properties) </span></span>  
 <span data-ttu-id="c996a-110">[Вопросы производительности](#Performance) </span><span class="sxs-lookup"><span data-stu-id="c996a-110">[Performance considerations](#Performance) </span></span>  
 <span data-ttu-id="c996a-111">[Повторное создание исключения](#Rethrow) </span><span class="sxs-lookup"><span data-stu-id="c996a-111">[Re-throwing an exception](#Rethrow) </span></span>  
 <span data-ttu-id="c996a-112">[Выбор стандартных исключений](#Standard) </span><span class="sxs-lookup"><span data-stu-id="c996a-112">[Choosing standard exceptions](#Standard) </span></span>  
 [<span data-ttu-id="c996a-113">Реализация пользовательских исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-113">Implementing custom exceptions</span></span>](#Custom)  
  
<a name="Errors"></a>   
## <a name="errors-and-exceptions"></a><span data-ttu-id="c996a-114">Ошибки и исключения</span><span class="sxs-lookup"><span data-stu-id="c996a-114">Errors and exceptions</span></span>  
 <span data-ttu-id="c996a-115">Ошибки времени выполнения может возникнуть по ряду причин.</span><span class="sxs-lookup"><span data-stu-id="c996a-115">Run-time errors can occur for a variety of reasons.</span></span> <span data-ttu-id="c996a-116">Однако не все ошибки должны обрабатываться как исключения в своем коде.</span><span class="sxs-lookup"><span data-stu-id="c996a-116">However, not all errors should be handled as exceptions in your code.</span></span> <span data-ttu-id="c996a-117">Ниже приведены некоторые категории ошибок, которые могут возникнуть во время выполнения и соответствующие способы реагирования на них.</span><span class="sxs-lookup"><span data-stu-id="c996a-117">Here are some categories of errors that can occur at run time and the appropriate ways to respond to them.</span></span>  
  
-   <span data-ttu-id="c996a-118">**Ошибки использования.**</span><span class="sxs-lookup"><span data-stu-id="c996a-118">**Usage errors.**</span></span> <span data-ttu-id="c996a-119">Ошибка использования представляет ошибку в логике программы, которая может привести к исключению.</span><span class="sxs-lookup"><span data-stu-id="c996a-119">A usage error represents an error in program logic that can result in an exception.</span></span> <span data-ttu-id="c996a-120">Тем не менее ошибка должна быть устранена, не с помощью обработки исключений, но, изменив ошибочный код.</span><span class="sxs-lookup"><span data-stu-id="c996a-120">However, the error should be addressed not through exception handling but by modifying the faulty code.</span></span> <span data-ttu-id="c996a-121">Например, переопределение метода <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> метод в следующем примере предполагается, что `obj` аргумент всегда должен иметь значение null.</span><span class="sxs-lookup"><span data-stu-id="c996a-121">For example, the override of the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method in the following example assumes that the `obj` argument must always be non-null.</span></span>  
  
     [!code-csharp[System.Exception.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors1.cs#4)]
     [!code-vb[System.Exception.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors1.vb#4)]  
  
     <span data-ttu-id="c996a-122"><xref:System.NullReferenceException> Исключение, которое возникает при `obj` — `null` можно устранить путем изменения в исходном коде явным образом проверки на значения null перед вызовом <xref:System.Object.Equals%2A?displayProperty=nameWithType> "override" и повторной компиляции.</span><span class="sxs-lookup"><span data-stu-id="c996a-122">The <xref:System.NullReferenceException> exception that results when `obj` is `null` can be eliminated by modifying the source code to explicitly test for null before calling the <xref:System.Object.Equals%2A?displayProperty=nameWithType> override and then re-compiling.</span></span> <span data-ttu-id="c996a-123">В следующем примере содержится исправленный исходный код, обрабатывающий `null` аргумент.</span><span class="sxs-lookup"><span data-stu-id="c996a-123">The following example contains the corrected source code that handles a `null` argument.</span></span>  
  
     [!code-csharp[System.Exception.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/usageerrors2.cs#5)]
     [!code-vb[System.Exception.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/usageerrors2.vb#5)]  
  
     <span data-ttu-id="c996a-124">Вместо того чтобы использовать обработку исключений для ошибки использования, можно использовать <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> метод выявления ошибок использования в отладочных сборках и <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> метод выявления ошибок использования в отладочной и окончательной сборки.</span><span class="sxs-lookup"><span data-stu-id="c996a-124">Instead of using exception handling for usage errors, you can use the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method to identify usage errors in debug builds, and the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method to identify usage errors in both debug and release builds.</span></span> <span data-ttu-id="c996a-125">Дополнительные сведения см. в разделе [Утверждения в управляемом коде](/visualstudio/debugger/assertions-in-managed-code).</span><span class="sxs-lookup"><span data-stu-id="c996a-125">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
-   <span data-ttu-id="c996a-126">**Ошибки программы.**</span><span class="sxs-lookup"><span data-stu-id="c996a-126">**Program errors.**</span></span> <span data-ttu-id="c996a-127">Ошибки в программе является ошибкой времени выполнения, которая всегда является обязательной, написав код без ошибок.</span><span class="sxs-lookup"><span data-stu-id="c996a-127">A program error is a run-time error that cannot necessarily be avoided by writing bug-free code.</span></span>  
  
     <span data-ttu-id="c996a-128">В некоторых случаях ошибки в программе может отражать ожидаемое или подпрограмму ошибку.</span><span class="sxs-lookup"><span data-stu-id="c996a-128">In some cases, a program error may reflect an expected or routine error condition.</span></span> <span data-ttu-id="c996a-129">В этом случае можно избежать использования обработки исключений, чтобы разбираться с записью ошибок программы и вместо этого повторите операцию.</span><span class="sxs-lookup"><span data-stu-id="c996a-129">In this case, you may want to avoid using exception handling to deal with the program error and instead retry the operation.</span></span> <span data-ttu-id="c996a-130">Например, если пользователь должен ввести дату в определенном формате, можно выполнить синтаксический анализ строки даты, вызвав <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> метод, возвращающий <xref:System.Boolean> значение, указывающее, успешно ли операция анализа выполнена, вместо использования <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>метод, который вызывает <xref:System.FormatException> исключение, если строка даты невозможно преобразовать в <xref:System.DateTime> значение.</span><span class="sxs-lookup"><span data-stu-id="c996a-130">For example, if the user is expected to input a date in a particular format, you can parse the date string by calling the <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> method, which returns a <xref:System.Boolean> value that indicates whether the parse operation succeeded, instead of using the <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> method, which throws a <xref:System.FormatException> exception if the date string cannot be converted to a <xref:System.DateTime> value.</span></span> <span data-ttu-id="c996a-131">Аналогично, если пользователь пытается открыть файл, который не существует, сначала можно вызвать <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> метод для проверки, является ли файл существует и, если оно отсутствует, запрос пользователю хочет создать его.</span><span class="sxs-lookup"><span data-stu-id="c996a-131">Similarly, if a user tries to open a file that does not exist, you can first call the <xref:System.IO.File.Exists%2A?displayProperty=nameWithType> method to check whether the file exists and, if it does not, prompt the user whether he or she wants to create it.</span></span>  
  
     <span data-ttu-id="c996a-132">В других случаях ошибки в программе отражает условием непредвиденные ошибки, которое может быть обработано в коде.</span><span class="sxs-lookup"><span data-stu-id="c996a-132">In other cases, a program error reflects an unexpected error condition that can be handled in your code.</span></span> <span data-ttu-id="c996a-133">Например даже если вы проверили, чтобы убедиться, что файл существует, его могут быть удалены перед его можно открыть, или он может быть поврежден.</span><span class="sxs-lookup"><span data-stu-id="c996a-133">For example, even if you've checked to ensure that a file exists, it may be deleted before you can open it, or it may be corrupted.</span></span> <span data-ttu-id="c996a-134">В этом случае при попытке открыть файл путем создания экземпляра <xref:System.IO.StreamReader> объекта или вызова <xref:System.IO.File.Open%2A> метод может генерировать <xref:System.IO.FileNotFoundException> исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-134">In that case, trying to open the file by instantiating a <xref:System.IO.StreamReader> object or calling the <xref:System.IO.File.Open%2A> method may throw a <xref:System.IO.FileNotFoundException> exception.</span></span> <span data-ttu-id="c996a-135">В таких случаях следует использовать обработку исключений для устранения таких ошибок.</span><span class="sxs-lookup"><span data-stu-id="c996a-135">In these cases, you should use exception handling to recover from the error.</span></span>  
  
-   <span data-ttu-id="c996a-136">**Сбои системы.**</span><span class="sxs-lookup"><span data-stu-id="c996a-136">**System failures.**</span></span> <span data-ttu-id="c996a-137">Сбой системы является ошибкой времени выполнения, которая не могут быть обработаны программным способом в осмысленном виде.</span><span class="sxs-lookup"><span data-stu-id="c996a-137">A system failure is a run-time error that cannot be handled programmatically in a meaningful way.</span></span> <span data-ttu-id="c996a-138">Например, можно вызывать любой метод <xref:System.OutOfMemoryException> исключение, если среда CLR не сможет выделить дополнительную память.</span><span class="sxs-lookup"><span data-stu-id="c996a-138">For example, any method can throw an <xref:System.OutOfMemoryException> exception if the common language runtime is unable to allocate additional memory.</span></span> <span data-ttu-id="c996a-139">Как правило системные сбои не обрабатываются с помощью обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-139">Ordinarily, system failures are not handled by using exception handling.</span></span> <span data-ttu-id="c996a-140">Вместо этого можно использовать события, такие как <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> и вызвать <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> метода для входа сведения об исключении и уведомлять пользователя о сбое, перед завершением работы приложения.</span><span class="sxs-lookup"><span data-stu-id="c996a-140">Instead, you may be able to use an event such as <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> and call the <xref:System.Environment.FailFast%2A?displayProperty=nameWithType> method to log exception information and notify the user of the failure before the application terminates.</span></span>  
  
<a name="TryCatch"></a>   
## <a name="trycatch-blocks"></a><span data-ttu-id="c996a-141">Блоки try/catch</span><span class="sxs-lookup"><span data-stu-id="c996a-141">Try/catch blocks</span></span>  
 <span data-ttu-id="c996a-142">Среда CLR предоставляет модель обработки исключений, основанный на представлении исключений как объектов и разделение программного кода и кода обработки исключения на `try` блоков и `catch` блоков.</span><span class="sxs-lookup"><span data-stu-id="c996a-142">The common language runtime provides an exception handling model that is based on the representation of exceptions as objects, and the separation of program code and exception handling code into `try` blocks and `catch` blocks.</span></span> <span data-ttu-id="c996a-143">Может существовать один или несколько `catch` блокирует, каждое из которых для обработки конкретного типа исключения, или один блок, позволяющий перехватить исключение более конкретного, чем другой.</span><span class="sxs-lookup"><span data-stu-id="c996a-143">There can be one or more `catch` blocks, each designed to handle a particular type of exception, or one block designed to catch a more specific exception than another block.</span></span>  
  
 <span data-ttu-id="c996a-144">Если приложение обрабатывает исключения, возникающие во время выполнения блока кода приложения, код должен быть помещен в `try` инструкции и вызывается `try` блока.</span><span class="sxs-lookup"><span data-stu-id="c996a-144">If an application handles exceptions that occur during the execution of a block of application code, the code must be placed within a `try` statement and is called a `try` block.</span></span> <span data-ttu-id="c996a-145">Код приложения, который обрабатывает исключения, создаваемые `try` помещен в блок `catch` инструкции и вызывается `catch` блока.</span><span class="sxs-lookup"><span data-stu-id="c996a-145">Application code that handles exceptions thrown by a `try` block is placed within a `catch` statement and is called a `catch` block.</span></span> <span data-ttu-id="c996a-146">Ноль или более `catch` блоки связаны с `try` блока, при этом каждая `catch` блок содержит фильтр типа, который определяет типы исключений, он обрабатывает.</span><span class="sxs-lookup"><span data-stu-id="c996a-146">Zero or more `catch` blocks are associated with a `try` block, and each `catch` block includes a type filter that determines the types of exceptions it handles.</span></span>  
  
 <span data-ttu-id="c996a-147">При возникновении исключения в `try` блока, система осуществляет поиск связанных `catch` блоков в порядке, они отображаются в коде приложения, пока не найдет `catch` блок, который обрабатывает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-147">When an exception occurs in a `try` block, the system searches the associated `catch` blocks in the order they appear in application code, until it locates a `catch` block that handles the exception.</span></span> <span data-ttu-id="c996a-148">Объект `catch` обрабатывает исключение типа `T` Если тип фильтра блока catch указывает `T` или любой тип, который `T` является производным от.</span><span class="sxs-lookup"><span data-stu-id="c996a-148">A `catch` block handles an exception of type `T` if the type filter of the catch block specifies `T` or any type that `T` derives from.</span></span> <span data-ttu-id="c996a-149">Система прекращает поиск после он находит первый `catch` блок, который обрабатывает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-149">The system stops searching after it finds the first `catch` block that handles the exception.</span></span> <span data-ttu-id="c996a-150">По этой причине в коде приложения `catch` блок обработки типа должны быть указаны до `catch` блок, который обрабатывает его базовых типов, как показано в следующем примере в этом разделе.</span><span class="sxs-lookup"><span data-stu-id="c996a-150">For this reason, in application code, a `catch` block that handles a type must be specified before a `catch` block that handles its base types, as demonstrated in the example that follows this section.</span></span> <span data-ttu-id="c996a-151">Блок catch, обрабатывающий `System.Exception` указывается в последнюю очередь.</span><span class="sxs-lookup"><span data-stu-id="c996a-151">A catch block that handles `System.Exception` is specified last.</span></span>  
  
 <span data-ttu-id="c996a-152">Если ни один из `catch` блоки, связанный с текущим `try` блок обработки исключения и текущий `try` блок, вложены в другие `try` блокирует в текущем вызове `catch` блокировок, сопоставленных со следующим заключив `try` блок производится поиск.</span><span class="sxs-lookup"><span data-stu-id="c996a-152">If none of the `catch` blocks associated with the current `try` block handle the exception, and the current `try` block is nested within other `try` blocks in the current call, the `catch` blocks associated with the next enclosing `try` block are searched.</span></span> <span data-ttu-id="c996a-153">Если нет `catch` блокировка для исключения найдена, система осуществляет поиск предыдущих уровней вложенности в текущем вызове.</span><span class="sxs-lookup"><span data-stu-id="c996a-153">If no `catch` block for the exception is found, the system searches previous nesting levels in the current call.</span></span> <span data-ttu-id="c996a-154">Если не `catch` блоков найден в текущем вызове, исключение передается вверх по стеку вызовов и предыдущего кадра стека в поисках `catch` блок, который обрабатывает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-154">If no `catch` block for the exception is found in the current call, the exception is passed up the call stack, and the previous stack frame is searched for a `catch` block that handles the exception.</span></span> <span data-ttu-id="c996a-155">Поиск стека вызовов продолжается, пока исключение не будет обработано или пока не закончатся в стеке вызовов.</span><span class="sxs-lookup"><span data-stu-id="c996a-155">The search of the call stack continues until the exception is handled or until no more frames exist on the call stack.</span></span> <span data-ttu-id="c996a-156">По достижении верхней части стека вызовов без поиск `catch` блок, который обрабатывает исключение, обработчик исключений по умолчанию обрабатывает его и приложение завершает работу.</span><span class="sxs-lookup"><span data-stu-id="c996a-156">If the top of the call stack is reached without finding a `catch` block that handles the exception, the default exception handler handles it and the application terminates.</span></span>  
  
<a name="Features"></a>   
## <a name="exception-type-features"></a><span data-ttu-id="c996a-157">Возможности типов исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-157">Exception type features</span></span>  
 <span data-ttu-id="c996a-158">Типы исключений поддерживают следующие функции:</span><span class="sxs-lookup"><span data-stu-id="c996a-158">Exception types support the following features:</span></span>  
  
-   <span data-ttu-id="c996a-159">Удобочитаемый текст с описанием ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-159">Human-readable text that describes the error.</span></span> <span data-ttu-id="c996a-160">При возникновении исключения среда выполнения предоставляет текстовое сообщение для информировать пользователей об характер ошибки, и предлагает способы ее устранения.</span><span class="sxs-lookup"><span data-stu-id="c996a-160">When an exception occurs, the runtime makes a text message available to inform the user of the nature of the error and to suggest action to resolve the problem.</span></span> <span data-ttu-id="c996a-161">Текстовое сообщение хранится в <xref:System.Exception.Message%2A> свойства объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-161">This text message is held in the <xref:System.Exception.Message%2A> property of the exception object.</span></span> <span data-ttu-id="c996a-162">Во время создания объекта исключения можно передать строку текста в конструктор для описания сведений данного исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-162">During the creation of the exception object, you can pass a text string to the constructor to describe the details of that particular exception.</span></span> <span data-ttu-id="c996a-163">Если аргумент сообщения об предоставляется конструктору, используется сообщение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c996a-163">If no error message argument is supplied to the constructor, the default error message is used.</span></span> <span data-ttu-id="c996a-164">Дополнительные сведения см. в свойстве <xref:System.Exception.Message%2A>.</span><span class="sxs-lookup"><span data-stu-id="c996a-164">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="c996a-165">Состояние стека вызовов, когда возникло исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-165">The state of the call stack when the exception was thrown.</span></span> <span data-ttu-id="c996a-166"><xref:System.Exception.StackTrace%2A> Несет трассировку стека, который может использоваться для определения, где произошла ошибка в коде.</span><span class="sxs-lookup"><span data-stu-id="c996a-166">The <xref:System.Exception.StackTrace%2A> property carries a stack trace that can be used to determine where the error occurs in the code.</span></span> <span data-ttu-id="c996a-167">Трассировка стека перечислены все вызываемые методы и номера строк в исходном файле, в которой выполняются вызовы.</span><span class="sxs-lookup"><span data-stu-id="c996a-167">The stack trace lists all the called methods and the line numbers in the source file where the calls are made.</span></span>  
  
<a name="Properties"></a>   
## <a name="exception-class-properties"></a><span data-ttu-id="c996a-168">Свойства класса исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-168">Exception class properties</span></span>  
 <span data-ttu-id="c996a-169"><xref:System.Exception> Класс содержит ряд свойств, которые помогают определить расположения кода, тип, файл справки и причины исключения: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, и <xref:System.Exception.Data%2A>.</span><span class="sxs-lookup"><span data-stu-id="c996a-169">The <xref:System.Exception> class includes a number of properties that help identify the code location, the type, the help file, and the reason for the exception: <xref:System.Exception.StackTrace%2A>, <xref:System.Exception.InnerException%2A>, <xref:System.Exception.Message%2A>, <xref:System.Exception.HelpLink%2A>, <xref:System.Exception.HResult%2A>, <xref:System.Exception.Source%2A>, <xref:System.Exception.TargetSite%2A>, and <xref:System.Exception.Data%2A>.</span></span>  
  
 <span data-ttu-id="c996a-170">Если существует причинно-следственной связи между два или несколько исключений, <xref:System.Exception.InnerException%2A> свойство обслуживание этой информации.</span><span class="sxs-lookup"><span data-stu-id="c996a-170">When a causal relationship exists between two or more exceptions, the <xref:System.Exception.InnerException%2A> property maintains this information.</span></span> <span data-ttu-id="c996a-171">Внешнее исключение в ответ на это внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-171">The outer exception is thrown in response to this inner exception.</span></span> <span data-ttu-id="c996a-172">Код, который обрабатывает внешнее исключение можно использовать сведения из ранее внутреннего исключения для более качественной обработки ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-172">The code that handles the outer exception can use the information from the earlier inner exception to handle the error more appropriately.</span></span> <span data-ttu-id="c996a-173">С дополнительными сведениями об исключении могут храниться в виде коллекции пар "ключ значение" в <xref:System.Exception.Data%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-173">Supplementary information about the exception can be stored as a collection of key/value pairs in the <xref:System.Exception.Data%2A> property.</span></span>  
  
 <span data-ttu-id="c996a-174">Строка сообщения об ошибке, передаваемый в конструктор при создании объекта исключения должно быть локализовано и может предоставляться из файла ресурсов с помощью <xref:System.Resources.ResourceManager> класса.</span><span class="sxs-lookup"><span data-stu-id="c996a-174">The error message string that is passed to the constructor during the creation of the exception object should be localized and can be supplied from a resource file by using the <xref:System.Resources.ResourceManager> class.</span></span> <span data-ttu-id="c996a-175">Дополнительные сведения о локализованных ресурсов, см. в разделе [Создание вспомогательных сборок](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) и [упаковка и развертывание ресурсов](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) разделы.</span><span class="sxs-lookup"><span data-stu-id="c996a-175">For more information about localized resources, see the [Creating Satellite Assemblies](~/docs/framework/resources/creating-satellite-assemblies-for-desktop-apps.md) and [Packaging and Deploying Resources](~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md) topics.</span></span>  
  
 <span data-ttu-id="c996a-176">Чтобы обеспечить пользователю с подробными сведениями о возникновения исключения, <xref:System.Exception.HelpLink%2A> свойство может содержать URL-адрес (или URN) файла справки.</span><span class="sxs-lookup"><span data-stu-id="c996a-176">To provide the user with extensive information about why the exception occurred, the <xref:System.Exception.HelpLink%2A> property can hold a URL (or URN) to a help file.</span></span>  
  
 <span data-ttu-id="c996a-177"><xref:System.Exception> Класс использует COR_E_EXCEPTION HRESULT, которое имеет значение 0x80131500.</span><span class="sxs-lookup"><span data-stu-id="c996a-177">The <xref:System.Exception> class uses the HRESULT COR_E_EXCEPTION, which has the value 0x80131500.</span></span>  
  
 <span data-ttu-id="c996a-178">Список начальных значений свойств для экземпляра <xref:System.Exception> , представлена в разделе <xref:System.Exception.%23ctor%2A> конструкторы.</span><span class="sxs-lookup"><span data-stu-id="c996a-178">For a list of initial property values for an instance of the <xref:System.Exception> class, see the <xref:System.Exception.%23ctor%2A> constructors.</span></span>  
  
<a name="Performance"></a>   
## <a name="performance-considerations"></a><span data-ttu-id="c996a-179">Особенности производительности</span><span class="sxs-lookup"><span data-stu-id="c996a-179">Performance considerations</span></span>  
 <span data-ttu-id="c996a-180">Создание или обработка исключений потребляет значительный объем системных ресурсов и времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="c996a-180">Throwing or handling an exception consumes a significant amount of system resources and execution time.</span></span> <span data-ttu-id="c996a-181">Создавать исключения только для обработки по-настоящему чрезвычайных ситуаций, не для обработки предсказуемых событий или управления потоком.</span><span class="sxs-lookup"><span data-stu-id="c996a-181">Throw exceptions only to handle truly extraordinary conditions, not to handle predictable events or flow control.</span></span> <span data-ttu-id="c996a-182">Например в некоторых случаях, например если вы разрабатываете библиотеку классов, разумно создавалось исключение аргумента метода недопустимо, так как предполагается, что метод может вызываться с допустимыми параметрами.</span><span class="sxs-lookup"><span data-stu-id="c996a-182">For example, in some cases, such as when you're developing a class library, it's reasonable to throw an exception if a method argument is invalid, because you expect your method to be called with valid parameters.</span></span> <span data-ttu-id="c996a-183">Недопустимый метод аргумента, если он не является результатом ошибки об использовании, означает, что произошло что-то дополнительной.</span><span class="sxs-lookup"><span data-stu-id="c996a-183">An invalid method argument, if it is not the result of a usage error, means that something extraordinary has occurred.</span></span> <span data-ttu-id="c996a-184">И наоборот не следует генерировать исключения, если входные данные пользователя недопустимо, так как можно ожидается, что пользователи иногда ввести недопустимые данные.</span><span class="sxs-lookup"><span data-stu-id="c996a-184">Conversely, do not throw an exception if user input is invalid, because you can expect users to occasionally enter invalid data.</span></span> <span data-ttu-id="c996a-185">Вместо этого предоставляют механизм повтора, поэтому пользователи могут вводить допустимые входные данные.</span><span class="sxs-lookup"><span data-stu-id="c996a-185">Instead, provide a retry mechanism so users can enter valid input.</span></span> <span data-ttu-id="c996a-186">И не следует использовать исключения для обработки ошибок для использования.</span><span class="sxs-lookup"><span data-stu-id="c996a-186">Nor should you use exceptions to handle usage errors.</span></span> <span data-ttu-id="c996a-187">Вместо этого используйте [утверждения](/visualstudio/debugger/assertions-in-managed-code) для выявления и устранения ошибок использования.</span><span class="sxs-lookup"><span data-stu-id="c996a-187">Instead, use [assertions](/visualstudio/debugger/assertions-in-managed-code) to identify and correct usage errors.</span></span>  
  
 <span data-ttu-id="c996a-188">Кроме того не выдает исключение при достаточно кода возврата; код возврата не преобразуются в исключения; сделать не контролирует catch исключения, игнорируйте его и затем продолжить обработку.</span><span class="sxs-lookup"><span data-stu-id="c996a-188">In addition, do not throw an exception when a return code is sufficient; do not convert a return code to an exception; and do not routinely catch an exception, ignore it, and then continue processing.</span></span>  
  
<a name="Rethrow"></a>   
## <a name="re-throwing-an-exception"></a><span data-ttu-id="c996a-189">Повторное создание исключения</span><span class="sxs-lookup"><span data-stu-id="c996a-189">Re-throwing an exception</span></span>  
 <span data-ttu-id="c996a-190">Во многих случаях обработчик исключений просто хочет передать исключение в вызывающий объект.</span><span class="sxs-lookup"><span data-stu-id="c996a-190">In many cases, an exception handler simply wants to pass the exception on to the caller.</span></span> <span data-ttu-id="c996a-191">Это часто происходит в:</span><span class="sxs-lookup"><span data-stu-id="c996a-191">This most often occurs in:</span></span>  
  
-   <span data-ttu-id="c996a-192">Библиотека классов, которая в свою очередь служит оболочкой для вызова методов в библиотеке классов .NET Framework или других библиотек классов.</span><span class="sxs-lookup"><span data-stu-id="c996a-192">A class library that in turn wraps calls to methods in the .NET Framework class library or other class libraries.</span></span>  
  
-   <span data-ttu-id="c996a-193">Приложение или библиотека, которая обнаруживает неустранимое исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-193">An application or library that encounters a fatal exception.</span></span> <span data-ttu-id="c996a-194">Обработчик исключений можно занести исключение в журнал и заново создать исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-194">The exception handler can log the exception and then re-throw the exception.</span></span>  
  
 <span data-ttu-id="c996a-195">Рекомендуемый способ повторного создания исключения, — просто использовать [throw](~/docs/csharp/language-reference/keywords/throw.md) инструкции на языке C# и [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) инструкции в Visual Basic, не включая выражения.</span><span class="sxs-lookup"><span data-stu-id="c996a-195">The recommended way to re-throw an exception is to simply use the [throw](~/docs/csharp/language-reference/keywords/throw.md) statement in C# and the [Throw](~/docs/visual-basic/language-reference/statements/throw-statement.md) statement in Visual Basic without including an expression.</span></span> <span data-ttu-id="c996a-196">Это гарантирует, что все сведения стека вызовов сохраняется, когда исключение передается вызывающему.</span><span class="sxs-lookup"><span data-stu-id="c996a-196">This ensures that all call stack information is preserved when the exception is propagated to the caller.</span></span> <span data-ttu-id="c996a-197">Это показано в следующем примере.</span><span class="sxs-lookup"><span data-stu-id="c996a-197">The following example illustrates this.</span></span> <span data-ttu-id="c996a-198">Метод расширения строки, `FindOccurrences`, служит оболочкой для вызова одной или нескольких <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> без проверки аргументов заранее.</span><span class="sxs-lookup"><span data-stu-id="c996a-198">A string extension method, `FindOccurrences`, wraps one or more calls to <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> without validating its arguments beforehand.</span></span>  
  
 [!code-csharp[System.Exception.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#6)]
 [!code-vb[System.Exception.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#6)]  
  
 <span data-ttu-id="c996a-199">Вызывающий объект затем вызывает `FindOccurrences` дважды.</span><span class="sxs-lookup"><span data-stu-id="c996a-199">A caller then calls `FindOccurrences` twice.</span></span> <span data-ttu-id="c996a-200">Во втором вызове к `FindOccurrences`, вызывающий объект передает `null` как строка поиска, какие варианты <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> метод выдает исключение <xref:System.ArgumentNullException> исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-200">In the second call to `FindOccurrences`, the caller passes a `null` as the search string, which cases the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method to throw an <xref:System.ArgumentNullException> exception.</span></span> <span data-ttu-id="c996a-201">Это исключение обрабатывается `FindOccurrences` метод и передан вызывающей стороне.</span><span class="sxs-lookup"><span data-stu-id="c996a-201">This exception is handled by the `FindOccurrences` method and passed back to the caller.</span></span> <span data-ttu-id="c996a-202">Так как инструкция throw используется без выражения, выходные данные примера показано, что сохраняется стек вызовов.</span><span class="sxs-lookup"><span data-stu-id="c996a-202">Because the throw statement is used with no expression, the output from the example shows that the call stack is preserved.</span></span>  
  
 [!code-csharp[System.Exception.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow1.cs#7)]
 [!code-vb[System.Exception.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow1.vb#7)]  
  
 <span data-ttu-id="c996a-203">Напротив, если исключение повторно создается с помощью</span><span class="sxs-lookup"><span data-stu-id="c996a-203">In contrast, if the exception is re-thrown by using the</span></span>  
  
```csharp  
throw e  
```  
  
```vb  
Throw e  
```  
  
 <span data-ttu-id="c996a-204">инструкции, полный стек вызова не сохраняется, и в примере будет создано следующее:</span><span class="sxs-lookup"><span data-stu-id="c996a-204">statement, the full call stack is not preserved, and the example would generate the following output:</span></span>  
  
```Output  
  
'a' occurs at the following character positions: 4, 7, 15  
  
An exception (ArgumentNullException) occurred.  
Message:  
   Value cannot be null.  
Parameter name: value  
  
Stack Trace:  
      at Library.FindOccurrences(String s, String f)  
   at Example.Main()  
  
```  
  
 <span data-ttu-id="c996a-205">Немного более громоздким, альтернативой является для генерации нового исключения, а также сохранить исходное исключение сведений стека вызовов в внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-205">A slightly more cumbersome alternative is to throw a new exception, and to preserve the original exception's call stack information in an inner exception.</span></span> <span data-ttu-id="c996a-206">Вызывающая сторона может использовать это новое исключение <xref:System.Exception.InnerException%2A> свойство для извлечения кадра стека и другие сведения об исходном исключении.</span><span class="sxs-lookup"><span data-stu-id="c996a-206">The caller can then use the new exception's <xref:System.Exception.InnerException%2A> property to retrieve stack frame and other information about the original exception.</span></span> <span data-ttu-id="c996a-207">В этом случае инструкция throw является:</span><span class="sxs-lookup"><span data-stu-id="c996a-207">In this case, the throw statement is:</span></span>  
  
 [!code-csharp[System.Exception.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#8)]
 [!code-vb[System.Exception.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#8)]  
  
 <span data-ttu-id="c996a-208">Пользовательский код, который обрабатывает исключение должен знать, <xref:System.Exception.InnerException%2A> свойство содержит сведения об исходном исключении, как показано в следующем обработчика исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-208">The user code that handles the exception has to know that the <xref:System.Exception.InnerException%2A> property contains information about the original exception, as the following exception handler illustrates.</span></span>  
  
 [!code-csharp[System.Exception.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/rethrow3.cs#9)]
 [!code-vb[System.Exception.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/rethrow3.vb#9)]  
  
<a name="Standard"></a>   
## <a name="choosing-standard-exceptions"></a><span data-ttu-id="c996a-209">Выбор стандартных исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-209">Choosing standard exceptions</span></span>  
 <span data-ttu-id="c996a-210">При наличии для создания исключения, часто можно использовать существующий тип исключений в .NET Framework вместо реализации пользовательского исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-210">When you have to throw an exception, you can often use an existing exception type in the .NET Framework instead of implementing a custom exception.</span></span> <span data-ttu-id="c996a-211">Следует использовать тип стандартное исключение в этих двух условий:</span><span class="sxs-lookup"><span data-stu-id="c996a-211">You should use a standard exception type under these two conditions:</span></span>  
  
-   <span data-ttu-id="c996a-212">Вы исключение, вызванное Ошибка использования (то есть за ошибки в логике программы разработчика, который вызывает метод).</span><span class="sxs-lookup"><span data-stu-id="c996a-212">You are throwing an exception that is caused by a usage error (that is, by an error in program logic made by the developer who is calling your method).</span></span> <span data-ttu-id="c996a-213">Как правило, может генерировать исключение, такие как <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, или <xref:System.NotSupportedException>.</span><span class="sxs-lookup"><span data-stu-id="c996a-213">Typically, you would throw an exception such as <xref:System.ArgumentException>, <xref:System.ArgumentNullException>, <xref:System.InvalidOperationException>, or <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="c996a-214">Строка, передаваемые конструктору объекта исключения при создании экземпляра объекта исключения следует описания ошибки, таким образом, разработчик может устранить проблему.</span><span class="sxs-lookup"><span data-stu-id="c996a-214">The string you supply to the exception object's constructor when instantiating the exception object should describe the error so that the developer can fix it.</span></span> <span data-ttu-id="c996a-215">Дополнительные сведения см. в свойстве <xref:System.Exception.Message%2A>.</span><span class="sxs-lookup"><span data-stu-id="c996a-215">For more information, see the <xref:System.Exception.Message%2A> property.</span></span>  
  
-   <span data-ttu-id="c996a-216">Обработки ошибок, можно сообщить в вызывающий объект с существующей исключения .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c996a-216">You are handling an error that can be communicated to the caller with an existing .NET Framework exception.</span></span> <span data-ttu-id="c996a-217">Наиболее производный исключение возможных необходимо вызвать исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-217">You should throw the most derived exception possible.</span></span> <span data-ttu-id="c996a-218">Например, если метод требует аргумента допустимый член типа перечисления, необходимо вызвать исключение <xref:System.ComponentModel.InvalidEnumArgumentException> (наиболее производный класс), а не <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="c996a-218">For example, if a method requires an argument to be a valid member of an enumeration type, you should throw an <xref:System.ComponentModel.InvalidEnumArgumentException> (the most derived class) rather than an <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="c996a-219">Ниже перечислены общие типы исключений и условия, при которых создавал исключение, их.</span><span class="sxs-lookup"><span data-stu-id="c996a-219">The following table lists common exception types and the conditions under which you would throw them.</span></span>  
  
|<span data-ttu-id="c996a-220">Исключение</span><span class="sxs-lookup"><span data-stu-id="c996a-220">Exception</span></span>|<span data-ttu-id="c996a-221">Условие</span><span class="sxs-lookup"><span data-stu-id="c996a-221">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.ArgumentException>|<span data-ttu-id="c996a-222">Недопустимый аргумент отличное от null, который передается в метод.</span><span class="sxs-lookup"><span data-stu-id="c996a-222">A non-null argument that is passed to a method is invalid.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="c996a-223">Аргумент, передаваемый в метод `null`.</span><span class="sxs-lookup"><span data-stu-id="c996a-223">An argument that is passed to a method is `null`.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="c996a-224">Значение аргумента находится вне диапазона допустимых значений.</span><span class="sxs-lookup"><span data-stu-id="c996a-224">An argument is outside the range of valid values.</span></span>|  
|<xref:System.IO.DirectoryNotFoundException>|<span data-ttu-id="c996a-225">Часть пути каталога является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="c996a-225">Part of a directory path is not valid.</span></span>|  
|<xref:System.DivideByZeroException>|<span data-ttu-id="c996a-226">Знаменатель в целое число или <xref:System.Decimal> операции деления равно нулю.</span><span class="sxs-lookup"><span data-stu-id="c996a-226">The denominator in an integer or <xref:System.Decimal> division operation is zero.</span></span>|  
|<xref:System.IO.DriveNotFoundException>|<span data-ttu-id="c996a-227">Диск недоступен или не существует.</span><span class="sxs-lookup"><span data-stu-id="c996a-227">A drive is unavailable or does not exist.</span></span>|  
|<xref:System.IO.FileNotFoundException>|<span data-ttu-id="c996a-228">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c996a-228">A file does not exist.</span></span>|  
|<xref:System.FormatException>|<span data-ttu-id="c996a-229">Значение не находится в соответствующий формат для преобразования из строки с помощью метода преобразования таких как `Parse`.</span><span class="sxs-lookup"><span data-stu-id="c996a-229">A value is not in an appropriate format to be converted from a string by a conversion method such as `Parse`.</span></span>|  
|<xref:System.IndexOutOfRangeException>|<span data-ttu-id="c996a-230">Индекс находится вне границ массива или коллекции.</span><span class="sxs-lookup"><span data-stu-id="c996a-230">An index is outside the bounds of an array or collection.</span></span>|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="c996a-231">Вызов метода является недопустимым в текущем состоянии объекта.</span><span class="sxs-lookup"><span data-stu-id="c996a-231">A method call is invalid in an object's current state.</span></span>|  
|<xref:System.Collections.Generic.KeyNotFoundException>|<span data-ttu-id="c996a-232">Не удается найти указанный ключ для обращения к элементу в коллекции.</span><span class="sxs-lookup"><span data-stu-id="c996a-232">The specified key for accessing a member in a collection cannot be found.</span></span>|  
|<xref:System.NotImplementedException>|<span data-ttu-id="c996a-233">Метод или операция не реализованы.</span><span class="sxs-lookup"><span data-stu-id="c996a-233">A method or operation is not implemented.</span></span>|  
|<xref:System.NotSupportedException>|<span data-ttu-id="c996a-234">Метод или операция не поддерживается.</span><span class="sxs-lookup"><span data-stu-id="c996a-234">A method or operation is not supported.</span></span>|  
|<xref:System.ObjectDisposedException>|<span data-ttu-id="c996a-235">Операция выполняется на объекте, который был удален.</span><span class="sxs-lookup"><span data-stu-id="c996a-235">An operation is performed on an object that has been disposed.</span></span>|  
|<xref:System.OverflowException>|<span data-ttu-id="c996a-236">Операция арифметического приведения или преобразования приводит к переполнению.</span><span class="sxs-lookup"><span data-stu-id="c996a-236">An arithmetic, casting, or conversion operation results in an overflow.</span></span>|  
|<xref:System.IO.PathTooLongException>|<span data-ttu-id="c996a-237">Путь или имя файла превышает максимальную длину определяемого системой.</span><span class="sxs-lookup"><span data-stu-id="c996a-237">A path or file name exceeds the maximum system-defined length.</span></span>|  
|<xref:System.PlatformNotSupportedException>|<span data-ttu-id="c996a-238">Операция не поддерживается на текущей платформе.</span><span class="sxs-lookup"><span data-stu-id="c996a-238">The operation is not supported on the current platform.</span></span>|  
|<xref:System.RankException>|<span data-ttu-id="c996a-239">Массив с неверным числом размерностей передается в метод.</span><span class="sxs-lookup"><span data-stu-id="c996a-239">An array with the wrong number of dimensions is passed to a method.</span></span>|  
|<xref:System.TimeoutException>|<span data-ttu-id="c996a-240">Истек интервал времени, выделенное для выполнения операции.</span><span class="sxs-lookup"><span data-stu-id="c996a-240">The time interval allotted to an operation has expired.</span></span>|  
|<xref:System.UriFormatException>|<span data-ttu-id="c996a-241">Используется недопустимый универсальный код ресурса (URI).</span><span class="sxs-lookup"><span data-stu-id="c996a-241">An invalid Uniform Resource Identifier (URI) is used.</span></span>|  
  
<a name="Custom"></a>   
## <a name="implementing-custom-exceptions"></a><span data-ttu-id="c996a-242">Реализация пользовательских исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-242">Implementing custom exceptions</span></span>  
 <span data-ttu-id="c996a-243">В следующих случаях использование существующих исключения .NET Framework для обработки ошибки не подходит:</span><span class="sxs-lookup"><span data-stu-id="c996a-243">In the following cases, using an existing .NET Framework exception to handle an error condition is not adequate:</span></span>  
  
-   <span data-ttu-id="c996a-244">Когда исключение отражает уникальный ошибки не может быть сопоставлен существующей исключения .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c996a-244">When the exception reflects a unique program error that cannot be mapped to an existing .NET Framework exception.</span></span>  
  
-   <span data-ttu-id="c996a-245">Когда исключение требует обработки, который отличается от обработки, который подходит для существующих исключения .NET Framework, или исключение должно однозначно из аналогичное исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-245">When the exception requires handling that is different from the handling that is appropriate for an existing .NET Framework exception, or the exception must be disambiguated from a similar exception.</span></span> <span data-ttu-id="c996a-246">Например, если вызывается <xref:System.ArgumentOutOfRangeException> исключение при синтаксическом анализе численное представление строки, которая выходит за пределы диапазона целочисленных типа целевого объекта, вам не следует использовать то же исключение для ошибки, полученный в результате вызывающий объект не указываются соответствующие значения ограничением при вызове метода.</span><span class="sxs-lookup"><span data-stu-id="c996a-246">For example, if you throw an <xref:System.ArgumentOutOfRangeException> exception when parsing the numeric representation of a string that is out of range of the target integral type, you would not want to use the same exception for an error that results from the caller not supplying the appropriate constrained values when calling the method.</span></span>  
  
 <span data-ttu-id="c996a-247"><xref:System.Exception> Класс является базовым классом для всех исключений в .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c996a-247">The <xref:System.Exception> class is the base class of all exceptions in the .NET Framework.</span></span> <span data-ttu-id="c996a-248">Многие производные классы зависят от поведения наследуемых членов <xref:System.Exception> класса; они не переопределяли членами <xref:System.Exception>, ни они определяют любой уникальных элементов.</span><span class="sxs-lookup"><span data-stu-id="c996a-248">Many derived classes rely on the inherited behavior of the members of the <xref:System.Exception> class; they do not override the members of <xref:System.Exception>, nor do they define any unique members.</span></span>  
  
 <span data-ttu-id="c996a-249">Чтобы определить собственный класс исключения:</span><span class="sxs-lookup"><span data-stu-id="c996a-249">To define your own exception class:</span></span>  
  
1.  <span data-ttu-id="c996a-250">Определите класс, наследуемый от <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="c996a-250">Define a class that inherits from <xref:System.Exception>.</span></span> <span data-ttu-id="c996a-251">При необходимости определите все уникальные члены, необходимые вашим классом, для предоставления дополнительных сведений об исключении.</span><span class="sxs-lookup"><span data-stu-id="c996a-251">If necessary, define any unique members needed by your class to provide additional information about the exception.</span></span> <span data-ttu-id="c996a-252">Например <xref:System.ArgumentException> класс включает <xref:System.ArgumentException.ParamName%2A> свойство, указывающее имя параметра, чей аргумент вызвала исключение, и <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> включает свойство <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> свойство, указывающее интервал времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="c996a-252">For example, the <xref:System.ArgumentException> class includes a <xref:System.ArgumentException.ParamName%2A> property that specifies the name of the parameter whose argument caused the exception, and the <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> property includes a <xref:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout%2A> property that indicates the time-out interval.</span></span>  
  
2.  <span data-ttu-id="c996a-253">При необходимости Переопределите все унаследованные члены, функциональность которого вы хотите изменить или изменить.</span><span class="sxs-lookup"><span data-stu-id="c996a-253">If necessary, override any inherited members whose functionality you want to change or modify.</span></span> <span data-ttu-id="c996a-254">Обратите внимание, что большинство существующих производными классами от <xref:System.Exception> не переопределить поведение унаследованных членов.</span><span class="sxs-lookup"><span data-stu-id="c996a-254">Note that most existing derived classes of <xref:System.Exception> do not override the behavior of inherited members.</span></span>  
  
3.  <span data-ttu-id="c996a-255">Определите, сериализуем ли объект пользовательское исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-255">Determine whether your custom exception object is serializable.</span></span> <span data-ttu-id="c996a-256">Сериализация позволяет сохранить сведения об исключении и разрешает сведения об исключении для совместного использования сервера и прокси-сервер клиента в контексте удаленного взаимодействия.</span><span class="sxs-lookup"><span data-stu-id="c996a-256">Serialization enables you to save information about the exception and permits exception information to be shared by a server and a client proxy in a remoting context.</span></span> <span data-ttu-id="c996a-257">Чтобы сделать объект исключения сериализуемым, отметить его атрибутом <xref:System.SerializableAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="c996a-257">To make the exception object serializable, mark it with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
4.  <span data-ttu-id="c996a-258">Определите конструкторы класса исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-258">Define the constructors of your exception class.</span></span> <span data-ttu-id="c996a-259">Как правило классы исключений имеют один или несколько из следующих конструкторов:</span><span class="sxs-lookup"><span data-stu-id="c996a-259">Typically, exception classes have one or more of the following constructors:</span></span>  
  
    -   <span data-ttu-id="c996a-260"><xref:System.Exception.%23ctor>, использующий значения по умолчанию для инициализации свойства объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-260"><xref:System.Exception.%23ctor>, which uses default values to initialize the properties of a new exception object.</span></span>  
  
    -   <span data-ttu-id="c996a-261"><xref:System.Exception.%23ctor%28System.String%29>, который инициализирует объект исключения с указанным сообщением об ошибке.</span><span class="sxs-lookup"><span data-stu-id="c996a-261"><xref:System.Exception.%23ctor%28System.String%29>, which initializes a new exception object with a specified error message.</span></span>  
  
    -   <span data-ttu-id="c996a-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, который инициализирует объект исключения с сообщением и внутренним исключением указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-262"><xref:System.Exception.%23ctor%28System.String%2CSystem.Exception%29>, which initializes a new exception object with a specified error message and inner exception.</span></span>  
  
    -   <span data-ttu-id="c996a-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, который является `protected` конструктор, который инициализирует новый объект исключения из сериализованных данных.</span><span class="sxs-lookup"><span data-stu-id="c996a-263"><xref:System.Exception.%23ctor%28System.Runtime.Serialization.SerializationInfo%2CSystem.Runtime.Serialization.StreamingContext%29>, which is a `protected` constructor that initializes a new exception object from serialized data.</span></span> <span data-ttu-id="c996a-264">Этот конструктор следует реализовать, если вы решили сделать сериализуемым объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-264">You should implement this constructor if you've chosen to make your exception object serializable.</span></span>  
  
 <span data-ttu-id="c996a-265">Следующий пример иллюстрирует использование класса пользовательского исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-265">The following example illustrates the use of a custom exception class.</span></span> <span data-ttu-id="c996a-266">Он определяет `NotPrimeException` исключение, возникающее, когда клиент пытается получить последовательность простых чисел, указав начальный номер, который не является простым.</span><span class="sxs-lookup"><span data-stu-id="c996a-266">It defines a `NotPrimeException` exception that is thrown when a client tries to retrieve a sequence of prime numbers by specifying a starting number that is not prime.</span></span> <span data-ttu-id="c996a-267">Исключение определяет новое свойство, `NonPrime`, который возвращает не простое число, вызвавшего исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-267">The exception defines a new property, `NonPrime`, that returns the non-prime number that caused the exception.</span></span> <span data-ttu-id="c996a-268">Помимо реализации защищенный конструктор без параметров и конструктор с <xref:System.Runtime.Serialization.SerializationInfo> и <xref:System.Runtime.Serialization.StreamingContext> параметры для сериализации, `NotPrimeException` класс определяет три дополнительные конструкторы для поддержки `NonPrime` свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-268">Besides implementing a protected parameterless constructor and a constructor with <xref:System.Runtime.Serialization.SerializationInfo> and <xref:System.Runtime.Serialization.StreamingContext> parameters for serialization, the `NotPrimeException` class defines three additional constructors to support the `NonPrime` property.</span></span>  <span data-ttu-id="c996a-269">Каждый конструктор вызывает конструктор базового класса в дополнение к сохранение из простых нечисловое значение.</span><span class="sxs-lookup"><span data-stu-id="c996a-269">Each constructor calls a base class constructor in addition to preserving the value of the non-prime number.</span></span> <span data-ttu-id="c996a-270">`NotPrimeException` Класса также задано <xref:System.SerializableAttribute> атрибута.</span><span class="sxs-lookup"><span data-stu-id="c996a-270">The `NotPrimeException` class is also marked with the <xref:System.SerializableAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Exception.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/notprimeexception.cs#1)]
 [!code-vb[System.Exception.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/notprimeexception.vb#1)]  
  
 <span data-ttu-id="c996a-271">`PrimeNumberGenerator` Класс, показанный в следующем примере использует "решето Эратосфена", чтобы вычислить последовательность простых чисел от 2 до предела, указанное клиентом в вызове конструктора класса.</span><span class="sxs-lookup"><span data-stu-id="c996a-271">The `PrimeNumberGenerator` class shown in the following example uses the Sieve of Eratosthenes to calculate the sequence of prime numbers from 2 to a limit specified by the client in the call to its class constructor.</span></span> <span data-ttu-id="c996a-272">`GetPrimesFrom` Метод возвращает все простые числа не меньше указанного нижний предел, но создает исключение `NotPrimeException` Если, нижний предел не простое число.</span><span class="sxs-lookup"><span data-stu-id="c996a-272">The `GetPrimesFrom` method returns all prime numbers that are greater than or equal to a specified lower limit, but throws a `NotPrimeException` if that lower limit is not a prime number.</span></span>  
  
 [!code-csharp[System.Exception.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/primenumbergenerator.cs#2)]
 [!code-vb[System.Exception.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/primenumbergenerator.vb#2)]  
  
 <span data-ttu-id="c996a-273">В следующем примере создается два вызова `GetPrimesFrom` метод с непростых чисел, один из которых за пределами домена приложения.</span><span class="sxs-lookup"><span data-stu-id="c996a-273">The following example makes two calls to the `GetPrimesFrom` method with non-prime numbers, one of which crosses application domain boundaries.</span></span> <span data-ttu-id="c996a-274">В обоих случаях исключение создается и успешно обработано в коде клиента.</span><span class="sxs-lookup"><span data-stu-id="c996a-274">In both cases, the exception is thrown and successfully handled in client code.</span></span>  
  
 [!code-csharp[System.Exception.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.class/cs/example.cs#3)]
 [!code-vb[System.Exception.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.class/vb/example.vb#3)]  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="c996a-275">Среда выполнения Windows и [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="c996a-275">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="c996a-276">В [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] для [!INCLUDE[win8](~/includes/win8-md.md)], некоторые сведения об исключении обычно теряется, если исключение распространяется через кадры стека .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c996a-276">In [!INCLUDE[net_win8_profile](~/includes/net-win8-profile-md.md)] for [!INCLUDE[win8](~/includes/win8-md.md)], some exception information is typically lost when an exception is propagated through non-.NET Framework stack frames.</span></span> <span data-ttu-id="c996a-277">Начиная с [!INCLUDE[net_v451](~/includes/net-v451-md.md)] и [!INCLUDE[win81](~/includes/win81-md.md)], среда CLR по-прежнему будет использоваться исходное <xref:System.Exception> объекта, созданного исключения, если это исключение был изменен в кадр стека .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c996a-277">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the common language runtime continues to use the original <xref:System.Exception> object that was thrown unless that exception was modified in a non-.NET Framework stack frame.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-278">В следующем примере демонстрируется `catch` блок, который определен для обработки <xref:System.ArithmeticException> ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-278">The following example demonstrates a `catch` block that is defined to handle <xref:System.ArithmeticException> errors.</span></span> <span data-ttu-id="c996a-279">Это `catch` также блокировать перехватываются <xref:System.DivideByZeroException> ошибки, так как <xref:System.DivideByZeroException> является производным от <xref:System.ArithmeticException> и не `catch` блок, явно определенный для <xref:System.DivideByZeroException> ошибок.</span><span class="sxs-lookup"><span data-stu-id="c996a-279">This `catch` block also catches <xref:System.DivideByZeroException> errors, because <xref:System.DivideByZeroException> derives from <xref:System.ArithmeticException> and there is no `catch` block explicitly defined for <xref:System.DivideByZeroException> errors.</span></span>  
  
 [!code-cpp[CatchException#1](~/samples/snippets/cpp/VS_Snippets_CLR/CatchException/CPP/catchexception.cpp#1)]
 [!code-csharp[CatchException#1](~/samples/snippets/csharp/VS_Snippets_CLR/CatchException/CS/catchexception.cs#1)]
 [!code-vb[CatchException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CatchException/VB/catchexception.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/exceptions/index.md"><span data-ttu-id="c996a-280">Обработка и создание исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-280">Handling and Throwing Exceptions</span></span></related>
    <related type="Article" href="~/docs/framework/resources/packaging-and-deploying-resources-in-desktop-apps.md"><span data-ttu-id="c996a-281">Упаковка и развертывание ресурсов в приложениях для настольных систем</span><span class="sxs-lookup"><span data-stu-id="c996a-281">Packaging and Deploying Resources in Desktop Apps</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/70ab2522-6486-4076-a1a9-e0f11cd0f3a1"><span data-ttu-id="c996a-282">Утверждения в управляемом коде</span><span class="sxs-lookup"><span data-stu-id="c996a-282">Assertions in Managed Code</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c996a-283">Инициализирует новый экземпляр класса <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="c996a-283">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c996a-284">Инициализирует новый экземпляр класса <see cref="T:System.Exception" />.</span><span class="sxs-lookup"><span data-stu-id="c996a-284">Initializes a new instance of the <see cref="T:System.Exception" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-285">Этот конструктор инициализирует свойство <xref:System.Exception.Message%2A> нового экземпляра, используя системное сообщение, которое описывает ошибку и учитывает текущий язык и региональные параметры системы.</span><span class="sxs-lookup"><span data-stu-id="c996a-285">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error and takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="c996a-286">Все производные классы должны предоставлять конструктор по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c996a-286">All the derived classes should provide this default constructor.</span></span> <span data-ttu-id="c996a-287">В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="c996a-287">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="c996a-288">Свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-288">Property</span></span>|<span data-ttu-id="c996a-289">Значение</span><span class="sxs-lookup"><span data-stu-id="c996a-289">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="c996a-290">Пустая ссылка (`Nothing` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c996a-290">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="c996a-291">Локализованное описание, предоставляемое системой.</span><span class="sxs-lookup"><span data-stu-id="c996a-291">A system-supplied localized description.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c996a-292">В следующем примере кода является производным `Exception` , использующий стандартные сообщения.</span><span class="sxs-lookup"><span data-stu-id="c996a-292">The following code example derives an `Exception` that uses a predefined message.</span></span> <span data-ttu-id="c996a-293">В коде показано использование конструктора без параметров для производного класса, а также базовый `Exception` класса.</span><span class="sxs-lookup"><span data-stu-id="c996a-293">The code demonstrates the use of the parameterless constructor for the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/new.cpp#1)]
 [!code-csharp[System.Exception.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/new.cs#1)]
 [!code-vb[System.Exception.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/new.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new Exception : string -&gt; Exception" Usage="new System.Exception message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="c996a-294">Сообщение, описывающее ошибку.</span><span class="sxs-lookup"><span data-stu-id="c996a-294">The message that describes the error.</span></span></param>
        <summary><span data-ttu-id="c996a-295">Инициализирует новый экземпляр класса <see cref="T:System.Exception" /> с указанным сообщением об ошибке.</span><span class="sxs-lookup"><span data-stu-id="c996a-295">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-296">Этот конструктор инициализирует <xref:System.Exception.Message%2A> свойства нового экземпляра с помощью `message` параметра.</span><span class="sxs-lookup"><span data-stu-id="c996a-296">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance by using the `message` parameter.</span></span> <span data-ttu-id="c996a-297">Если `message` параметр `null`, это то же самое, что и вызов метода <xref:System.Exception.%23ctor%2A> конструктор.</span><span class="sxs-lookup"><span data-stu-id="c996a-297">If the `message` parameter is `null`, this is the same as calling the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="c996a-298">В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="c996a-298">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="c996a-299">Свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-299">Property</span></span>|<span data-ttu-id="c996a-300">Значение</span><span class="sxs-lookup"><span data-stu-id="c996a-300">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="c996a-301">Пустая ссылка (`Nothing` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c996a-301">A null reference (`Nothing` in Visual Basic).</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="c996a-302">Строка сообщения об ошибке.</span><span class="sxs-lookup"><span data-stu-id="c996a-302">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c996a-303">В следующем примере кода является производным `Exception` для определенного условия.</span><span class="sxs-lookup"><span data-stu-id="c996a-303">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="c996a-304">В коде показано использование конструктора, который принимает в качестве параметра, базовый и производный класс сообщения, определенном вызывающей стороной `Exception` класса.</span><span class="sxs-lookup"><span data-stu-id="c996a-304">The code demonstrates the use of the constructor that takes a caller-specified message as a parameter, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/news.cpp#2)]
 [!code-csharp[System.Exception.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/news.cs#2)]
 [!code-vb[System.Exception.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/news.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new Exception : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; Exception" Usage="new System.Exception (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c996a-305"><see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</span><span class="sxs-lookup"><span data-stu-id="c996a-305">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="c996a-306">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</span><span class="sxs-lookup"><span data-stu-id="c996a-306">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="c996a-307">Инициализирует новый экземпляр класса <see cref="T:System.Exception" /> с сериализованными данными.</span><span class="sxs-lookup"><span data-stu-id="c996a-307">Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-308">Данный конструктор вызывается в процессе десериализации для воссоздания объекта исключения, переданного в потоке.</span><span class="sxs-lookup"><span data-stu-id="c996a-308">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="c996a-309">Дополнительные сведения см. в разделе [сериализация XML и SOAP](~/docs/standard/serialization/xml-and-soap-serialization.md).</span><span class="sxs-lookup"><span data-stu-id="c996a-309">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-310">В следующем примере кода определяется производный сериализуемый `Exception` класса.</span><span class="sxs-lookup"><span data-stu-id="c996a-310">The following code example defines a derived serializable `Exception` class.</span></span> <span data-ttu-id="c996a-311">Код вызывает ошибку деления на ноль, а затем создается экземпляр производного исключения, используя (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) конструктора.</span><span class="sxs-lookup"><span data-stu-id="c996a-311">The code forces a divide-by-0 error and then creates an instance of the derived exception using the (<xref:System.Runtime.Serialization.SerializationInfo>, <xref:System.Runtime.Serialization.StreamingContext>) constructor.</span></span> <span data-ttu-id="c996a-312">Код выполняет сериализацию экземпляра в файл, десериализацию файла в новое исключение, исключение, а затем перехватывает и отображает данные исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-312">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c996a-313"><paramref name="info" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c996a-313"><paramref name="info" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException"><span data-ttu-id="c996a-314">Имя класса — <see langword="null" />, или значение свойства <see cref="P:System.Exception.HResult" /> равно нулю (0).</span><span class="sxs-lookup"><span data-stu-id="c996a-314">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0).</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md"><span data-ttu-id="c996a-315">Сериализация XML и SOAP</span><span class="sxs-lookup"><span data-stu-id="c996a-315">XML and SOAP Serialization</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Exception (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new Exception : string * Exception -&gt; Exception" Usage="new System.Exception (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="c996a-316">Сообщение об ошибке с объяснением причин исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-316">The error message that explains the reason for the exception.</span></span></param>
        <param name="innerException"><span data-ttu-id="c996a-317">Исключение, вызвавшее текущее исключение, или указатель null (<see langword="Nothing" /> в Visual Basic), если внутреннее исключение не задано.</span><span class="sxs-lookup"><span data-stu-id="c996a-317">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</span></span></param>
        <summary><span data-ttu-id="c996a-318">Инициализирует новый экземпляр класса <see cref="T:System.Exception" /> с указанным сообщением об ошибке и ссылкой на внутреннее исключение, вызвавшее это исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-318">Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-319">Исключение, созданное как прямой результат предыдущего исключения, должно содержать в свойстве <xref:System.Exception.InnerException%2A> ссылку на предыдущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-319">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="c996a-320">Свойство <xref:System.Exception.InnerException%2A> возвращает то же значение, которое передается конструктору, или пустую ссылку (`Nothing` в Visual Basic), если свойство <xref:System.Exception.InnerException%2A> не предоставляет конструктору значение внутреннего исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-320">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="c996a-321">В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="c996a-321">The following table shows the initial property values for an instance of <xref:System.Exception>.</span></span>  
  
|<span data-ttu-id="c996a-322">Свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-322">Property</span></span>|<span data-ttu-id="c996a-323">Значение</span><span class="sxs-lookup"><span data-stu-id="c996a-323">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="c996a-324">Ссылка на внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-324">The inner exception reference.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="c996a-325">Строка сообщения об ошибке.</span><span class="sxs-lookup"><span data-stu-id="c996a-325">The error message string.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c996a-326">В следующем примере кода является производным `Exception` для определенного условия.</span><span class="sxs-lookup"><span data-stu-id="c996a-326">The following code example derives an `Exception` for a specific condition.</span></span> <span data-ttu-id="c996a-327">В коде показано использование конструктора, который принимает сообщение и внутреннее исключение в качестве параметров для базового и производного класса `Exception` класса.</span><span class="sxs-lookup"><span data-stu-id="c996a-327">The code demonstrates the use of the constructor that takes a message and an inner exception as parameters, for both the derived class and the base `Exception` class.</span></span>  
  
 [!code-cpp[System.Exception.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Ctor/CPP/newsi.cpp#3)]
 [!code-csharp[System.Exception.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Ctor/CS/newsi.cs#3)]
 [!code-vb[System.Exception.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Ctor/VB/newsi.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionary Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Data" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Data" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Data As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::IDictionary ^ Data { System::Collections::IDictionary ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : System.Collections.IDictionary" Usage="System.Exception.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-328">Возвращает коллекцию пар "ключ-значение", предоставляющих дополнительную заданную пользователем информацию об исключении.</span><span class="sxs-lookup"><span data-stu-id="c996a-328">Gets a collection of key/value pairs that provide additional user-defined information about the exception.</span></span></summary>
        <value><span data-ttu-id="c996a-329">Объект, который реализует интерфейс <see cref="T:System.Collections.IDictionary" /> и содержит в себе коллекцию пар "ключ-значение".</span><span class="sxs-lookup"><span data-stu-id="c996a-329">An object that implements the <see cref="T:System.Collections.IDictionary" /> interface and contains a collection of user-defined key/value pairs.</span></span> <span data-ttu-id="c996a-330">По умолчанию является пустой коллекцией.</span><span class="sxs-lookup"><span data-stu-id="c996a-330">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-331">Используйте <xref:System.Collections.IDictionary?displayProperty=nameWithType> объект, возвращаемый <xref:System.Exception.Data%2A> свойство для хранения и извлечения с дополнительными сведения, относящиеся к исключению.</span><span class="sxs-lookup"><span data-stu-id="c996a-331">Use the <xref:System.Collections.IDictionary?displayProperty=nameWithType> object returned by the <xref:System.Exception.Data%2A> property to store and retrieve supplementary information relevant to the exception.</span></span> <span data-ttu-id="c996a-332">Эта информация содержится в виде произвольное число пар ключ/значение, определяемые пользователем.</span><span class="sxs-lookup"><span data-stu-id="c996a-332">The information is in the form of an arbitrary number of user-defined key/value pairs.</span></span> <span data-ttu-id="c996a-333">Ключевым компонентом каждой пары "ключ значение" обычно является строка, идентифицирующая, а компонент значения пары может быть объект любого типа.</span><span class="sxs-lookup"><span data-stu-id="c996a-333">The key component of each key/value pair is typically an identifying string, whereas the value component of the pair can be any type of object.</span></span>  
  
## <a name="keyvalue-pair-security"></a><span data-ttu-id="c996a-334">Безопасность пар ключ значение</span><span class="sxs-lookup"><span data-stu-id="c996a-334">Key/Value Pair Security</span></span>  
 <span data-ttu-id="c996a-335">Пары ключ/значение, хранящихся в коллекции, возвращаемой <xref:System.Exception.Data%2A> свойства не являются безопасными.</span><span class="sxs-lookup"><span data-stu-id="c996a-335">The key/value pairs stored in the collection returned by the <xref:System.Exception.Data%2A> property are not secure.</span></span> <span data-ttu-id="c996a-336">Если приложение вызывает вложенную последовательность подпрограмм, а каждая процедура содержит обработчики исключений, стек вызовов содержит иерархию этих обработчиков исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-336">If your application calls a nested series of routines, and each routine contains exception handlers, the resulting call stack contains a hierarchy of those exception handlers.</span></span> <span data-ttu-id="c996a-337">При возникновении исключения в подпрограмму более низкого уровня, все обработчики исключений верхнего уровня в иерархии стека вызова могут считывать и/или изменять пары "ключ значение", хранящихся в коллекции с любым другим обработчиком исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-337">If a lower-level routine throws an exception, any upper-level exception handler in the call stack hierarchy can read and/or modify the key/value pairs stored in the collection by any other exception handler.</span></span> <span data-ttu-id="c996a-338">Это означает, что вы должны гарантировать, что данные в парах "ключ значение" не является конфиденциальной и что приложение будет правильно работать в случае повреждения данные в парах "ключ значение".</span><span class="sxs-lookup"><span data-stu-id="c996a-338">This means you must guarantee that the information in the key/value pairs is not confidential and that your application will operate correctly if the information in the key/value pairs is corrupted.</span></span>  
  
## <a name="key-conflicts"></a><span data-ttu-id="c996a-339">Конфликтов ключей</span><span class="sxs-lookup"><span data-stu-id="c996a-339">Key Conflicts</span></span>  
 <span data-ttu-id="c996a-340">Конфликт ключей происходит при разных обработчиках исключений задан один и тот же ключ для доступа к паре ключ/значение.</span><span class="sxs-lookup"><span data-stu-id="c996a-340">A key conflict occurs when different exception handlers specify the same key to access a key/value pair.</span></span> <span data-ttu-id="c996a-341">Будьте осторожны при разработке приложения, так как вследствие конфликта ключей обработчики исключений более низкого уровня случайно могут обмениваться данными с обработчиками исключений верхнего уровня, что это взаимодействие может привести к неочевидных ошибок программы.</span><span class="sxs-lookup"><span data-stu-id="c996a-341">Use caution when developing your application because the consequence of a key conflict is that lower-level exception handlers can inadvertently communicate with higher-level exception handlers, and this communication might cause subtle program errors.</span></span> <span data-ttu-id="c996a-342">Тем не менее если вы являетесь осторожность можно использовать конфликтов ключей расширить свое приложение.</span><span class="sxs-lookup"><span data-stu-id="c996a-342">However, if you are cautious you can use key conflicts to enhance your application.</span></span>  
  
## <a name="avoiding-key-conflicts"></a><span data-ttu-id="c996a-343">Предотвращение конфликтов ключей</span><span class="sxs-lookup"><span data-stu-id="c996a-343">Avoiding Key Conflicts</span></span>  
 <span data-ttu-id="c996a-344">Избегайте конфликтов ключей, интегрируя именования, чтобы создавать уникальные ключи для пар "ключ значение".</span><span class="sxs-lookup"><span data-stu-id="c996a-344">Avoid key conflicts by adopting a naming convention to generate unique keys for key/value pairs.</span></span> <span data-ttu-id="c996a-345">Например соглашение об именовании могут дать ключом, который состоит из имени приложения с разделителями точками, метод, который предоставляет дополнительные сведения для пары, а уникальный идентификатор.</span><span class="sxs-lookup"><span data-stu-id="c996a-345">For example, a naming convention might yield a key that consists of the period-delimited name of your application, the method that provides supplementary information for the pair, and a unique identifier.</span></span>  
  
 <span data-ttu-id="c996a-346">Предположим, что два приложения с именем, продуктами и поставщиками, каждый имеет метод с именем Sales.</span><span class="sxs-lookup"><span data-stu-id="c996a-346">Suppose two applications, named Products and Suppliers, each has a method named Sales.</span></span> <span data-ttu-id="c996a-347">Метод Sales в приложении Products предоставляет идентификационный номер (номера SKU единица или номер SKU) продукта.</span><span class="sxs-lookup"><span data-stu-id="c996a-347">The Sales method in the Products application provides the identification number (the stock keeping unit or SKU) of a product.</span></span> <span data-ttu-id="c996a-348">Метод Sales в приложении Suppliers предоставляет идентификационный номер или идентификатор безопасности, поставщика.</span><span class="sxs-lookup"><span data-stu-id="c996a-348">The Sales method in the Suppliers application provides the identification number, or SID, of a supplier.</span></span> <span data-ttu-id="c996a-349">Следовательно соглашение об именовании для этого примера дает ключей, «Products.Sales.SKU» и «Suppliers.Sales.SID».</span><span class="sxs-lookup"><span data-stu-id="c996a-349">Consequently, the naming convention for this example yields the keys, "Products.Sales.SKU" and "Suppliers.Sales.SID".</span></span>  
  
## <a name="exploiting-key-conflicts"></a><span data-ttu-id="c996a-350">Использования конфликтов ключей</span><span class="sxs-lookup"><span data-stu-id="c996a-350">Exploiting Key Conflicts</span></span>  
 <span data-ttu-id="c996a-351">Воспользоваться конфликтов ключей с помощью наличие одного или нескольких специальных, применив ключей для управления обработкой.</span><span class="sxs-lookup"><span data-stu-id="c996a-351">Exploit key conflicts by using the presence of one or more special, prearranged keys to control processing.</span></span> <span data-ttu-id="c996a-352">Предположим, что в одном случае обработчик исключений высокого уровня в иерархии стека вызова перехватывает все исключения, создаваемые обработчиков исключений более низкого уровня.</span><span class="sxs-lookup"><span data-stu-id="c996a-352">Suppose, in one scenario, the highest level exception handler in the call stack hierarchy catches all exceptions thrown by lower-level exception handlers.</span></span> <span data-ttu-id="c996a-353">Если существует пару "ключ значение" назначить специальный ключ, обработчик исключений высшего уровня форматирует оставшихся пар ключ/значение в <xref:System.Collections.IDictionary> объект либо нестандартным образом; в противном случае оставшихся пар ключ/значение форматируются в некоторых обычным способом.</span><span class="sxs-lookup"><span data-stu-id="c996a-353">If a key/value pair with a special key exists, the high-level exception handler formats the remaining key/value pairs in the <xref:System.Collections.IDictionary> object in some nonstandard way; otherwise, the remaining key/value pairs are formatted in some normal manner.</span></span>  
  
 <span data-ttu-id="c996a-354">Теперь предположим, что в другом сценарии обработчик исключений на каждом уровне иерархии стека вызова перехватывает исключение, вызванное Далее обработчик исключений более низкого уровня.</span><span class="sxs-lookup"><span data-stu-id="c996a-354">Now suppose, in another scenario, the exception handler at each level of the call stack hierarchy catches the exception thrown by the next lower-level exception handler.</span></span> <span data-ttu-id="c996a-355">Кроме того, каждому обработчику исключений известно в коллекцию, возвращаемую <xref:System.Exception.Data%2A> свойство содержит набор пар "ключ значение", доступных с помощью заданного набора ключей.</span><span class="sxs-lookup"><span data-stu-id="c996a-355">In addition, each exception handler knows the collection returned by the <xref:System.Exception.Data%2A> property contains a set of key/value pairs that can be accessed with a prearranged set of keys.</span></span>  
  
 <span data-ttu-id="c996a-356">Каждый обработчик исключений использует заданный набор ключей для обновления компонента значение соответствующей пары ключ/значение сведениями, уникальными для этого обработчика исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-356">Each exception handler uses the prearranged set of keys to update the value component of the corresponding key/value pair with information unique to that exception handler.</span></span> <span data-ttu-id="c996a-357">После завершения процесса обновления, обработчик исключений создает исключение в обработчик исключений следующего более высокого уровня.</span><span class="sxs-lookup"><span data-stu-id="c996a-357">After the update process is complete, the exception handler throws the exception to the next higher-level exception handler.</span></span> <span data-ttu-id="c996a-358">Наконец обработчик исключений высокого уровня обращается к пары "ключ значение" и сведения о консолидированных обновления от всех обработчиков исключений нижнего уровня.</span><span class="sxs-lookup"><span data-stu-id="c996a-358">Finally, the highest level exception handler accesses the key/value pairs and displays the consolidated update information from all the lower-level exception handlers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-359">Приведенный ниже показано, как добавлять и извлекать сведения с помощью <xref:System.Exception.Data%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-359">The following example demonstrates how to add and retrieve information using the <xref:System.Exception.Data%2A> property.</span></span>  
  
 [!code-cpp[exception.data#1](~/samples/snippets/cpp/VS_Snippets_CLR/exception.data/CPP/data.cpp#1)]
 [!code-csharp[exception.data#1](~/samples/snippets/csharp/VS_Snippets_CLR/exception.data/CS/data.cs#1)]
 [!code-vb[exception.data#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/exception.data/VB/data.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.DictionaryEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetBaseException">
      <MemberSignature Language="C#" Value="public virtual Exception GetBaseException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Exception GetBaseException() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetBaseException" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetBaseException () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Exception ^ GetBaseException();" />
      <MemberSignature Language="F#" Value="abstract member GetBaseException : unit -&gt; Exception&#xA;override this.GetBaseException : unit -&gt; Exception" Usage="exception.GetBaseException " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetBaseException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c996a-360">При переопределении в производном классе возвращает исключение <see cref="T:System.Exception" />, которое является корневой причиной одного или нескольких последующих исключений.</span><span class="sxs-lookup"><span data-stu-id="c996a-360">When overridden in a derived class, returns the <see cref="T:System.Exception" /> that is the root cause of one or more subsequent exceptions.</span></span></summary>
        <returns><span data-ttu-id="c996a-361">В цепочке исключений создается первое исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-361">The first exception thrown in a chain of exceptions.</span></span> <span data-ttu-id="c996a-362">Если свойством <see cref="P:System.Exception.InnerException" /> текущего исключения является пустая ссылка (<see langword="Nothing" /> в Visual Basic), это свойство возвращает текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-362">If the <see cref="P:System.Exception.InnerException" /> property of the current exception is a null reference (<see langword="Nothing" /> in Visual Basic), this property returns the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-363">Цепочка исключения состоит из набора исключений, таким образом, чтобы каждый в цепочке возникло исключение в результате исключения, на которые ссылается его `InnerException` свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-363">A chain of exceptions consists of a set of exceptions such that each exception in the chain was thrown as a direct result of the exception referenced in its `InnerException` property.</span></span> <span data-ttu-id="c996a-364">Для данной цепи может существовать только одно исключение, вызвавшее других исключений в цепочке.</span><span class="sxs-lookup"><span data-stu-id="c996a-364">For a given chain, there can be exactly one exception that is the root cause of all other exceptions in the chain.</span></span> <span data-ttu-id="c996a-365">Это исключение вызывается базовое исключение и его `InnerException` свойства всегда содержит пустую ссылку.</span><span class="sxs-lookup"><span data-stu-id="c996a-365">This exception is called the base exception and its `InnerException` property always contains a null reference.</span></span>  
  
 <span data-ttu-id="c996a-366">Для всех исключений, в цепочке исключений `GetBaseException` метод должен возвращать один и тот же объект (базовое исключение).</span><span class="sxs-lookup"><span data-stu-id="c996a-366">For all exceptions in a chain of exceptions, the `GetBaseException` method must return the same object (the base exception).</span></span>  
  
 <span data-ttu-id="c996a-367">Используйте `GetBaseException` метод, если вы хотите найти причину исключения, но не обязательно сведения об исключениях, произошедших между текущее исключение и первое исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-367">Use the `GetBaseException` method when you want to find the root cause of an exception but do not need information about exceptions that may have occurred between the current exception and the first exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-368">В следующем примере кода определяются два производных `Exception` классы.</span><span class="sxs-lookup"><span data-stu-id="c996a-368">The following code example defines two derived `Exception` classes.</span></span> <span data-ttu-id="c996a-369">Он вызывает исключение и затем вызывает его с каждым из производных классов.</span><span class="sxs-lookup"><span data-stu-id="c996a-369">It forces an exception and then throws it again with each of the derived classes.</span></span> <span data-ttu-id="c996a-370">В коде показано использование `GetBaseException` метод для извлечения в исходное исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-370">The code shows the use of the `GetBaseException` method to retrieve the original exception.</span></span>  
  
 [!code-cpp[System.Exception.GetBaseException#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CPP/getbaseexc.cpp#1)]
 [!code-csharp[System.Exception.GetBaseException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetBaseException/CS/getbaseexc.cs#1)]
 [!code-vb[System.Exception.GetBaseException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetBaseException/VB/getbaseexc.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c996a-371"><see langword="GetBaseException" /> Метод переопределен в классах, которые требуют управления содержанием исключения или форматом.</span><span class="sxs-lookup"><span data-stu-id="c996a-371">The <see langword="GetBaseException" /> method is overridden in classes that require control over the exception content or format.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="exception.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="c996a-372"><see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</span><span class="sxs-lookup"><span data-stu-id="c996a-372">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</span></span></param>
        <param name="context"><span data-ttu-id="c996a-373">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</span><span class="sxs-lookup"><span data-stu-id="c996a-373">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span></span></param>
        <summary><span data-ttu-id="c996a-374">При переопределении в производном классе задает сведения об исключении для <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</span><span class="sxs-lookup"><span data-stu-id="c996a-374">When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-375">Метод `GetObjectData` загружает в объект <xref:System.Runtime.Serialization.SerializationInfo> все данные объекта исключения, предназначенные для сериализации.</span><span class="sxs-lookup"><span data-stu-id="c996a-375">`GetObjectData` sets a <xref:System.Runtime.Serialization.SerializationInfo> with all the exception object data targeted for serialization.</span></span> <span data-ttu-id="c996a-376">В процессе десериализации исключение воссоздается из объекта `SerializationInfo`, переданного в потоке.</span><span class="sxs-lookup"><span data-stu-id="c996a-376">During deserialization, the exception is reconstituted from the `SerializationInfo` transmitted over the stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-377">В следующем примере кода определяется производный сериализуемый `Exception` класс, реализующий `GetObjectData`, который вносит незначительные изменения в два свойства, и затем вызывает базовый класс для выполнения сериализации.</span><span class="sxs-lookup"><span data-stu-id="c996a-377">The following code example defines a derived serializable `Exception` class that implements `GetObjectData`, which makes minor changes to two properties and then calls the base class to perform the serialization.</span></span> <span data-ttu-id="c996a-378">В примере вызывает ошибку деления на ноль и затем создается экземпляр производного исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-378">The example forces a divide-by-0 error and then creates an instance of the derived exception.</span></span> <span data-ttu-id="c996a-379">Код выполняет сериализацию экземпляра в файл, десериализацию файла в новое исключение, исключение, а затем перехватывает и отображает данные исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-379">The code serializes the instance to a file, deserializes the file into a new exception, which it throws, and then catches and displays the exception's data.</span></span>  
  
 [!code-cpp[System.Exception.GetObjectData#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CPP/getobjdata.cpp#1)]
 [!code-csharp[System.Exception.GetObjectData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.GetObjectData/CS/getobjdata.cs#1)]
 [!code-vb[System.Exception.GetObjectData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.GetObjectData/VB/getobjdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c996a-380">Параметр <paramref name="info" /> является пустой ссылкой (<see langword="Nothing" /> в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="c996a-380">The <paramref name="info" /> parameter is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="c996a-381">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="c996a-381">requires full trust for the immediate caller.</span></span> <span data-ttu-id="c996a-382">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="c996a-382">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="exception.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c996a-383">Возвращает тип текущего экземпляра в среде выполнения.</span><span class="sxs-lookup"><span data-stu-id="c996a-383">Gets the runtime type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="c996a-384">Объект <see cref="T:System.Type" />, представляющий точный тип среды выполнения текущего экземпляра.</span><span class="sxs-lookup"><span data-stu-id="c996a-384">A <see cref="T:System.Type" /> object that represents the exact runtime type of the current instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-385"><xref:System.Exception.GetType%2A> Метод служит для поддержки инфраструктуры .NET Framework и внутренне вызывает метод фундаментальные <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c996a-385">The <xref:System.Exception.GetType%2A> method exists to support the .NET Framework infrastructure, and internally invokes the fundamental method, <xref:System.Object.GetType%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="HelpLink">
      <MemberSignature Language="C#" Value="public virtual string HelpLink { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpLink" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HelpLink" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HelpLink As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ HelpLink { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HelpLink : string with get, set" Usage="System.Exception.HelpLink" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.HelpLink</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-386">Возвращает или задает ссылку на файл справки, связанный с этим исключением.</span><span class="sxs-lookup"><span data-stu-id="c996a-386">Gets or sets a link to the help file associated with this exception.</span></span></summary>
        <value><span data-ttu-id="c996a-387">URN или URL-адрес.</span><span class="sxs-lookup"><span data-stu-id="c996a-387">The Uniform Resource Name (URN) or Uniform Resource Locator (URL).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-388">Возвращаемым значением, представляющим файл справки, является URN или URL-адрес.</span><span class="sxs-lookup"><span data-stu-id="c996a-388">The return value, which represents a help file, is a URN or URL.</span></span> <span data-ttu-id="c996a-389">Например `HelpLink` значение может быть:</span><span class="sxs-lookup"><span data-stu-id="c996a-389">For example, the `HelpLink` value could be:</span></span>  
  
 <span data-ttu-id="c996a-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span><span class="sxs-lookup"><span data-stu-id="c996a-390">"file:///C:/Applications/Bazzal/help.html#ErrorNum42"</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-391">В следующем коде возникает исключение пример `Exception` , задает `HelpLink` свойства в его конструктор и перехватываются исключения и отображает `HelpLink`.</span><span class="sxs-lookup"><span data-stu-id="c996a-391">The following code example throws an `Exception` that sets the `HelpLink` property in its constructor and then catches the exception and displays `HelpLink`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HResult">
      <MemberSignature Language="C#" Value="public int HResult { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HResult" />
      <MemberSignature Language="DocId" Value="P:System.Exception.HResult" />
      <MemberSignature Language="VB.NET" Value="Public Property HResult As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:  property int HResult {  public:&#xA;int get(); protected:&#xA; void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.HResult : int with get, set" Usage="System.Exception.HResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-392">Возвращает или задает HRESULT — кодированное числовое значение, присвоенное определенному исключению.</span><span class="sxs-lookup"><span data-stu-id="c996a-392">Gets or sets HRESULT, a coded numerical value that is assigned to a specific exception.</span></span></summary>
        <value><span data-ttu-id="c996a-393">Значение HRESULT.</span><span class="sxs-lookup"><span data-stu-id="c996a-393">The HRESULT value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-394">HRESULT является 32-разрядное значение, разделены на три поля: код уровня ошибки, код устройства и код ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-394">HRESULT is a 32-bit value, divided into three different fields: a severity code, a facility code, and an error code.</span></span> <span data-ttu-id="c996a-395">Код серьезности указывает, представляет ли возвращаемое значение сведения, предупреждение или ошибка.</span><span class="sxs-lookup"><span data-stu-id="c996a-395">The severity code indicates whether the return value represents information, warning, or error.</span></span> <span data-ttu-id="c996a-396">Код устройства определяет область системы, за которой возникла ошибка.</span><span class="sxs-lookup"><span data-stu-id="c996a-396">The facility code identifies the area of the system responsible for the error.</span></span> <span data-ttu-id="c996a-397">Код ошибки — уникальный номер, представляющий исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-397">The error code is a unique number that is assigned to represent the exception.</span></span> <span data-ttu-id="c996a-398">Каждое исключение сопоставляется с различными значениями HRESULT.</span><span class="sxs-lookup"><span data-stu-id="c996a-398">Each exception is mapped to a distinct HRESULT.</span></span> <span data-ttu-id="c996a-399">Когда управляемый код создает исключение, среда выполнения передает значение HRESULT COM-клиент.</span><span class="sxs-lookup"><span data-stu-id="c996a-399">When managed code throws an exception, the runtime passes the HRESULT to the COM client.</span></span> <span data-ttu-id="c996a-400">Когда неуправляемый код возвращает ошибку, значение HRESULT преобразуется в исключение, которое затем создается средой выполнения.</span><span class="sxs-lookup"><span data-stu-id="c996a-400">When unmanaged code returns an error, the HRESULT is converted to an exception, which is then thrown by the runtime.</span></span> <span data-ttu-id="c996a-401">Сведения о значениях HRESULT и их соответствующие исключения .NET Framework, см. в разделе [как: Сопоставление значений HRESULT и исключений](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span><span class="sxs-lookup"><span data-stu-id="c996a-401">For information about HRESULT values and their corresponding .NET Framework exceptions, see [How to: Map HRESULTs and Exceptions](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md).</span></span> <span data-ttu-id="c996a-402">См. в разделе [часто встречающихся значений HRESULT](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) в документации по Windows для получения списка значений, чаще всего возникают.</span><span class="sxs-lookup"><span data-stu-id="c996a-402">See [Common HRESULT Values](https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx) in the Windows documentation for a list of the values you are most likely to encounter.</span></span>  
  
 <span data-ttu-id="c996a-403">Начиная с [!INCLUDE[net_v45](~/includes/net-v45-md.md)], <xref:System.Exception.HResult%2A> защищен методу задания свойства, а его метод считывания является открытым.</span><span class="sxs-lookup"><span data-stu-id="c996a-403">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Exception.HResult%2A> property's setter is protected, whereas its getter is public.</span></span>  <span data-ttu-id="c996a-404">В предыдущих версиях .NET Framework защищены Get и set.</span><span class="sxs-lookup"><span data-stu-id="c996a-404">In previous versions of the .NET Framework, both getter and setter are protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-405">В следующем примере кода определяется производный `Exception` класс, который задает `HResult` свойство пользовательское значение в своем конструкторе.</span><span class="sxs-lookup"><span data-stu-id="c996a-405">The following code example defines a derived `Exception` class that sets the `HResult` property to a custom value in its constructor.</span></span>  
  
 [!code-cpp[System.Exception.HResult#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.HResult/CPP/hresult.cpp#1)]
 [!code-csharp[System.Exception.HResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.HResult/CS/hresult.cs#1)]
 [!code-vb[System.Exception.HResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.HResult/VB/hresult.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/610b364b-2761-429d-9c4a-afbc3e66f1b9"><span data-ttu-id="c996a-406">Практическое руководство. Сопоставление значений HRESULT и исключений</span><span class="sxs-lookup"><span data-stu-id="c996a-406">How to: Map HRESULTs and Exceptions</span></span></related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/windows/desktop/aa378137.aspx"><span data-ttu-id="c996a-407">Часто встречающихся значений HRESULT</span><span class="sxs-lookup"><span data-stu-id="c996a-407">Common HRESULT Values</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InnerException">
      <MemberSignature Language="C#" Value="public Exception InnerException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception InnerException" />
      <MemberSignature Language="DocId" Value="P:System.Exception.InnerException" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InnerException As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ InnerException { Exception ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InnerException : Exception" Usage="System.Exception.InnerException" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.InnerException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-408">Возвращает экземпляр объекта <see cref="T:System.Exception" />, который вызвал текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-408">Gets the <see cref="T:System.Exception" /> instance that caused the current exception.</span></span></summary>
        <value><span data-ttu-id="c996a-409">Объект, описывающий ошибку, которая вызвала текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-409">An object that describes the error that caused the current exception.</span></span> <span data-ttu-id="c996a-410">Свойство <see cref="P:System.Exception.InnerException" /> возвращает то же значение, что было передано в конструктор <see cref="M:System.Exception.#ctor(System.String,System.Exception)" />, или значение <see langword="null" />, если конструктору не было передано значение внутреннего исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-410">The <see cref="P:System.Exception.InnerException" /> property returns the same value as was passed into the <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> constructor, or <see langword="null" /> if the inner exception value was not supplied to the constructor.</span></span> <span data-ttu-id="c996a-411">Это свойство доступно только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c996a-411">This property is read-only.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-412">При вызове исключения `X` вызывается как прямой результат предыдущего исключения `Y`, <xref:System.Exception.InnerException%2A> свойство `X` должен содержать ссылку на `Y`.</span><span class="sxs-lookup"><span data-stu-id="c996a-412">When an exception `X` is thrown as a direct result of a previous exception `Y`, the <xref:System.Exception.InnerException%2A> property of `X` should contain a reference to `Y`.</span></span>  
  
 <span data-ttu-id="c996a-413">Свойство <xref:System.Exception.InnerException%2A> используется, чтобы получить набор исключений, ставших причиной текущего исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-413">Use the <xref:System.Exception.InnerException%2A> property to obtain the set of exceptions that led to the current exception.</span></span>  
  
 <span data-ttu-id="c996a-414">Можно создать новое исключение, которое перехватывает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-414">You can create a new exception that catches an earlier exception.</span></span> <span data-ttu-id="c996a-415">Код, обрабатывающий второе исключение позволяют использовать дополнительные сведения из предыдущего исключения для более качественной обработки ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-415">The code that handles the second exception can make use of the additional information from the earlier exception to handle the error more appropriately.</span></span>  
  
 <span data-ttu-id="c996a-416">Предположим, что имеется функция, которая считывает файл и форматирует данные из этого файла.</span><span class="sxs-lookup"><span data-stu-id="c996a-416">Suppose that there is a function that reads a file and formats the data from that file.</span></span> <span data-ttu-id="c996a-417">В этом примере, как код пытается считать файл <xref:System.IO.IOException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-417">In this example, as the code tries to read the file, an <xref:System.IO.IOException> is thrown.</span></span> <span data-ttu-id="c996a-418">Функция перехватит <xref:System.IO.IOException> и вызывает <xref:System.IO.FileNotFoundException>.</span><span class="sxs-lookup"><span data-stu-id="c996a-418">The function catches the <xref:System.IO.IOException> and throws a <xref:System.IO.FileNotFoundException>.</span></span> <span data-ttu-id="c996a-419"><xref:System.IO.IOException> Может быть сохранен в <xref:System.Exception.InnerException%2A> свойство <xref:System.IO.FileNotFoundException>, включение код, который перехватывает <xref:System.IO.FileNotFoundException> чтобы определить причину исходной ошибки.</span><span class="sxs-lookup"><span data-stu-id="c996a-419">The <xref:System.IO.IOException> could be saved in the <xref:System.Exception.InnerException%2A> property of the <xref:System.IO.FileNotFoundException>, enabling the code that catches the <xref:System.IO.FileNotFoundException> to examine the cause of the initial error.</span></span>  
  
 <span data-ttu-id="c996a-420"><xref:System.Exception.InnerException%2A> Свойство, которое содержит ссылку на внутреннее исключение, устанавливается при инициализации объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-420">The <xref:System.Exception.InnerException%2A> property, which holds a reference to the inner exception, is set upon initialization of the exception object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-421">В следующем примере показано создание и перехват исключения, которое ссылается на внутреннее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-421">The following example demonstrates throwing and catching an exception that references an inner exception.</span></span>  
  
 [!code-cpp[InnerEx#1](~/samples/snippets/cpp/VS_Snippets_CLR/InnerEx/CPP/innerex.cpp#1)]
 [!code-csharp[InnerEx#1](~/samples/snippets/csharp/VS_Snippets_CLR/InnerEx/CS/innerex.cs#1)]
 [!code-vb[InnerEx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InnerEx/VB/innerex.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public virtual string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Message" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Exception.Message" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Message</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-422">Возвращает сообщение, описывающее текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-422">Gets a message that describes the current exception.</span></span></summary>
        <value><span data-ttu-id="c996a-423">Сообщение об ошибке с объяснением причин исключения или пустая строка ("").</span><span class="sxs-lookup"><span data-stu-id="c996a-423">The error message that explains the reason for the exception, or an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-424">Сообщения об ошибках предназначены разработчик, который обрабатывает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-424">Error messages target the developer who is handling the exception.</span></span> <span data-ttu-id="c996a-425">Текст <xref:System.Exception.Message%2A> свойство должен содержать полное описание ошибки и, если это возможно, следует также объясняется, как исправить эту ошибку.</span><span class="sxs-lookup"><span data-stu-id="c996a-425">The text of the <xref:System.Exception.Message%2A> property should completely describe the error and, when possible, should also explain how to correct the error.</span></span> <span data-ttu-id="c996a-426">Обработчики исключений верхнего уровня может отображать сообщение для конечных пользователей, поэтому следует убедиться, что это грамматически правильных и что каждое предложение сообщения заканчивается точкой.</span><span class="sxs-lookup"><span data-stu-id="c996a-426">Top-level exception handlers may display the message to end-users, so you should ensure that it is grammatically correct and that each sentence of the message ends with a period.</span></span> <span data-ttu-id="c996a-427">Не используйте вопросительные знаки или восклицательных знаков.</span><span class="sxs-lookup"><span data-stu-id="c996a-427">Do not use question marks or exclamation points.</span></span> <span data-ttu-id="c996a-428">Если приложение использует локализованное исключение сообщений, следует убедиться, что они преобразуются точно.</span><span class="sxs-lookup"><span data-stu-id="c996a-428">If your application uses localized exception messages, you should ensure that they are accurately translated.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c996a-429">Не раскрывайте конфиденциальные сведения в сообщения об исключениях без проверки на наличие соответствующих разрешений.</span><span class="sxs-lookup"><span data-stu-id="c996a-429">Do not disclose sensitive information in exception messages without checking for the appropriate permissions.</span></span>  
  
 <span data-ttu-id="c996a-430">Значение <xref:System.Exception.Message%2A> свойство включено в сведения, возвращаемые функцией <xref:System.Exception.ToString%2A>. <xref:System.Exception.Message%2A> Свойство имеет значение только в том случае, при создании <xref:System.Exception>.</span><span class="sxs-lookup"><span data-stu-id="c996a-430">The value of the <xref:System.Exception.Message%2A> property is included in the information returned by <xref:System.Exception.ToString%2A>.The <xref:System.Exception.Message%2A> property is set only when creating an <xref:System.Exception>.</span></span> <span data-ttu-id="c996a-431">Если сообщение не было передано конструктору для текущего экземпляра, система передает сообщение по умолчанию, форматируется с использованием текущего языка и региональных параметров системы.</span><span class="sxs-lookup"><span data-stu-id="c996a-431">If no message was supplied to the constructor for the current instance, the system supplies a default message that is formatted using the current system culture.</span></span>  
  
## <a name="windows-runtime-and-includenetv451includesnet-v451-mdmd"></a><span data-ttu-id="c996a-432">Среда выполнения Windows и [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span><span class="sxs-lookup"><span data-stu-id="c996a-432">Windows Runtime and [!INCLUDE[net_v451](~/includes/net-v451-md.md)]</span></span>  
 <span data-ttu-id="c996a-433">Начиная с [!INCLUDE[net_v451](~/includes/net-v451-md.md)] и [!INCLUDE[win81](~/includes/win81-md.md)], повышается точность сообщения об ошибках из исключения, которые распространяются от типов среды выполнения Windows и члены, которые не являются частью платформы .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="c996a-433">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)], the fidelity of error messages from exceptions that are propagated from Windows Runtime types and members that are not part of the .NET Framework is improved.</span></span> <span data-ttu-id="c996a-434">В частности, исключение сообщения от расширения компонентов Visual C++ (C + +/ CX) теперь распространяются обратно в .NET Framework <xref:System.Exception> объектов.</span><span class="sxs-lookup"><span data-stu-id="c996a-434">In particular, exception messages from Visual C++ component extensions (C++/CX) are now propagated back into .NET Framework <xref:System.Exception> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-435">В следующем примере кода создает исключение и затем перехватывает <xref:System.Exception> исключение, отображающее текст исключения сообщения с использованием <xref:System.Exception.Message%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-435">The following code example throws and then catches an <xref:System.Exception> exception and displays the exception's text message using the <xref:System.Exception.Message%2A> property.</span></span>
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c996a-436">При создании исключения из свойства, и вам потребуется обратиться в тексте <see cref="P:System.Exception.Message" /> свойство аргументу, задать или получить, используйте «value» как имя свойства аргумента.</span><span class="sxs-lookup"><span data-stu-id="c996a-436">If you throw an exception from a property, and you need to refer in the text of <see cref="P:System.Exception.Message" /> to the property argument that you set or get, use "value" as the name of the property argument.</span></span></para></block>
        <block subset="none" type="overrides"><para><span data-ttu-id="c996a-437"><see cref="P:System.Exception.Message" /> Переопределяется в классах, которые требуют управления содержимое сообщения или форматом.</span><span class="sxs-lookup"><span data-stu-id="c996a-437">The <see cref="P:System.Exception.Message" /> property is overridden in classes that require control over message content or format.</span></span> <span data-ttu-id="c996a-438">Код приложения обычно обращается к этому свойству, когда необходимо вывести сведения об исключении, которое возникло.</span><span class="sxs-lookup"><span data-stu-id="c996a-438">Application code typically accesses this property when it needs to display information about an exception that has been caught.</span></span>  
  
<span data-ttu-id="c996a-439">Сообщение об ошибке должно быть локализовано.</span><span class="sxs-lookup"><span data-stu-id="c996a-439">The error message should be localized.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="SerializeObjectState">
      <MemberSignature Language="C#" Value="protected event EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.Serialization.SafeSerializationEventArgs&gt; SerializeObjectState" />
      <MemberSignature Language="DocId" Value="E:System.Exception.SerializeObjectState" />
      <MemberSignature Language="VB.NET" Value="Protected Custom Event SerializeObjectState As EventHandler(Of SafeSerializationEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; event EventHandler&lt;System::Runtime::Serialization::SafeSerializationEventArgs ^&gt; ^ SerializeObjectState;" />
      <MemberSignature Language="F#" Value="member this.SerializeObjectState : EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " Usage="member this.SerializeObjectState : System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.Serialization.SafeSerializationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-440">Возникает, когда исключение сериализовано для создания объекта состояния исключения, содержащего сериализованные данные об исключении.</span><span class="sxs-lookup"><span data-stu-id="c996a-440">Occurs when an exception is serialized to create an exception state object that contains serialized data about the exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-441">Реализует объект состояния исключения <xref:System.Runtime.Serialization.ISafeSerializationData> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="c996a-441">The exception state object implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 <span data-ttu-id="c996a-442">Когда <xref:System.Exception.SerializeObjectState> подписаться событий, десериализуется исключение и создан как исключение пустой.</span><span class="sxs-lookup"><span data-stu-id="c996a-442">When the <xref:System.Exception.SerializeObjectState> event is subscribed to, the exception is deserialized and created as an empty exception.</span></span> <span data-ttu-id="c996a-443">Конструктор исключения не запускается, и состояние исключения также десериализуется.</span><span class="sxs-lookup"><span data-stu-id="c996a-443">The exception's constructor is not run, and the exception state is also deserialized.</span></span> <span data-ttu-id="c996a-444"><xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> Таким образом, чтобы его можно отправить десериализованные данные в пустой исключение будет вызываться метод обратного вызова объекта состояния исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-444">The <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A> callback method of the exception state object is then notified so that it can push deserialized data into the empty exception.</span></span>  
  
 <span data-ttu-id="c996a-445"><xref:System.Exception.SerializeObjectState> Событий позволяет прозрачным исключение типов для сериализации и десериализации данных исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-445">The <xref:System.Exception.SerializeObjectState> event enables transparent exception types to serialize and deserialize exception data.</span></span> <span data-ttu-id="c996a-446">Прозрачный код можно выполнять команды в пределах набора разрешений в пределах, работает оно, но нельзя выполнить, вызова, являются производными от или содержать критический код.</span><span class="sxs-lookup"><span data-stu-id="c996a-446">Transparent code can execute commands within the bounds of the permission set it is operating within, but cannot execute, call, derive from, or contain critical code.</span></span>  
  
 <span data-ttu-id="c996a-447">Если <xref:System.Exception.SerializeObjectState> событий не подписана, десериализации происходит обычным образом с помощью <xref:System.Exception.%23ctor%2A> конструктор.</span><span class="sxs-lookup"><span data-stu-id="c996a-447">If the <xref:System.Exception.SerializeObjectState> event is not subscribed to, deserialization occurs as usual using the <xref:System.Exception.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="c996a-448">Как правило, обработчик для <xref:System.Exception.SerializeObjectState> событие было добавлено в конструкторе исключения для обеспечения его сериализации.</span><span class="sxs-lookup"><span data-stu-id="c996a-448">Typically, a handler for the <xref:System.Exception.SerializeObjectState> event is added in the exception's constructor to provide for its serialization.</span></span> <span data-ttu-id="c996a-449">Но так как конструктор не выполняется при <xref:System.Exception.SerializeObjectState> выполнения обработчика событий, сериализация десериализованные исключение может вызвать исключение <xref:System.Runtime.Serialization.SerializationException> возникло исключение при попытке десериализации исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-449">But because the constructor is not executed when the <xref:System.Exception.SerializeObjectState> event handler executes, serializing a deserialized exception can throw a <xref:System.Runtime.Serialization.SerializationException> exception when you try to deserialize the exception.</span></span> <span data-ttu-id="c996a-450">Чтобы избежать этого, также должны добавить обработчик для <xref:System.Exception.SerializeObjectState> событие в <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="c996a-450">To avoid this, you should also add the handler for the <xref:System.Exception.SerializeObjectState> event in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="c996a-451">Пример в разделе примеров.</span><span class="sxs-lookup"><span data-stu-id="c996a-451">See the Examples section for an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-452">В следующем примере определяется `BadDivisionException` , обрабатывающий <xref:System.Exception.SerializeObjectState> событий.</span><span class="sxs-lookup"><span data-stu-id="c996a-452">The following example defines a `BadDivisionException` that handles the <xref:System.Exception.SerializeObjectState> event.</span></span> <span data-ttu-id="c996a-453">Он также содержит объект состояния, который является вложенным структура с именем `BadDivisionExceptionState` , реализующий <xref:System.Runtime.Serialization.ISafeSerializationData> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="c996a-453">It also contains a state object, which is a nested structure named `BadDivisionExceptionState` that implements the <xref:System.Runtime.Serialization.ISafeSerializationData> interface.</span></span>  
  
 [!code-csharp[System.Exception.SerializeObjectState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.serializeobjectstate/cs/example2.cs#1)]
 [!code-vb[System.Exception.SerializeObjectState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.serializeobjectstate/vb/example2.vb#1)]  
  
 <span data-ttu-id="c996a-454">`BadDivisionException` Исключение создается в случае с плавающей запятой деление на ноль.</span><span class="sxs-lookup"><span data-stu-id="c996a-454">The `BadDivisionException` exception is thrown when a floating-point division by zero occurs.</span></span> <span data-ttu-id="c996a-455">Во время первого деления на ноль, в примере создается экземпляр `BadDivisionException` объект, сериализует его и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-455">During the first division by zero, the example instantiates a `BadDivisionException` object, serializes it, and throws the exception.</span></span> <span data-ttu-id="c996a-456">При возникновении последующих подразделений деления на ноль, в примере десериализует ранее сериализованного объекта, сериализацию и создает исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-456">When subsequent divisions by zero occur, the example deserializes the  previously serialized object, reserializes it, and throws the exception.</span></span> <span data-ttu-id="c996a-457">Чтобы предоставить для сериализации, десериализации, reserialization и десериализации объектов, в примере добавляется <xref:System.Exception.SerializeObjectState> обработчик событий как в `BadDivisionException` конструктора класса и в <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> реализации.</span><span class="sxs-lookup"><span data-stu-id="c996a-457">To provide for object serialization, deserialization, reserialization, and deserialization, the example adds the <xref:System.Exception.SerializeObjectState> event handler both in the `BadDivisionException` class constructor and in the <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A?displayProperty=nameWithType> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c996a-458">Если это событие является подписки и использования, все производные типы, выполните в иерархии наследования необходимо реализовать один и тот же механизм сериализации.</span><span class="sxs-lookup"><span data-stu-id="c996a-458">If this event is subscribed to and used, all derived types that follow in the inheritance hierarchy must implement the same serialization mechanism.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public virtual string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Exception.Source" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Exception.Source" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.Source</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-459">Возвращает или задает имя приложения или объекта, вызывавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="c996a-459">Gets or sets the name of the application or the object that causes the error.</span></span></summary>
        <value><span data-ttu-id="c996a-460">Имя приложения или объекта, вызвавшего ошибку.</span><span class="sxs-lookup"><span data-stu-id="c996a-460">The name of the application or the object that causes the error.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-461">Если <xref:System.Exception.Source%2A> свойство не задано явно, среда выполнения автоматически устанавливает его в имя сборки, в котором возникло исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-461">If the <xref:System.Exception.Source%2A> property is not set explicitly, the runtime automatically sets it to the name of the assembly in which the exception originated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-462">В следующем примере возникает исключение `Exception` , задает `Source` свойства в его конструктор и перехватываются исключения и отображает `Source`.</span><span class="sxs-lookup"><span data-stu-id="c996a-462">The following example throws an `Exception` that sets the `Source` property in its constructor and then catches the exception and displays `Source`.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c996a-463">Объект должен быть объектом среды выполнения <see cref="N:System.Reflection" />.</span><span class="sxs-lookup"><span data-stu-id="c996a-463">The object must be a runtime <see cref="N:System.Reflection" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public virtual string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Exception.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StackTrace : string" Usage="System.Exception.StackTrace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.StackTrace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-464">Получает строковое представление непосредственных кадров в стеке вызова.</span><span class="sxs-lookup"><span data-stu-id="c996a-464">Gets a string representation of the immediate frames on the call stack.</span></span></summary>
        <value><span data-ttu-id="c996a-465">Строка, описывающая непосредственные фреймы стека вызова.</span><span class="sxs-lookup"><span data-stu-id="c996a-465">A string that describes the immediate frames of the call stack.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-466">В стеке выполнения отслеживаются все методы, выполняемые в данный момент времени.</span><span class="sxs-lookup"><span data-stu-id="c996a-466">The execution stack keeps track of all the methods that are in execution at a given instant.</span></span> <span data-ttu-id="c996a-467">Трассировка вызовов метода называется трассировкой стека.</span><span class="sxs-lookup"><span data-stu-id="c996a-467">A trace of the method calls is called a stack trace.</span></span> <span data-ttu-id="c996a-468">Список трассировок стека позволяет проследить стек вызовов на номер строки в методе, в котором происходит исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-468">The stack trace listing provides a way to follow the call stack to the line number in the method where the exception occurs.</span></span>  
  
 <span data-ttu-id="c996a-469"><xref:System.Exception.StackTrace%2A> Свойство возвращает кадры стека вызовов, поступающих в расположении, где возникло исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-469">The <xref:System.Exception.StackTrace%2A> property returns the frames of the call stack that originate at the location where the exception was thrown.</span></span> <span data-ttu-id="c996a-470">Сведения о дополнительных кадров в стеке вызовов можно получить, создав новый экземпляр класса <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> , используя его <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="c996a-470">You can obtain information about additional frames in the call stack by creating a new instance of the <xref:System.Diagnostics.StackTrace?displayProperty=nameWithType> class and using its <xref:System.Diagnostics.StackTrace.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="c996a-471">Среда CLR (CLR) обновляет трассировку стека, каждый раз, когда возникает исключение в коде приложения (с помощью `throw` ключевое слово).</span><span class="sxs-lookup"><span data-stu-id="c996a-471">The common language runtime (CLR) updates the stack trace whenever an exception is thrown in application code (by using the `throw` keyword).</span></span> <span data-ttu-id="c996a-472">Если исключение в методе, который отличается от метода, где оно было изначально создано, трассировка стека содержит как расположение в методе, где первоначально было выдано исключение, так и расположение в методе, где исключение: создано повторно.</span><span class="sxs-lookup"><span data-stu-id="c996a-472">If the exception was rethrown in a method that is different than the method where it was originally thrown, the stack trace contains both the location in the method where the exception was originally thrown, and the location in the method where the exception was rethrown.</span></span> <span data-ttu-id="c996a-473">Если исключение создается и позже повторно, в один и тот же метод, трассировка стека содержит только область, где было повторно вызвано исключение и не включает расположение, где первоначально было выдано исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-473">If the exception is thrown, and later rethrown, in the same method, the stack trace only contains the location where the exception was rethrown and does not include the location where the exception was originally thrown.</span></span>  
  
 <span data-ttu-id="c996a-474"><xref:System.Exception.StackTrace%2A> Свойства могут не разглашать столько предполагаемых вызовах методов из-за преобразований кода, таких как встраивание, происходящих во время оптимизации.</span><span class="sxs-lookup"><span data-stu-id="c996a-474">The <xref:System.Exception.StackTrace%2A> property may not report as many method calls as expected because of code transformations, such as inlining, that occur during optimization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-475">В следующем коде возникает исключение пример `Exception` перехватывает его и отображает трассировку стека с помощью `StackTrace` свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-475">The following code example throws an `Exception` and then catches it and displays a stack trace using the `StackTrace` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="c996a-476"><see langword="StackTrace" /> Переопределяется в классах, которые требуют управления содержимым трассировки стека или форматом.</span><span class="sxs-lookup"><span data-stu-id="c996a-476">The <see langword="StackTrace" /> property is overridden in classes that require control over the stack trace content or format.</span></span>  
  
<span data-ttu-id="c996a-477">По умолчанию трассировка стека фиксируется немедленно до объекта исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-477">By default, the stack trace is captured immediately before an exception object is thrown.</span></span> <span data-ttu-id="c996a-478">Используйте <see cref="P:System.Environment.StackTrace" /> для получения сведения о трассировке стека, если исключение не вызывается.</span><span class="sxs-lookup"><span data-stu-id="c996a-478">Use <see cref="P:System.Environment.StackTrace" /> to get stack trace information when no exception is being thrown.</span></span></para></block>
        <altmember cref="P:System.Environment.StackTrace" />
      </Docs>
    </Member>
    <Member MemberName="TargetSite">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodBase TargetSite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase TargetSite" />
      <MemberSignature Language="DocId" Value="P:System.Exception.TargetSite" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetSite As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MethodBase ^ TargetSite { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetSite : System.Reflection.MethodBase" Usage="System.Exception.TargetSite" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Exception.TargetSite</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c996a-479">Возвращает метод, создавший текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-479">Gets the method that throws the current exception.</span></span></summary>
        <value><span data-ttu-id="c996a-480">Метод <see cref="T:System.Reflection.MethodBase" />, выбрасывающий текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-480">The <see cref="T:System.Reflection.MethodBase" /> that threw the current exception.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-481">Если метод, который создает это исключение, недоступен и трассировка стека не является пустой ссылкой (`Nothing` в Visual Basic), <xref:System.Exception.TargetSite%2A> получает метод из трассировки стека.</span><span class="sxs-lookup"><span data-stu-id="c996a-481">If the method that throws this exception is not available and the stack trace is not a null reference (`Nothing` in Visual Basic), <xref:System.Exception.TargetSite%2A> obtains the method from the stack trace.</span></span> <span data-ttu-id="c996a-482">Если трассировка стека является нулевой ссылкой, то <xref:System.Exception.TargetSite%2A> также возвращает нулевую ссылку.</span><span class="sxs-lookup"><span data-stu-id="c996a-482">If the stack trace is a null reference, <xref:System.Exception.TargetSite%2A> also returns a null reference.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c996a-483"><xref:System.Exception.TargetSite%2A> Свойство может неточно сообщать имя метода, в котором возникло исключение, если обработчик исключений обрабатывает исключение через границы домена приложения.</span><span class="sxs-lookup"><span data-stu-id="c996a-483">The <xref:System.Exception.TargetSite%2A> property may not accurately report the name of the method in which an exception was thrown if the exception handler handles an exception across application domain boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-484">В следующем коде возникает исключение пример `Exception` перехватывает его и отображается в режиме исходного метода `TargetSite` свойство.</span><span class="sxs-lookup"><span data-stu-id="c996a-484">The following code example throws an `Exception` and then catches it and displays the originating method using the `TargetSite` property.</span></span>  
  
 [!code-cpp[System.Exception.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Exception.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.Exception.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Exception.Properties/CS/properties.cs#1)]
 [!code-vb[System.Exception.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Exception.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Exception.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="exception.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Exception.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c996a-485">Создает и возвращает строковое представление текущего исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-485">Creates and returns a string representation of the current exception.</span></span></summary>
        <returns><span data-ttu-id="c996a-486">Строковое представление текущего исключения.</span><span class="sxs-lookup"><span data-stu-id="c996a-486">A string representation of the current exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c996a-487"><xref:System.Exception.ToString%2A> Возвращает представление текущего исключения, которое должно быть понятно пользователю.</span><span class="sxs-lookup"><span data-stu-id="c996a-487"><xref:System.Exception.ToString%2A> returns a representation of the current exception that is intended to be understood by humans.</span></span> <span data-ttu-id="c996a-488">Если исключение содержит данные, зависящие от языка и региональных параметров, возвращаемых строковое представление `ToString` необходимо принимать во внимание текущего языка и региональных параметров системы.</span><span class="sxs-lookup"><span data-stu-id="c996a-488">Where the exception contains culture-sensitive data, the string representation returned by `ToString` is required to take into account the current system culture.</span></span> <span data-ttu-id="c996a-489">Несмотря на то, что требования не предусмотрены точный формат возвращаемой строки, следует попытаться отражает значение свойства объекта, воспринимаемое пользователем.</span><span class="sxs-lookup"><span data-stu-id="c996a-489">Although there are no exact requirements for the format of the returned string, it should attempt to reflect the value of the object as perceived by the user.</span></span>  
  
 <span data-ttu-id="c996a-490">Реализация по умолчанию <xref:System.Exception.ToString%2A> получает имя класса, который вызвал текущее исключение, сообщение, результат вызова метода <xref:System.Exception.ToString%2A> на внутреннее исключение и результат вызова метода <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c996a-490">The default implementation of <xref:System.Exception.ToString%2A> obtains the name of the class that threw the current exception, the message, the result of calling <xref:System.Exception.ToString%2A> on the inner exception, and the result of calling <xref:System.Environment.StackTrace%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="c996a-491">Если какие-либо из этих членов `null`, его значение не включается в возвращаемую строку.</span><span class="sxs-lookup"><span data-stu-id="c996a-491">If any of these members is `null`, its value is not included in the returned string.</span></span>  
  
 <span data-ttu-id="c996a-492">Если сообщение об ошибке, или если это пустая строка ("»), то сообщение об ошибке не возвращается.</span><span class="sxs-lookup"><span data-stu-id="c996a-492">If there is no error message or if it is an empty string (""), then no error message is returned.</span></span> <span data-ttu-id="c996a-493">Имя внутреннего исключения и трассировку стека, возвращаются только в том случае, если они не `null`.</span><span class="sxs-lookup"><span data-stu-id="c996a-493">The name of the inner exception and the stack trace are returned only if they are not `null`.</span></span>  
  
 <span data-ttu-id="c996a-494">Этот метод переопределяет метод <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c996a-494">This method overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c996a-495">Следующий пример приводит к возникновению исключения и отображает результат вызова метода <xref:System.Exception.ToString%2A> на это исключение.</span><span class="sxs-lookup"><span data-stu-id="c996a-495">The following example causes an exception and displays the result of calling <xref:System.Exception.ToString%2A> on that exception.</span></span> <span data-ttu-id="c996a-496">Обратите внимание, что <xref:System.Exception.ToString%2A?displayProperty=nameWithType> метод вызывается неявно, когда экземпляр класса Exception появится в списке аргументов <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="c996a-496">Note that the <xref:System.Exception.ToString%2A?displayProperty=nameWithType> method is called implicitly when the Exception class instance appears in the argument list of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-cpp[System.Exception.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.exception.tostring/cpp/ToStringEx1.cpp#1)]
 [!code-csharp[System.Exception.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.exception.tostring/cs/ToStringEx1.cs#1)]
 [!code-vb[System.Exception.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.exception.tostring/vb/ToStringEx1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>