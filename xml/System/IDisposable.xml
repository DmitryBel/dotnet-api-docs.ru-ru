<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0173afb2044bf3eff6d9c5187d74f826f4c4fa77" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58733155" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e7500-101">Предоставляет механизм для освобождения неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="e7500-101">Provides a mechanism for releasing unmanaged resources.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7500-102">Главным образом используется этот интерфейс является освобождение неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="e7500-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="e7500-103">Сборщик мусора автоматически освобождает память, выделенную для управляемого объекта, если этот объект больше не используется.</span><span class="sxs-lookup"><span data-stu-id="e7500-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="e7500-104">Тем не менее не может предсказать, когда будет выполнена сборка мусора.</span><span class="sxs-lookup"><span data-stu-id="e7500-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="e7500-105">Кроме того сборщик мусора не имеет сведений о неуправляемых ресурсов, например дескрипторов окон, или открытые файлы и потоки.</span><span class="sxs-lookup"><span data-stu-id="e7500-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="e7500-106">Использование <xref:System.IDisposable.Dispose%2A> метода этого интерфейса позволяет явно освобождать неуправляемые ресурсы вместе со сборщиком мусора.</span><span class="sxs-lookup"><span data-stu-id="e7500-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="e7500-107">Пользователь объекта может вызвать этот метод, когда объект больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="e7500-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e7500-108">Это критическое изменение для добавления <xref:System.IDisposable> интерфейс к существующему классу.</span><span class="sxs-lookup"><span data-stu-id="e7500-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="e7500-109">Поскольку существующие объекты-получатели типа не может вызвать <xref:System.IDisposable.Dispose%2A>, нельзя быть уверенным, что неуправляемые ресурсы, удерживаемые вашего типа будет распространяться.</span><span class="sxs-lookup"><span data-stu-id="e7500-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="e7500-110">Так как <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации вызывается объектом-получателем типа, когда ресурсы, принадлежащие экземпляр больше не требуются, либо необходимо заключить в управляемый объект <xref:System.Runtime.InteropServices.SafeHandle> (рекомендуется), или необходимо переопределить <xref:System.Object.Finalize%2A?displayProperty=nameWithType>для освобождения неуправляемых ресурсов, в случае, если пользователь забывает вызвать <xref:System.IDisposable.Dispose%2A>.</span><span class="sxs-lookup"><span data-stu-id="e7500-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e7500-111">В .NET Framework, компилятор C++ поддерживает детерминированную утилизацию ресурсов и позволяет непосредственно реализовать <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e7500-112">Дополнительные сведения о том, как этот интерфейс и <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод используются, см. в разделе [мусора](~/docs/standard/garbage-collection/index.md) и [реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) разделы.</span><span class="sxs-lookup"><span data-stu-id="e7500-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="e7500-113">С помощью объекта, реализующего IDisposable</span><span class="sxs-lookup"><span data-stu-id="e7500-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="e7500-114">Если ваше приложение просто использует объект, реализующий <xref:System.IDisposable> интерфейса, необходимо вызвать объекта <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации, когда вы закончите, с его помощью.</span><span class="sxs-lookup"><span data-stu-id="e7500-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="e7500-115">Языках программирования это можно сделать одним из двух способов:</span><span class="sxs-lookup"><span data-stu-id="e7500-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="e7500-116">С помощью языка создания таких как `using` оператор в C# и Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e7500-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="e7500-117">Заключение вызова метода для <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации в `try` / `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="e7500-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e7500-118">Документация по типы, реализующие <xref:System.IDisposable> запишите этот факт и включите напоминание о необходимости вызывать его <xref:System.IDisposable.Dispose%2A> реализации.</span><span class="sxs-lookup"><span data-stu-id="e7500-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="e7500-119">Оператор C# и Visual Basic с помощью</span><span class="sxs-lookup"><span data-stu-id="e7500-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="e7500-120">Если ваш язык поддерживает конструкции, такие как [с помощью](~/docs/csharp/language-reference/keywords/using.md) инструкции на языке C# и [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) инструкции в Visual Basic можно использовать его вместо явного вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> самостоятельно.</span><span class="sxs-lookup"><span data-stu-id="e7500-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="e7500-121">В следующем примере используется этот подход, при определении `WordCount` класс, который сохраняет сведения о файле и количество слов в нем.</span><span class="sxs-lookup"><span data-stu-id="e7500-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="e7500-122">`using` Инструкция является фактически синтаксического удобства.</span><span class="sxs-lookup"><span data-stu-id="e7500-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="e7500-123">Во время компиляции, языковой компилятор реализует промежуточный язык (IL) для `try` / `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="e7500-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="e7500-124">Дополнительные сведения о `using` инструкции, см. в разделе [Оператор Using](~/docs/visual-basic/language-reference/statements/using-statement.md) или [инструкцией](~/docs/csharp/language-reference/keywords/using-statement.md) разделы.</span><span class="sxs-lookup"><span data-stu-id="e7500-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="e7500-125">Блок Try/Finally</span><span class="sxs-lookup"><span data-stu-id="e7500-125">The Try/Finally block</span></span>  
 <span data-ttu-id="e7500-126">Если язык программирования не поддерживает конструкцию как `using` оператор в C# или Visual Basic, или если вы не хотите использовать его, можно вызвать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации от `finally` блока `try` / `finally` инструкции.</span><span class="sxs-lookup"><span data-stu-id="e7500-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="e7500-127">В следующем примере заменяется `using` блока в предыдущем примере с `try` / `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="e7500-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="e7500-128">Дополнительные сведения о `try` / `finally` шаблонов, см. в разделе [попробуйте... CATCH... Оператор Finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), или [оператор try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span><span class="sxs-lookup"><span data-stu-id="e7500-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="e7500-129">Использование IDisposable</span><span class="sxs-lookup"><span data-stu-id="e7500-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="e7500-130">Следует реализовать <xref:System.IDisposable> только в том случае, если ваш тип использует неуправляемые ресурсы, напрямую.</span><span class="sxs-lookup"><span data-stu-id="e7500-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="e7500-131">Потребители типа могут вызвать ваш <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации для освобождения ресурсов, в том случае, если экземпляр больше не нужен.</span><span class="sxs-lookup"><span data-stu-id="e7500-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="e7500-132">Для обработки случаев, в которых они не удастся вызвать <xref:System.IDisposable.Dispose%2A>, следует использовать либо класс, производный от <xref:System.Runtime.InteropServices.SafeHandle> программы-оболочки неуправляемые ресурсы, или вы должны переопределять <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод для ссылочного типа.</span><span class="sxs-lookup"><span data-stu-id="e7500-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="e7500-133">В любом случае используйте <xref:System.IDisposable.Dispose%2A> метод для выполнения любой очистки необходим после использования неуправляемых ресурсов, например удалением, высвобождением или сбросом неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="e7500-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e7500-134">При определении базового класса, использующий неуправляемые ресурсы и, либо, или может оказать подклассов, которые должны быть освобождены, следует реализовать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> метод и предоставить вторая перегрузка `Dispose`, как описано в следующем раздел.</span><span class="sxs-lookup"><span data-stu-id="e7500-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="e7500-135">IDisposable и иерархию наследования</span><span class="sxs-lookup"><span data-stu-id="e7500-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="e7500-136">Базовый класс с подклассами, которые должны быть освобождаемыми должен реализовывать <xref:System.IDisposable> следующим образом.</span><span class="sxs-lookup"><span data-stu-id="e7500-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="e7500-137">При реализации этого шаблона следует использовать <xref:System.IDisposable> на любой тип, который не `sealed` (`NotInheritable` в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="e7500-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="e7500-138">Он должен предоставлять один открытый невиртуальный <xref:System.IDisposable.Dispose> метод и защищенный виртуальный `Dispose(Boolean disposing)` метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="e7500-139"><xref:System.IDisposable.Dispose> Необходимо вызвать метод `Dispose(true)` и следует подавления финализации для производительности.</span><span class="sxs-lookup"><span data-stu-id="e7500-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="e7500-140">Базовый тип не должен содержать все завершения.</span><span class="sxs-lookup"><span data-stu-id="e7500-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="e7500-141">В следующем фрагменте кода отражает удаляемости для базовых классов.</span><span class="sxs-lookup"><span data-stu-id="e7500-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="e7500-142">Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="e7500-143">При переопределении <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод, класс следует реализовать следующий шаблон.</span><span class="sxs-lookup"><span data-stu-id="e7500-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="e7500-144">Подклассы должны реализовывать удаляемый шаблон следующим образом:</span><span class="sxs-lookup"><span data-stu-id="e7500-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="e7500-145">Они должны переопределить `Dispose(Boolean)` и вызвать реализацию базового класса `Dispose(Boolean)`.</span><span class="sxs-lookup"><span data-stu-id="e7500-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="e7500-146">Они могут предоставлять завершение при необходимости.</span><span class="sxs-lookup"><span data-stu-id="e7500-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="e7500-147">Метод завершения должен вызвать `Dispose(false)`.</span><span class="sxs-lookup"><span data-stu-id="e7500-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="e7500-148">Обратите внимание, что производные классы не сами реализуют <xref:System.IDisposable> интерфейс и не используйте конструктор без параметров <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e7500-149">Они только переопределить базовый класс `Dispose(Boolean)` метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="e7500-150">В следующем фрагменте кода отражает шаблона удаления для производных классов.</span><span class="sxs-lookup"><span data-stu-id="e7500-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="e7500-151">Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="e7500-152">Следующий пример демонстрирует создание класса ресурсов, который реализует <xref:System.IDisposable> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="e7500-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="e7500-153">Реализация метода Dispose</span><span class="sxs-lookup"><span data-stu-id="e7500-153">Implementing a Dispose Method</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e7500-154">Выполняет определяемые приложением задачи, связанные с высвобождением или сбросом неуправляемых ресурсов.</span><span class="sxs-lookup"><span data-stu-id="e7500-154">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e7500-155">Используйте этот метод для закрытия или высвобождения неуправляемых ресурсов, например файлы, потоки и обработчики, занятые экземплярами класса, который реализует этот интерфейс.</span><span class="sxs-lookup"><span data-stu-id="e7500-155">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="e7500-156">По соглашению, этот метод используется для всех задач, связанных с высвобождением ресурсов объектом, или подготовкой объекта к для повторного использования.</span><span class="sxs-lookup"><span data-stu-id="e7500-156">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="e7500-157">Если вы используете класс, реализующий <xref:System.IDisposable> интерфейса, необходимо вызвать его <xref:System.IDisposable.Dispose%2A> реализации, когда вы закончите, с помощью класса.</span><span class="sxs-lookup"><span data-stu-id="e7500-157">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="e7500-158">Дополнительные сведения см. в разделе «Использование объекта, реализующего IDisposable» <xref:System.IDisposable> раздела.</span><span class="sxs-lookup"><span data-stu-id="e7500-158">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e7500-159">При реализации этого метода убедитесь, что все занятые ресурсы освобождаются путем передачи вызова по иерархии вложений.</span><span class="sxs-lookup"><span data-stu-id="e7500-159">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="e7500-160">Например, если объект А размещает объект B, а объект B размещает объекта C, А затем <xref:System.IDisposable.Dispose%2A> реализация должна вызывать <xref:System.IDisposable.Dispose%2A> на B, который в свою очередь вызывают <xref:System.IDisposable.Dispose%2A> в C.</span><span class="sxs-lookup"><span data-stu-id="e7500-160">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e7500-161">Компилятор C++ поддерживает детерминированную утилизацию ресурсов и позволяет непосредственно реализовать <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-161">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e7500-162">Необходимо также вызвать объект <xref:System.IDisposable.Dispose%2A> метод его базового класса, если базовый класс реализует <xref:System.IDisposable>.</span><span class="sxs-lookup"><span data-stu-id="e7500-162">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="e7500-163">Дополнительные сведения о реализации <xref:System.IDisposable> на базовый класс и его подклассов, см. в разделе «IDisposable и иерархию наследования» <xref:System.IDisposable> раздела.</span><span class="sxs-lookup"><span data-stu-id="e7500-163">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="e7500-164">Если объекта <xref:System.IDisposable.Dispose%2A> был вызван несколько раз, то объект должен игнорировать все вызовы после первого.</span><span class="sxs-lookup"><span data-stu-id="e7500-164">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="e7500-165">Объект не должен создания исключения, если его <xref:System.IDisposable.Dispose%2A> был вызван несколько раз.</span><span class="sxs-lookup"><span data-stu-id="e7500-165">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="e7500-166">Методы экземпляра отличное от <xref:System.IDisposable.Dispose%2A> может вызвать исключение <xref:System.ObjectDisposedException> при ресурсы уже удален.</span><span class="sxs-lookup"><span data-stu-id="e7500-166">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="e7500-167">Тип ресурса для использования конкретного соглашения для обозначения состоянии выделенных и освобожденных состояния могут рассчитывать пользователи.</span><span class="sxs-lookup"><span data-stu-id="e7500-167">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="e7500-168">Примером этого являются классы потоков, которые обычно считаются открытыми или закрытыми.</span><span class="sxs-lookup"><span data-stu-id="e7500-168">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="e7500-169">Средство реализации класса, который имеет такое соглашение об можно реализовать открытый метод с заданным именем, например `Close`, которое вызывает <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-169">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="e7500-170">Так как <xref:System.IDisposable.Dispose%2A> метод должен вызываться явным образом, всегда есть опасность, что неуправляемые ресурсы не будет освобожден, так как пользователь объекта не может вызывать его <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-170">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="e7500-171">Чтобы избежать этого двумя способами:</span><span class="sxs-lookup"><span data-stu-id="e7500-171">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="e7500-172">Перенос управляемых ресурсов в объект, производный от <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="e7500-172">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e7500-173">Ваш <xref:System.IDisposable.Dispose%2A> реализации затем вызывается <xref:System.IDisposable.Dispose%2A> метод <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> экземпляров.</span><span class="sxs-lookup"><span data-stu-id="e7500-173">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="e7500-174">Дополнительные сведения см. раздел «В качестве альтернативы SafeHandle» в <xref:System.Object.Finalize%2A?displayProperty=nameWithType> разделе.</span><span class="sxs-lookup"><span data-stu-id="e7500-174">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="e7500-175">Реализуйте метод завершения, чтобы освободить ресурсы при <xref:System.IDisposable.Dispose%2A> не вызывается.</span><span class="sxs-lookup"><span data-stu-id="e7500-175">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="e7500-176">По умолчанию сборщик мусора автоматически вызывает финализатор объекта до освобождения его памяти.</span><span class="sxs-lookup"><span data-stu-id="e7500-176">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="e7500-177">Тем не менее если <xref:System.IDisposable.Dispose%2A> метод был является обычно требуется сборщику мусора вызывать метод завершения удаленного объекта.</span><span class="sxs-lookup"><span data-stu-id="e7500-177">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="e7500-178">Для предотвращения автоматического завершения <xref:System.IDisposable.Dispose%2A> реализации можно вызывать <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-178">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e7500-179">При использовании объекта, который обращается к неуправляемым ресурсам, например <xref:System.IO.StreamWriter>, хорошей практикой является создание экземпляра с `using` инструкции.</span><span class="sxs-lookup"><span data-stu-id="e7500-179">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="e7500-180">`using` Инструкция автоматически закрывает поток и вызовы <xref:System.IDisposable.Dispose%2A> объекта после завершения кода, который ее использует.</span><span class="sxs-lookup"><span data-stu-id="e7500-180">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="e7500-181">Например, см. в разделе <xref:System.IO.StreamWriter> класса.</span><span class="sxs-lookup"><span data-stu-id="e7500-181">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e7500-182">В следующем примере показано, как можно реализовать <xref:System.IDisposable.Dispose%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="e7500-182">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="e7500-183">Реализация метода Dispose</span><span class="sxs-lookup"><span data-stu-id="e7500-183">Implementing a Dispose Method</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>