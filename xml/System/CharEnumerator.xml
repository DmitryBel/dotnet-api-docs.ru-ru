<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15fed2bc4ae4f1e50f04644340cef5d301112f0d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58687434" /></Metadata><TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type CharEnumerator = class&#xA;    interface IEnumerator&#xA;    interface ICloneable&#xA;    interface IEnumerator&lt;char&gt;&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="91c80-101">Поддерживает итерацию по объекту <see cref="T:System.String" /> и чтение отдельных его символов.</span><span class="sxs-lookup"><span data-stu-id="91c80-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="91c80-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="91c80-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-103">Объект <xref:System.CharEnumerator> предоставляет доступ только для чтения к символам в ссылке <xref:System.String> объекта.</span><span class="sxs-lookup"><span data-stu-id="91c80-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="91c80-104">Например `foreach` инструкцию из языков программирования Microsoft Visual Basic и C#, которая используется для итерации по элементам коллекции, извлекает <xref:System.CharEnumerator> из <xref:System.String> объект для просмотра всех символов, в который объект.</span><span class="sxs-lookup"><span data-stu-id="91c80-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  

> [!IMPORTANT]
> <span data-ttu-id="91c80-105">`CharEnumerator` Класс перечисляет отдельные 16-разрядное <xref:System.Char> экземпляров.</span><span class="sxs-lookup"><span data-stu-id="91c80-105">The `CharEnumerator` class enumerates individual 16-bit <xref:System.Char> instances.</span></span> <span data-ttu-id="91c80-106">При этом не учитывается graphemes (то есть символ, за которыми следует один или несколько символов combiding) или суррогатной парой (т. е. символы вне базовую многоязыковую плоскость Юникода) как одиночные символы.</span><span class="sxs-lookup"><span data-stu-id="91c80-106">It does not consider graphemes (that is, a character followed by one or more combiding characters) or surrogate pairs (that is, characters outside the Unicode Basic Multilingual Plane) as single characters.</span></span> <span data-ttu-id="91c80-107">Перечислитель, который обрабатывает эти типы символов как единое целое, использовать <xref:System.Globalization.StringInfo> класса.</span><span class="sxs-lookup"><span data-stu-id="91c80-107">For an enumerator that handles these types of characters as a single unit, use the <xref:System.Globalization.StringInfo> class.</span></span>

 <span data-ttu-id="91c80-108">Отсутствует открытый конструктор для <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="91c80-108">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="91c80-109">Вместо этого необходимо вызвать <xref:System.String> объекта <xref:System.String.GetEnumerator%2A> метод, чтобы получить <xref:System.CharEnumerator> , инициализируется для ссылки на строку.</span><span class="sxs-lookup"><span data-stu-id="91c80-109">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="91c80-110">Объект <xref:System.CharEnumerator> обслуживает внутренний индекс символов в строке <xref:System.CharEnumerator> ссылки.</span><span class="sxs-lookup"><span data-stu-id="91c80-110">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="91c80-111">Состояние индекса будет недопустимым, если оно ссылается на позицию символа логически перед первым символом или после последнего символа в строке и допустимым в случае, если символ в строке.</span><span class="sxs-lookup"><span data-stu-id="91c80-111">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="91c80-112">Индекс инициализируется позицией, логически перед первым символом, а также устанавливается в положение после последнего символа после завершения итерации.</span><span class="sxs-lookup"><span data-stu-id="91c80-112">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="91c80-113">Исключение при попытке доступа к символу, пока используется недопустимый индекс.</span><span class="sxs-lookup"><span data-stu-id="91c80-113">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="91c80-114"><xref:System.CharEnumerator.MoveNext%2A> Метод индекс увеличивает на единицу, поэтому первый и последующие символы доступны в свою очередь.</span><span class="sxs-lookup"><span data-stu-id="91c80-114">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="91c80-115"><xref:System.CharEnumerator.Reset%2A> Метод задает индекс позицией, логически перед первым символом.</span><span class="sxs-lookup"><span data-stu-id="91c80-115">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="91c80-116"><xref:System.CharEnumerator.Current%2A> Свойство извлекает символ, на которой указывает данный индекс.</span><span class="sxs-lookup"><span data-stu-id="91c80-116">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="91c80-117"><xref:System.CharEnumerator.Clone%2A> Метод создает копию объекта <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="91c80-117">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91c80-118">Несколько независимых экземпляров <xref:System.CharEnumerator> через один или несколько потоков могут иметь доступ к одним экземпляром <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="91c80-118">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="91c80-119">Этот класс реализуется для поддержки <xref:System.Collections.IEnumerator> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="91c80-119">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="91c80-120">Дополнительные сведения об использовании перечислителя см. в разделе <xref:System.Collections.IEnumerator> раздела.</span><span class="sxs-lookup"><span data-stu-id="91c80-120">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c80-121">В следующем примере используется <xref:System.CharEnumerator> для перечисления отдельных символов в строке.</span><span class="sxs-lookup"><span data-stu-id="91c80-121">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="91c80-122">Он создает экземпляр <xref:System.CharEnumerator> путем вызова метода <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> метода переходит от одного символа к следующему путем вызова <xref:System.CharEnumerator.MoveNext%2A> метод и отображает текущий символ, получая значение <xref:System.CharEnumerator.Current%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="91c80-122">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="91c80-123">Обратите внимание, что та же операция может выполняться более интуитивно с помощью `foreach` (в C#) или `For Each` (в Visual Basic), как показано следующем примере.</span><span class="sxs-lookup"><span data-stu-id="91c80-123">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="charEnumerator.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91c80-124">Создает копию текущего объекта <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-124">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="91c80-125">Объект <see cref="T:System.Object" />, являющийся копией текущего объекта <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-125">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-126">Возвращаемое значение является копией данного экземпляра <xref:System.CharEnumerator> и его текущего состояния.</span><span class="sxs-lookup"><span data-stu-id="91c80-126">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="91c80-127">Это полезно для сохранения состояния при переборе <xref:System.String> объекта.</span><span class="sxs-lookup"><span data-stu-id="91c80-127">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="91c80-128">Например, предположим, что приложение использует исходный экземпляр <xref:System.CharEnumerator> для перебора каждого символа в <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="91c80-128">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="91c80-129">При обнаружении уникального знака, приложение приостанавливает обработку и вызывает <xref:System.CharEnumerator.Clone%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="91c80-129">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="91c80-130">По сути, это экономит <xref:System.CharEnumerator> индекс объекта в <xref:System.String>.</span><span class="sxs-lookup"><span data-stu-id="91c80-130">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="91c80-131">Приложение использует копию, чтобы перейти на другую часть `String` для выполнения вспомогательной обработки.</span><span class="sxs-lookup"><span data-stu-id="91c80-131">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="91c80-132">Побочный эффект перехода — копия теряет позиции, где Обработка остановлена.</span><span class="sxs-lookup"><span data-stu-id="91c80-132">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="91c80-133">Однако после завершения вспомогательной обработки приложение удаляет копию и использует исходный <xref:System.CharEnumerator> экземпляра для продолжения работы с <xref:System.String> где исходная обработка остановлена.</span><span class="sxs-lookup"><span data-stu-id="91c80-133">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91c80-134">Этот метод реализуется для поддержки <xref:System.ICloneable> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="91c80-134">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : char" Usage="System.CharEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91c80-135">Возвращает текущий символ в строке, обходимой данным объектом <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-135">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="91c80-136">Возвращает символ Юникод, на которой указывает данный объект <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-136">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-137"><xref:System.CharEnumerator> Класс поддерживает внутренний индекс перечисляемой строки и <xref:System.CharEnumerator.Current%2A> свойство возвращает символ, который в данный момент ссылается индекс.</span><span class="sxs-lookup"><span data-stu-id="91c80-137">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="91c80-138">Это свойство должны вызываться только в том случае, если индекс является допустимым; в противном случае создается исключение.</span><span class="sxs-lookup"><span data-stu-id="91c80-138">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="91c80-139">Индекс всегда является недопустимым для пустой строки (»»).</span><span class="sxs-lookup"><span data-stu-id="91c80-139">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="91c80-140">Индекс также является недопустимой после <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> или <xref:System.CharEnumerator.Reset%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="91c80-140">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="91c80-141">После вызова любого из этих методов вызова <xref:System.CharEnumerator.MoveNext%2A> способ настроить индекс первого символа в обходимой строки.</span><span class="sxs-lookup"><span data-stu-id="91c80-141">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="91c80-142">Индекс является допустимым всякий раз, когда <xref:System.CharEnumerator.MoveNext%2A> возвращает метод `true`.</span><span class="sxs-lookup"><span data-stu-id="91c80-142">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="91c80-143"><xref:System.CharEnumerator.Current%2A> Перемещение индекса и не последовательных вызовов <xref:System.CharEnumerator.Current%2A> возвращают один и тот же символ до <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, или <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> вызывается.</span><span class="sxs-lookup"><span data-stu-id="91c80-143"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c80-144">В следующем примере используется <xref:System.CharEnumerator> для перечисления отдельных символов в строке.</span><span class="sxs-lookup"><span data-stu-id="91c80-144">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="91c80-145">Он создает экземпляр <xref:System.CharEnumerator> путем вызова метода <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> метода переходит от одного символа к следующему путем вызова <xref:System.CharEnumerator.MoveNext%2A> метод и отображает текущий символ, получая значение <xref:System.CharEnumerator.Current%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="91c80-145">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="91c80-146">Обратите внимание, что та же операция может выполняться более интуитивно с помощью `foreach` (в C#) или `For Each` (в Visual Basic), как показано следующем примере.</span><span class="sxs-lookup"><span data-stu-id="91c80-146">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91c80-147">Индекс является недопустимым; это означает, что он находится перед первым или после последнего символа обходимой строки.</span><span class="sxs-lookup"><span data-stu-id="91c80-147">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="charEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91c80-148">Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-148">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-149">Вызовите метод <xref:System.CharEnumerator.Dispose%2A> по окончании использования класса <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="91c80-149">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="91c80-150">Метод <xref:System.CharEnumerator.Dispose%2A> оставляет класс <xref:System.CharEnumerator> в непригодном для использования состоянии.</span><span class="sxs-lookup"><span data-stu-id="91c80-150">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="91c80-151">После вызова метода <xref:System.CharEnumerator.Dispose%2A>, необходимо освободить все ссылки на <xref:System.CharEnumerator> , сборщик мусора мог освободить память, <xref:System.CharEnumerator> занимаемую.</span><span class="sxs-lookup"><span data-stu-id="91c80-151">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="91c80-152">Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="91c80-152">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="91c80-153">Всегда вызывайте метод <xref:System.CharEnumerator.Dispose%2A> перед освобождением последней ссылки на класс <xref:System.CharEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="91c80-153">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="91c80-154">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.CharEnumerator> метод `Finalize`.</span><span class="sxs-lookup"><span data-stu-id="91c80-154">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="charEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91c80-155">Увеличивает внутренний индекс текущего объекта <see cref="T:System.CharEnumerator" />, чтобы он указывал на следующий символ перечисляемой строки.</span><span class="sxs-lookup"><span data-stu-id="91c80-155">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns><span data-ttu-id="91c80-156">Значение <see langword="true" /> если индекс успешно увеличен и находится в пределах перечисляемой строки; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-156"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-157"><xref:System.CharEnumerator> Класс поддерживает внутренний индекс перечисляемой строки и <xref:System.CharEnumerator.MoveNext%2A> метод индекс увеличивает на единицу.</span><span class="sxs-lookup"><span data-stu-id="91c80-157">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="91c80-158">Вызовите <xref:System.CharEnumerator.MoveNext%2A> после вызова метода <xref:System.String.GetEnumerator%2A> или <xref:System.CharEnumerator.Reset%2A> Увеличиваемый текущей позиции символа до первого символа в обходимой строки.</span><span class="sxs-lookup"><span data-stu-id="91c80-158">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="91c80-159">Убедитесь, что возвращаемое значение является `true` для определения того, что в текущей позиции символа является допустимым.</span><span class="sxs-lookup"><span data-stu-id="91c80-159">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="91c80-160">Если индекс находится за последним символом обходимой строки, он не изменяется и `false` возвращается.</span><span class="sxs-lookup"><span data-stu-id="91c80-160">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="91c80-161">Обратите внимание, что если перечисляемой строки является пустым ("»), состояние <xref:System.CharEnumerator> всегда является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="91c80-161">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="91c80-162">Это обусловлено внутренний индекс <xref:System.CharEnumerator> изначально находится перед первым символом обходимой строки и поэтому является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="91c80-162">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="91c80-163"><xref:System.CharEnumerator.MoveNext%2A> Устанавливает индекс после последнего символа обходимой строки, который также является недопустимым (несуществующего).</span><span class="sxs-lookup"><span data-stu-id="91c80-163"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91c80-164">В следующем примере используется <xref:System.CharEnumerator> для перечисления отдельных символов в строке.</span><span class="sxs-lookup"><span data-stu-id="91c80-164">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="91c80-165">Он создает экземпляр <xref:System.CharEnumerator> путем вызова метода <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> метода переходит от одного символа к следующему путем вызова <xref:System.CharEnumerator.MoveNext%2A> метод и отображает текущий символ, получая значение <xref:System.CharEnumerator.Current%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="91c80-165">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="91c80-166">Обратите внимание, что та же операция может выполняться более интуитивно с помощью `foreach` (в C#) или `For Each` (в Visual Basic), как показано следующем примере.</span><span class="sxs-lookup"><span data-stu-id="91c80-166">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="charEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91c80-167">Инициализирует индекс позицией, логически расположенной перед первым символом обходимой строки.</span><span class="sxs-lookup"><span data-stu-id="91c80-167">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-168"><xref:System.CharEnumerator> Класс поддерживает внутренний индекс перечисляемой строки и <xref:System.CharEnumerator.Reset%2A> метод задает индекс в недопустимом состоянии.</span><span class="sxs-lookup"><span data-stu-id="91c80-168">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91c80-169">Возвращает текущий символ в строке, обходимой данным объектом <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-169">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="91c80-170">Описание этого члена см. в разделе <see cref="P:System.Collections.IEnumerator.Current" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-170">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="91c80-171">Упакованный символ Юникод, на которой указывает данный объект <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-171">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91c80-172">Данный элемент является явной реализацией элемента интерфейса.</span><span class="sxs-lookup"><span data-stu-id="91c80-172">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="91c80-173">Он может использоваться только при условии, что экземпляр класса <xref:System.CharEnumerator> приведен к типу интерфейса <xref:System.Collections.IEnumerator>.</span><span class="sxs-lookup"><span data-stu-id="91c80-173">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91c80-174">Перечисление не начиналось.</span><span class="sxs-lookup"><span data-stu-id="91c80-174">Enumeration has not started.</span></span>  
  
<span data-ttu-id="91c80-175">-или-</span><span class="sxs-lookup"><span data-stu-id="91c80-175">-or-</span></span> 
<span data-ttu-id="91c80-176">Обход завершен.</span><span class="sxs-lookup"><span data-stu-id="91c80-176">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91c80-177">Освобождает все ресурсы, используемые классом <see cref="T:System.CharEnumerator" />.</span><span class="sxs-lookup"><span data-stu-id="91c80-177">Releases all resources used by the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="91c80-178">Вызовите IDisposable.Dispose, когда вы закончите с помощью <xref:System.CharEnumerator> класса.</span><span class="sxs-lookup"><span data-stu-id="91c80-178">Call IDisposable.Dispose when you are finished using the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="91c80-179">Метод оставляет <xref:System.CharEnumerator> класс окажется в неработоспособном состоянии.</span><span class="sxs-lookup"><span data-stu-id="91c80-179">The method leaves the <xref:System.CharEnumerator> class in an unusable state.</span></span> <span data-ttu-id="91c80-180">После вызова его, необходимо удалить все ссылки на <xref:System.CharEnumerator> класса, чтобы сборщик мусора мог освободить память, <xref:System.CharEnumerator> занимаемую класса.</span><span class="sxs-lookup"><span data-stu-id="91c80-180">After calling it, you must release all references to the <xref:System.CharEnumerator> class so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> class was occupying.</span></span>

<span data-ttu-id="91c80-181">Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).</span><span class="sxs-lookup"><span data-stu-id="91c80-181">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>

> [!NOTE]
> <span data-ttu-id="91c80-182">Всегда вызывайте метод IDisposable.Dispose, перед освобождением последней ссылки на <xref:System.CharEnumerator> класса.</span><span class="sxs-lookup"><span data-stu-id="91c80-182">Always call IDisposable.Dispose before you release your last reference to the <xref:System.CharEnumerator> class.</span></span> <span data-ttu-id="91c80-183">В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.CharEnumerator> метод <xref:System.Object.Finalize>.</span><span class="sxs-lookup"><span data-stu-id="91c80-183">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's <xref:System.Object.Finalize> method.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>