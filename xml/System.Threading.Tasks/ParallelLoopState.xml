<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f0237c0ab6a5df247c24cc0cab4d856a2a5ef27" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58690529" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="23083-101">Позволяет итерациям параллельных циклов взаимодействовать с другими итерациями.</span><span class="sxs-lookup"><span data-stu-id="23083-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="23083-102">Экземпляр этого класса предоставляется каждому циклу классом <see cref="T:System.Threading.Tasks.Parallel" />; невозможно создавать экземпляры в коде.</span><span class="sxs-lookup"><span data-stu-id="23083-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23083-103">Обратите внимание на то, что не удается создать экземпляр экземпляра этого класса.</span><span class="sxs-lookup"><span data-stu-id="23083-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="23083-104">Он автоматически создается компилятором как аргумент в вызове <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> или <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="23083-105">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="23083-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="23083-106">Таких конструкций, как `for` и `foreach` (в C#) и `For` и `For Each` (в Visual Basic) выполняться последовательно от наименьшего индекса и заканчивая самым верхним или из первого объекта в наборе до последнего.</span><span class="sxs-lookup"><span data-stu-id="23083-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="23083-107">Напротив <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> и <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> методы — нет.</span><span class="sxs-lookup"><span data-stu-id="23083-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="23083-108">Так как отдельные итерации цикла выполняются в параллельном режиме, они могут начинаются и заканчиваются в любом порядке.</span><span class="sxs-lookup"><span data-stu-id="23083-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="23083-109"><xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет отдельным итерациям параллельных циклов взаимодействовать друг с другом.</span><span class="sxs-lookup"><span data-stu-id="23083-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="23083-110"><xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет:</span><span class="sxs-lookup"><span data-stu-id="23083-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="23083-111">Выйдите из текущей итерации и предотвратить все большем числе итераций запуститься, вызвав <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="23083-112">Это не влияет на итерации, уже начали выполнение.</span><span class="sxs-lookup"><span data-stu-id="23083-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="23083-113">Запретить выполнение путем вызова любой итерации с индексом большим, чем текущий индекс <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-114">Это не влияет на итерации, уже начали выполнение.</span><span class="sxs-lookup"><span data-stu-id="23083-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="23083-115">Определить, возникло ли исключение в какой-либо итерации цикла, получая значение <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="23083-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="23083-116">Определить, вызван ли какая-либо итерация цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода, получая значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="23083-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="23083-117">Это свойство можно использовать для возврата из итераций цикла, который запущен перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод, но по-прежнему выполняются.</span><span class="sxs-lookup"><span data-stu-id="23083-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="23083-118">Определить, вызван ли какая-либо итерация цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода или генерации исключения, получая значение <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="23083-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="23083-119">Выход из итерации выполняющейся длительное время, индекс которого больше, чем индекс итерации, в котором был вызван Break, получая значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="23083-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23083-120">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23083-121">Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="23083-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23083-122">Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="23083-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23083-123">Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="23083-124">Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод, вызовы функций каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-125">Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="23083-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="23083-126">Объект <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр предназначен для использования только в теле цикла, к которому был предоставлен экземпляр.</span><span class="sxs-lookup"><span data-stu-id="23083-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="23083-127">Не является безопасным для использования в предоставленный <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр после связанного цикла заканчивается, и безопасно явно передавать его другим потокам и предоставлять этим потокам доступ к нему в любое время.</span><span class="sxs-lookup"><span data-stu-id="23083-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="23083-128">Другой <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр будет предоставляться для каждого потока, участвующих в цикле.</span><span class="sxs-lookup"><span data-stu-id="23083-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-129">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23083-130">Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение итераций после текущей в первый удобный для системы момент.</span><span class="sxs-lookup"><span data-stu-id="23083-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23083-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Указывает, что должно выполняться нет итераций после текущей итерации.</span><span class="sxs-lookup"><span data-stu-id="23083-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="23083-132">Фактически он отменяет любые дополнительные итерации цикла.</span><span class="sxs-lookup"><span data-stu-id="23083-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="23083-133">Тем не менее любой итерации, уже начали выполнение не останавливается.</span><span class="sxs-lookup"><span data-stu-id="23083-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="23083-134">Например если <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается из 100-й итерации параллельного цикла итерации от 0 до 1 000, всех итераций меньше 100 должны по-прежнему выполняться, но итераций от 101 до 1000, который еще не запущен не выполняться.</span><span class="sxs-lookup"><span data-stu-id="23083-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="23083-135">Для длительных итераций, которые уже могут выполняться <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> задает <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> индекс текущей итерации, если текущий индекс меньше, чем текущее значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span><span class="sxs-lookup"><span data-stu-id="23083-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="23083-136">Чтобы остановить, индекс которого больше, чем самую нижнюю итерацию break из конкурирующих выполнения итераций, поступайте следующим:</span><span class="sxs-lookup"><span data-stu-id="23083-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="23083-137">Проверьте ли <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="23083-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="23083-138">Выход из итерации в случае его индекс больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства.</span><span class="sxs-lookup"><span data-stu-id="23083-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="23083-139">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="23083-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="23083-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> обычно используются в алгоритмах на основе поиска, где порядок присутствует в источнике данных.</span><span class="sxs-lookup"><span data-stu-id="23083-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23083-141">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23083-142">Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="23083-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23083-143">Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="23083-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23083-144">Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="23083-145">Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод, вызовы функций каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-146">Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="23083-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23083-147">Был ранее вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span><span class="sxs-lookup"><span data-stu-id="23083-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="23083-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</span><span class="sxs-lookup"><span data-stu-id="23083-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-149">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23083-150">Получает значение, указывающее, создалось ли в какой-либо итерации цикла исключение, не обработанное данной итерацией.</span><span class="sxs-lookup"><span data-stu-id="23083-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="23083-151">Значение <see langword="true" />, если было вызвано необработанное исключение; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23083-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-152">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23083-153">Получает значение, указывающее, вызывала ли какая-либо итерация цикла метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</span><span class="sxs-lookup"><span data-stu-id="23083-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="23083-154">Значение <see langword="true" />, если какая-либо итерация остановила цикл, вызвав метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23083-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23083-155">Для длительных итераций цикла, можно получить значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить видимость все итерации цикла, начала выполнения перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод по-прежнему выполняются.</span><span class="sxs-lookup"><span data-stu-id="23083-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="23083-156">Затем можно использовать значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить ли они должны немедленно вернет управление или выполнение в обычном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23083-157">В следующем примере выполняется до 10 000 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="23083-158">Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="23083-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23083-159">Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="23083-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="23083-160">Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызове метода, лямбда-выражение вызывает <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="23083-161">Если он возвращает `true`, итерации возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="23083-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-162">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23083-163">Получает нижнюю итерацию цикла, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span><span class="sxs-lookup"><span data-stu-id="23083-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="23083-164">Получает первую итерацию, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</span><span class="sxs-lookup"><span data-stu-id="23083-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="23083-165">В случае цикла <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> значение основано на внутренне создаваемом индексе.</span><span class="sxs-lookup"><span data-stu-id="23083-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23083-166">Возможно несколько итераций параллельного цикла для вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-167">Если это так, это значение равно наименьшего индекса итерации, который вызвал <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span><span class="sxs-lookup"><span data-stu-id="23083-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="23083-168">При вызове не итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, это свойство возвращает `null`.</span><span class="sxs-lookup"><span data-stu-id="23083-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="23083-169">Обратите внимание, что значение свойства не затрагивает вызовы <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="23083-170">В режиме итераций длительных всех итераций после итерации, которое вызывает <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> нет необходимости использовать метод, <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойство используется для завершения итерации, начала выполнения перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-171">Чтобы остановить, индекс которого больше, чем самую нижнюю итерацию break из конкурирующих выполнения итераций, поступайте следующим:</span><span class="sxs-lookup"><span data-stu-id="23083-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="23083-172">Проверьте ли <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство `true`.</span><span class="sxs-lookup"><span data-stu-id="23083-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="23083-173">Выход из итерации в случае его индекс больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства.</span><span class="sxs-lookup"><span data-stu-id="23083-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="23083-174">Иллюстрация приведена в примере.</span><span class="sxs-lookup"><span data-stu-id="23083-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23083-175">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23083-176">Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="23083-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23083-177">Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="23083-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23083-178">Это предотвращает итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства запуститься после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод, но он не влияет на все итерации, уже начали выполнение.</span><span class="sxs-lookup"><span data-stu-id="23083-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="23083-179">Чтобы предотвратить их выполнение, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-180">Если таким образом, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="23083-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="23083-181">Обратите внимание, что, поскольку <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение находится вне области за пределами параллельного цикла, его значение необходимо присваивать переменной, видимый за пределами цикла, если вы хотите сохранить ее значение.</span><span class="sxs-lookup"><span data-stu-id="23083-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-182">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="23083-183">Получает значение, указывающее, следует ли текущей итерации цикла выйти на основе запросов от этой или других итераций.</span><span class="sxs-lookup"><span data-stu-id="23083-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="23083-184">Значение <see langword="true" />, если текущая итерация должна завершать работу; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="23083-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23083-185"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Свойству `true` выполняется любое из следующих условий:</span><span class="sxs-lookup"><span data-stu-id="23083-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="23083-186">Итерации цикла вызовов <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span><span class="sxs-lookup"><span data-stu-id="23083-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="23083-187">Итерация цикла создает исключение.</span><span class="sxs-lookup"><span data-stu-id="23083-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="23083-188">Цикл отменяется.</span><span class="sxs-lookup"><span data-stu-id="23083-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="23083-189">Если этому свойству присвоено `true`, <xref:System.Threading.Tasks.Parallel> класс заранее пытается запретить запуск дополнительных итераций цикла.</span><span class="sxs-lookup"><span data-stu-id="23083-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="23083-190">Однако возможны ситуации, где он не сможет предотвратить дополнительных итераций запуститься.</span><span class="sxs-lookup"><span data-stu-id="23083-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="23083-191">Также может оказаться так, что уже началось выполнение продолжительной итерации.</span><span class="sxs-lookup"><span data-stu-id="23083-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="23083-192">В таких случаях может явно проверять итераций <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство и прекращение выполнения, если свойство возвращает `true`.</span><span class="sxs-lookup"><span data-stu-id="23083-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23083-193">В следующем примере выполняется до 100 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="23083-194">Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="23083-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23083-195">Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="23083-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="23083-196">Это предотвращает итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства запуститься после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод, но он не влияет на все итерации, уже начали выполнение.</span><span class="sxs-lookup"><span data-stu-id="23083-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="23083-197">Чтобы предотвратить их выполнение, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="23083-198">Если таким образом, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="23083-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-199">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="23083-200">Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение в первый удобный для системы момент.</span><span class="sxs-lookup"><span data-stu-id="23083-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="23083-201">Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод указывает, все итерации цикла, которые еще не начали запускается не требуется.</span><span class="sxs-lookup"><span data-stu-id="23083-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="23083-202">Фактически он отменяет любые дополнительные итерации цикла.</span><span class="sxs-lookup"><span data-stu-id="23083-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="23083-203">Тем не менее любой итерации, уже начали выполнение не останавливается.</span><span class="sxs-lookup"><span data-stu-id="23083-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="23083-204">Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода заставляет <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> возвращаемое свойство `true` для какой-либо итерации цикла, который все еще выполняется.</span><span class="sxs-lookup"><span data-stu-id="23083-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="23083-205">Это особенно полезно для длительного итераций, которые можно проверить <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойство и выход ранних в том случае, если его значение равно `true`.</span><span class="sxs-lookup"><span data-stu-id="23083-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="23083-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> обычно используются в алгоритмах на основе поиска, где после результат итерации найден, то все остальные должны выполняться.</span><span class="sxs-lookup"><span data-stu-id="23083-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="23083-207">В следующем примере выполняется до 10 000 итераций цикла в параллельном режиме.</span><span class="sxs-lookup"><span data-stu-id="23083-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="23083-208">Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="23083-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="23083-209">Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="23083-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="23083-210">Как видно из примера, не итерации выполняются после вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="23083-211">Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод, вызовы функций каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="23083-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="23083-212">Если он возвращает `true`, итерации возвращается немедленно.</span><span class="sxs-lookup"><span data-stu-id="23083-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="23083-213">Метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> был вызван ранее.</span><span class="sxs-lookup"><span data-stu-id="23083-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="23083-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</span><span class="sxs-lookup"><span data-stu-id="23083-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="23083-215">Параллелизм данных (библиотека параллельных задач)</span><span class="sxs-lookup"><span data-stu-id="23083-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>