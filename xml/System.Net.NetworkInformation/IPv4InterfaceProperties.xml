<Type Name="IPv4InterfaceProperties" FullName="System.Net.NetworkInformation.IPv4InterfaceProperties">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b57ff5cf8356fca092bffeea4a1651a6c07d94b5" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58708356" /></Metadata><TypeSignature Language="C#" Value="public abstract class IPv4InterfaceProperties" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit IPv4InterfaceProperties extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.IPv4InterfaceProperties" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class IPv4InterfaceProperties" />
  <TypeSignature Language="C++ CLI" Value="public ref class IPv4InterfaceProperties abstract" />
  <TypeSignature Language="F#" Value="type IPv4InterfaceProperties = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.NetworkInformation</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1cfe5-101">Предоставляет сведения о сетевых интерфейсах, поддерживающих протокол IPv4.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-101">Provides information about network interfaces that support Internet Protocol version 4 (IPv4).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-102">Этот класс предоставляет доступ к конфигурации и сведения об адресе для сетевых интерфейсов, которые поддерживают IPv4.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-102">This class provides access to configuration and address information for network interfaces that support IPv4.</span></span> <span data-ttu-id="1cfe5-103">Вам не следует создавать экземпляры этого класса; они возвращаются <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-103">You do not create instances of this class; they are returned by the <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> method.</span></span>  
  
 <span data-ttu-id="1cfe5-104">Свойства протокола IPV6, см. в разделе <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties%2A>.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-104">For IPV6 properties, see <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-105">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-105">The following code example gets an <xref:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties%2A> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected IPv4InterfaceProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; IPv4InterfaceProperties();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1cfe5-106">Инициализирует новый экземпляр класса <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" />.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-106">Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-107">Этот конструктор может вызываться только классы, производные от <xref:System.Net.NetworkInformation.IPv4InterfaceProperties>.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-107">This constructor can be called only by classes that derive from <xref:System.Net.NetworkInformation.IPv4InterfaceProperties>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public abstract int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Index" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-108">Возвращает индекс сетевого интерфейса, связанного с IPv4-адресом.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-108">Gets the index of the network interface associated with the Internet Protocol version 4 (IPv4) address.</span></span></summary>
        <value><span data-ttu-id="1cfe5-109">Значение типа <see cref="T:System.Int32" />, содержащее индекс IPv4-интерфейса.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-109">An <see cref="T:System.Int32" /> that contains the index of the IPv4 interface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-110">Если значение этого свойства равно нулю, IPv4 не поддерживается этим интерфейсом.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-110">If the value of this property is zero, IPv4 is not supported by this interface.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-111">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-111">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutomaticPrivateAddressingActive">
      <MemberSignature Language="C#" Value="public abstract bool IsAutomaticPrivateAddressingActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutomaticPrivateAddressingActive" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsAutomaticPrivateAddressingActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsAutomaticPrivateAddressingActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutomaticPrivateAddressingActive : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-112">Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, имеет ли на данный интерфейс APIPA-адрес.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-112">Gets a <see cref="T:System.Boolean" /> value that indicates whether this interface has an automatic private IP addressing (APIPA) address.</span></span></summary>
        <value><span data-ttu-id="1cfe5-113">Значение <see langword="true" />, если интерфейс использует APIPA-адрес; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-113"><see langword="true" /> if the interface uses an APIPA address; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-114">Автоматического назначения IP-адреса позволяет компьютеры, у которых нет доступа к серверу конфигурации протокола DHCP (Dynamic Host) для автоматического назначения IP-адрес, не конфликтующий с общедоступными адресами.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-114">Automatic private IP addressing allows computers that do not have access to a Dynamic Host Configuration Protocol (DHCP) server to be automatically assigned an IP address that does not conflict with public addresses.</span></span> <span data-ttu-id="1cfe5-115">Эти адреса находятся в диапазоне 169.254.0.0 — 169.254.255.255.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-115">These addresses are in the range 169.254.0.0 to 169.254.255.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-116">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-116">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutomaticPrivateAddressingEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsAutomaticPrivateAddressingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutomaticPrivateAddressingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsAutomaticPrivateAddressingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsAutomaticPrivateAddressingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutomaticPrivateAddressingEnabled : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-117">Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, разрешено ли на интерфейсе автоматическое назначение частных IP-адресов (APIPA).</span><span class="sxs-lookup"><span data-stu-id="1cfe5-117">Gets a <see cref="T:System.Boolean" /> value that indicates whether this interface has automatic private IP addressing (APIPA) enabled.</span></span></summary>
        <value><span data-ttu-id="1cfe5-118">Значение <see langword="true" />, если интерфейсом используется APIPA; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-118"><see langword="true" /> if the interface uses APIPA; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-119">Автоматического назначения IP-адреса позволяет компьютеры, у которых нет доступа к серверу конфигурации протокола DHCP (Dynamic Host) для автоматического назначения IP-адрес, не конфликтующий с общедоступными адресами.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-119">Automatic private IP addressing allows computers that do not have access to a Dynamic Host Configuration Protocol (DHCP) server to be automatically assigned an IP address that does not conflict with public addresses.</span></span> <span data-ttu-id="1cfe5-120">Эти адреса находятся в диапазоне 169.254.0.0 — 169.254.255.255.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-120">These addresses are in the range 169.254.0.0 to 169.254.255.255.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-121">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-121">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDhcpEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsDhcpEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDhcpEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsDhcpEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsDhcpEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDhcpEnabled : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-122">Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, использует ли интерфейс DHCP-сервер для получения IP-адреса.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-122">Gets a <see cref="T:System.Boolean" /> value that indicates whether the interface is configured to use a Dynamic Host Configuration Protocol (DHCP) server to obtain an IP address.</span></span></summary>
        <value><span data-ttu-id="1cfe5-123">Значение <see langword="true" />, если интерфейс получает IP-адрес у DHCP-сервера; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-123"><see langword="true" /> if the interface is configured to obtain an IP address from a DHCP server; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-124">Если этому свойству присвоено `true`, DHCP-сервер назначает IP-адрес интерфейсу, когда компьютер устанавливает его сетевых подключений.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-124">When this property is `true`, a DHCP server assigns the IP address to the interface when the computer establishes its network connections.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-125">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-125">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsForwardingEnabled">
      <MemberSignature Language="C#" Value="public abstract bool IsForwardingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsForwardingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsForwardingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsForwardingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsForwardingEnabled : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-126">Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, может ли интерфейс переадресовывать (маршрутизировать) пакеты.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-126">Gets a <see cref="T:System.Boolean" /> value that indicates whether this interface can forward (route) packets.</span></span></summary>
        <value><span data-ttu-id="1cfe5-127">Значение <see langword="true" />, если данный интерфейс маршрутизирует пакеты; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-127"><see langword="true" /> if this interface routes packets; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-128">Если Маршрутизация отключена, пакетов, полученных интерфейсом с адресом назначения, не хранящихся в интерфейсе, удаляются.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-128">If routing is disabled, packets that are received by the interface with a destination address that is not held by the interface are discarded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-129">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-129">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mtu">
      <MemberSignature Language="C#" Value="public abstract int Mtu { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Mtu" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Mtu As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Mtu { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Mtu : int" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-130">Возвращает MTU данного сетевого интерфейса.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-130">Gets the maximum transmission unit (MTU) for this network interface.</span></span></summary>
        <value><span data-ttu-id="1cfe5-131">Значение типа <see cref="T:System.Int64" />, обозначающее MTU.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-131">An <see cref="T:System.Int64" /> value that specifies the MTU.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-132">MTU интерфейса сети — это максимальный размер пакета, который может быть передан.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-132">The MTU of a network interface is the largest packet that can be transmitted.</span></span> <span data-ttu-id="1cfe5-133">Измеряется в октетах (8-битовых байт).</span><span class="sxs-lookup"><span data-stu-id="1cfe5-133">It is measured in octets (8-bit bytes).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-134">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-134">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesWins">
      <MemberSignature Language="C#" Value="public abstract bool UsesWins { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesWins" />
      <MemberSignature Language="DocId" Value="P:System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UsesWins As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool UsesWins { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UsesWins : bool" Usage="System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1cfe5-135">Возвращает значение типа <see cref="T:System.Boolean" />, указывающее, использует ли интерфейс службу WINS.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-135">Gets a <see cref="T:System.Boolean" /> value that indicates whether an interface uses Windows Internet Name Service (WINS).</span></span></summary>
        <value><span data-ttu-id="1cfe5-136">Значение <see langword="true" />, если интерфейсом используется WINS; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-136"><see langword="true" /> if the interface uses WINS; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1cfe5-137">Служба WINS предоставляет распределенную базу данных для регистрации и запросов динамических имен NetBIOS с IPv4-адресам.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-137">WINS provides a distributed database for registering and querying dynamic NetBIOS names to IPv4 address mappings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1cfe5-138">В следующем коде получается пример <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> и отображает его данные.</span><span class="sxs-lookup"><span data-stu-id="1cfe5-138">The following code example gets an <xref:System.Net.NetworkInformation.IPv4InterfaceProperties> object and displays its data.</span></span>  
  
 [!code-cpp[NclNetInfo2#48](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLNetInfo2/CPP/networkexamples.cpp#48)]
 [!code-csharp[NclNetInfo2#48](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLNetInfo2/CS/networkexamples.cs#48)]
 [!code-vb[NclNetInfo2#48](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLNetInfo2/VB/networkexamples.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>