<Type Name="DynamicILInfo" FullName="System.Reflection.Emit.DynamicILInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d1404a88cdcdd111c553b0006eb934c6c872418" /><Meta Name="ms.sourcegitcommit" Value="4ee26ac79338b0bf99fa1e0913e8a06b21994d8e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/26/2019" /><Meta Name="ms.locfileid" Value="58455565" /></Metadata><TypeSignature Language="C#" Value="public class DynamicILInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DynamicILInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.DynamicILInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class DynamicILInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicILInfo" />
  <TypeSignature Language="F#" Value="type DynamicILInfo = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4f51b-101">Обеспечивает поддержку альтернативных методов создания MSIL и метаданных для динамического метода, включая методы создания токенов и вставки кода, обработки исключений и больших двоичных объектов подписи локальных переменных.</span><span class="sxs-lookup"><span data-stu-id="4f51b-101">Provides support for alternative ways to generate the Microsoft intermediate language (MSIL) and metadata for a dynamic method, including methods for creating tokens and for inserting the code, exception handling, and local variable signature blobs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-102"><xref:System.Reflection.Emit.DynamicILInfo> Класс позволяет разработчикам писать собственные генераторы MSIL вместо использования <xref:System.Reflection.Emit.ILGenerator>.</span><span class="sxs-lookup"><span data-stu-id="4f51b-102">The <xref:System.Reflection.Emit.DynamicILInfo> class allows developers to write their own MSIL generators instead of using <xref:System.Reflection.Emit.ILGenerator>.</span></span>  
  
 <span data-ttu-id="4f51b-103">Чтобы создать экземпляры других типов, вызывать методы и т. д., созданный MSIL должен включать маркеры для этих сущностей.</span><span class="sxs-lookup"><span data-stu-id="4f51b-103">To create instances of other types, call methods, and so on, the MSIL you generate must include tokens for those entities.</span></span> <span data-ttu-id="4f51b-104"><xref:System.Reflection.Emit.DynamicILInfo> Класс предоставляет несколько перегрузок <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> метод, который будет возвращать маркеры допустимый в области текущего <xref:System.Reflection.Emit.DynamicILInfo>.</span><span class="sxs-lookup"><span data-stu-id="4f51b-104">The <xref:System.Reflection.Emit.DynamicILInfo> class provides several overloads of the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method, which return tokens valid in the scope of the current <xref:System.Reflection.Emit.DynamicILInfo>.</span></span> <span data-ttu-id="4f51b-105">Например, если необходимо вызвать перегрузку <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> метод, вы можете получить <xref:System.RuntimeMethodHandle> , перегрузки и передать его в <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> метод для получения маркера для внедрения в ваш код MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-105">For example, if you need to call an overload of the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method, you can obtain a <xref:System.RuntimeMethodHandle> for that overload and pass it to the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> method to obtain a token to embed in your MSIL.</span></span>  
  
 <span data-ttu-id="4f51b-106">После создания <xref:System.Byte> массивы для подписи локальной переменной, исключения и тело кода, можно использовать <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, и <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> методы для вставки их в <xref:System.Reflection.Emit.DynamicMethod> связанный с вашей <xref:System.Reflection.Emit.DynamicILInfo> объект.</span><span class="sxs-lookup"><span data-stu-id="4f51b-106">Once you have created <xref:System.Byte> arrays for your local variable signature, exceptions, and code body, you can use the <xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>, <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>, and <xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> methods to insert them into the <xref:System.Reflection.Emit.DynamicMethod> associated with your <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="4f51b-107">Создание собственных метаданные и MSIL требует знакомства с документацией по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="4f51b-107">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="4f51b-108">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-108">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f51b-109">Не используйте <xref:System.Reflection.Emit.DynamicILInfo> для создания кода, который создает делегат для другой динамический метод путем вызова конструктора делегата напрямую.</span><span class="sxs-lookup"><span data-stu-id="4f51b-109">Do not use <xref:System.Reflection.Emit.DynamicILInfo> to generate code that creates a delegate to another dynamic method by calling the delegate constructor directly.</span></span> <span data-ttu-id="4f51b-110">Вместо этого используйте <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> метод для создания делегата.</span><span class="sxs-lookup"><span data-stu-id="4f51b-110">Instead, use the <xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> method to create the delegate.</span></span> <span data-ttu-id="4f51b-111">Делегат, который создается с помощью конструктора, делегат не имеет ссылку на целевой динамический метод.</span><span class="sxs-lookup"><span data-stu-id="4f51b-111">A delegate that is created with the delegate constructor does not have a reference to the target dynamic method.</span></span> <span data-ttu-id="4f51b-112">Динамический метод может быть удален сборщиком мусора, когда делегат по-прежнему используется.</span><span class="sxs-lookup"><span data-stu-id="4f51b-112">The dynamic method might be reclaimed by garbage collection while the delegate is still in use.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DynamicMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Emit.DynamicMethod DynamicMethod" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicMethod As DynamicMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Emit::DynamicMethod ^ DynamicMethod { System::Reflection::Emit::DynamicMethod ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicMethod : System.Reflection.Emit.DynamicMethod" Usage="System.Reflection.Emit.DynamicILInfo.DynamicMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.DynamicMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4f51b-113">Возвращает динамический метод, основной текст которого создан текущим экземпляром.</span><span class="sxs-lookup"><span data-stu-id="4f51b-113">Gets the dynamic method whose body is generated by the current instance.</span></span></summary>
        <value><span data-ttu-id="4f51b-114">Объект <see cref="T:System.Reflection.Emit.DynamicMethod" />, представляющий динамический метод, для которого текущий объект <see cref="T:System.Reflection.Emit.DynamicILInfo" /> создает код.</span><span class="sxs-lookup"><span data-stu-id="4f51b-114">A <see cref="T:System.Reflection.Emit.DynamicMethod" /> object representing the dynamic method for which the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object is generating code.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-115">Объект <xref:System.Reflection.Emit.DynamicILInfo> объект всегда связан с динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-115">A <xref:System.Reflection.Emit.DynamicILInfo> object is always associated with a dynamic method.</span></span> <span data-ttu-id="4f51b-116">Цель <xref:System.Reflection.Emit.DynamicILInfo> класс — предоставить еще один способ вставки потока MSIL, обработки исключений и подпись локальной переменной в динамический метод, для разработчиков, желающих создать MSIL без использования <xref:System.Reflection.Emit.ILGenerator> класса.</span><span class="sxs-lookup"><span data-stu-id="4f51b-116">The purpose of the <xref:System.Reflection.Emit.DynamicILInfo> class is to provide another way of inserting the MSIL stream, exception handling, and local variable signature into a dynamic method, for developers who want to generate MSIL without using the <xref:System.Reflection.Emit.ILGenerator> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTokenFor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f51b-117">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющий строку, поле, метод, тип или подпись в потоке MSIL для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-117">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string, field, method, type, or signature in the MSIL stream for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (byte[] signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(unsigned int8[] signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (signature As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(cli::array &lt;System::Byte&gt; ^ signature);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : byte[] -&gt; int" Usage="dynamicILInfo.GetTokenFor signature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="signature"><span data-ttu-id="4f51b-118">Массив, содержащий сигнатуру.</span><span class="sxs-lookup"><span data-stu-id="4f51b-118">An array that contains the signature.</span></span></param>
        <summary><span data-ttu-id="4f51b-119">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего подпись для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-119">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing the signature for the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="4f51b-120">токен, который может быть внедрен в метаданные и поток MSIL для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-120">A token that can be embedded in the metadata and the MSIL stream for the associated dynamic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-121">Сведения о больших двоичных объектов подписи см. в документации по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="4f51b-121">For information on signature blobs, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="4f51b-122">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-122">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(class System.Reflection.Emit.DynamicMethod method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As DynamicMethod) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::Reflection::Emit::DynamicMethod ^ method);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : System.Reflection.Emit.DynamicMethod -&gt; int" Usage="dynamicILInfo.GetTokenFor method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.Emit.DynamicMethod" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4f51b-123">Вызываемый динамический метод.</span><span class="sxs-lookup"><span data-stu-id="4f51b-123">The dynamic method to call.</span></span></param>
        <summary><span data-ttu-id="4f51b-124">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего динамический метод, который должен быть вызван из связанного метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-124">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a dynamic method to be called from the associated method.</span></span></summary>
        <returns><span data-ttu-id="4f51b-125">токен, который может быть встроен в поток MSIL для связанного динамического метода в качестве назначения инструкции MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-125">A token that can be embedded in the MSIL stream for the associated dynamic method, as the target of an MSIL instruction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-126">Маркер, возвращенный этой перегрузки метода позволяет вызвать динамический метод из динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-126">The token returned by this method overload allows you to call a dynamic method from the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4f51b-127">Чтобы вызвать рекурсивно связанного динамического метода, передайте значение <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="4f51b-127">To call the associated dynamic method recursively, pass the value of the <xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeFieldHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor field" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" />
      </Parameters>
      <Docs>
        <param name="field"><span data-ttu-id="4f51b-128">Поле для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f51b-128">The field to be accessed.</span></span></param>
        <summary><span data-ttu-id="4f51b-129">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего поле, к которому должен быть предоставлен доступ из связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-129">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="4f51b-130">токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к полям, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-130">A token that can be used as the operand of an MSIL instruction that accesses fields, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-131">Необходимо получить маркер для любого поля, будут доступны для динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-131">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4f51b-132">Используйте <xref:System.Type.GetField%2A?displayProperty=nameWithType> метод для получения <xref:System.Reflection.FieldInfo> поле, необходимо получить доступ, воспользуйтесь <xref:System.Reflection.FieldInfo.FieldHandle%2A> свойство для получения <xref:System.RuntimeFieldHandle>.</span><span class="sxs-lookup"><span data-stu-id="4f51b-132">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeMethodHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4f51b-133">Метод для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f51b-133">The method to be accessed.</span></span></param>
        <summary><span data-ttu-id="4f51b-134">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего метод, к которому должен быть предоставлен доступ из связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-134">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method to be accessed from the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="4f51b-135">токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к методам, таким как <see cref="F:System.Reflection.Emit.OpCodes.Call" /> или <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-135">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-136">Необходимо получить маркер для любой метод, который будет осуществляться с помощью динамического метода, связанный с текущим <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-136">You must obtain a token for any method that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4f51b-137">Используйте <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> метод для получения <xref:System.Reflection.MethodInfo> для метода, который вы хотите получить доступ к, а затем используйте <xref:System.Reflection.MethodBase.MethodHandle%2A> свойство для получения <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="4f51b-137">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to access, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f51b-138">Для метода, принадлежащего к универсальному типу, используйте <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> перегрузки метода и укажите <xref:System.RuntimeTypeHandle> для универсального типа.</span><span class="sxs-lookup"><span data-stu-id="4f51b-138">For a method that belongs to a generic type, use the <xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29> method overload and specify a <xref:System.RuntimeTypeHandle> for the generic type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeTypeHandle type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeTypeHandle type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (type As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeTypeHandle type);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="4f51b-139">Используемый тип.</span><span class="sxs-lookup"><span data-stu-id="4f51b-139">The type to be used.</span></span></param>
        <summary><span data-ttu-id="4f51b-140">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего тип, который будет использоваться в связанном динамическом методе.</span><span class="sxs-lookup"><span data-stu-id="4f51b-140">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a type to be used in the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="4f51b-141">токен, который может быть использован в качестве операнда инструкции MSIL, нуждающейся в типе, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-141">A token that can be used as the operand of an MSIL instruction that requires a type, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-142">Маркер, возвращенный этой перегрузки метода позволяет определить тип локальной переменной и выпустить MSIL для создания экземпляра типа в динамический метод, связанный с текущим <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-142">The token returned by this method overload allows you to define a local variable type, and emit MSIL to create an instance of a type in the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span>  
  
 <span data-ttu-id="4f51b-143">Чтобы получить <xref:System.RuntimeTypeHandle> представляющий тип, используйте <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> свойство.</span><span class="sxs-lookup"><span data-stu-id="4f51b-143">To get a <xref:System.RuntimeTypeHandle> representing a type, use the <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (literal As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(System::String ^ literal);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : string -&gt; int" Usage="dynamicILInfo.GetTokenFor literal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="literal"><span data-ttu-id="4f51b-144">Используемая строка.</span><span class="sxs-lookup"><span data-stu-id="4f51b-144">The string to be used.</span></span></param>
        <summary><span data-ttu-id="4f51b-145">Возвращает токен, допустимый в области текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего строковый литерал, который будет использоваться в связанном динамическом методе.</span><span class="sxs-lookup"><span data-stu-id="4f51b-145">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a string literal to be used in the associated dynamic method.</span></span></summary>
        <returns><span data-ttu-id="4f51b-146">токен, который может быть использован в качестве операнда инструкции MSIL, нуждающейся в строке, в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-146">A token that can be used as the operand of an MSIL instruction that requires a string, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeFieldHandle field, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (field As RuntimeFieldHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeFieldHandle field, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeFieldHandle * RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor (field, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="field" Type="System.RuntimeFieldHandle" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="field"><span data-ttu-id="4f51b-147">Поле для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f51b-147">The field to be accessed.</span></span></param>
        <param name="contextType"><span data-ttu-id="4f51b-148">Универсальный тип, к которому относится поле.</span><span class="sxs-lookup"><span data-stu-id="4f51b-148">The generic type the field belongs to.</span></span></param>
        <summary><span data-ttu-id="4f51b-149">Получает токен, допустимый в области текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего поле, к которому должен быть предоставлен доступ из связанного динамического метода; поле относится к указанному универсальному типу.</span><span class="sxs-lookup"><span data-stu-id="4f51b-149">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a field to be accessed from the associated dynamic method; the field is on the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="4f51b-150">Токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к полям в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-150">A token that can be used as the operand of an MSIL instruction that accesses fields in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-151">Необходимо получить маркер для любого поля, будут доступны для динамического метода, связанного с текущим <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-151">You must obtain a token for any field that will be accessed by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4f51b-152">Используйте <xref:System.Type.GetField%2A?displayProperty=nameWithType> метод для получения <xref:System.Reflection.FieldInfo> для поля, требуется доступ, а затем используйте <xref:System.Reflection.FieldInfo.FieldHandle%2A> свойство для получения <xref:System.RuntimeFieldHandle>.</span><span class="sxs-lookup"><span data-stu-id="4f51b-152">Use the <xref:System.Type.GetField%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.FieldInfo> for the field you want to access, and then use the <xref:System.Reflection.FieldInfo.FieldHandle%2A> property to get the <xref:System.RuntimeFieldHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenFor">
      <MemberSignature Language="C#" Value="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTokenFor(valuetype System.RuntimeMethodHandle method, valuetype System.RuntimeTypeHandle contextType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenFor (method As RuntimeMethodHandle, contextType As RuntimeTypeHandle) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTokenFor(RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
      <MemberSignature Language="F#" Value="member this.GetTokenFor : RuntimeMethodHandle * RuntimeTypeHandle -&gt; int" Usage="dynamicILInfo.GetTokenFor (method, contextType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.RuntimeMethodHandle" />
        <Parameter Name="contextType" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="4f51b-153">Метод.</span><span class="sxs-lookup"><span data-stu-id="4f51b-153">The method.</span></span></param>
        <param name="contextType"><span data-ttu-id="4f51b-154">Универсальный тип, к которому принадлежит метод.</span><span class="sxs-lookup"><span data-stu-id="4f51b-154">The generic type the method belongs to.</span></span></param>
        <summary><span data-ttu-id="4f51b-155">Возвращает токен, допустимый в области действия текущего <see cref="T:System.Reflection.Emit.DynamicILInfo" />, представляющего метод в универсальном типе.</span><span class="sxs-lookup"><span data-stu-id="4f51b-155">Gets a token, valid in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" />, representing a method on a generic type.</span></span></summary>
        <returns><span data-ttu-id="4f51b-156">токен, который может быть использован в качестве операнда инструкции MSIL, получающей доступ к методам, таким как <see cref="F:System.Reflection.Emit.OpCodes.Call" /> или <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> в области действия текущего объекта <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-156">A token that can be used as the operand of an MSIL instruction that accesses methods, such as <see cref="F:System.Reflection.Emit.OpCodes.Call" /> or <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, in the scope of the current <see cref="T:System.Reflection.Emit.DynamicILInfo" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-157">Необходимо получить маркер для любого метода, который будет вызываться динамический метод, связанный с текущим <xref:System.Reflection.Emit.DynamicILInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-157">You must obtain a token for any method that will be called by the dynamic method associated with the current <xref:System.Reflection.Emit.DynamicILInfo> object.</span></span> <span data-ttu-id="4f51b-158">Используйте <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> метод для получения <xref:System.Reflection.MethodInfo> для метода, который вы хотите вызвать, а затем используйте <xref:System.Reflection.MethodBase.MethodHandle%2A> свойство для получения <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="4f51b-158">Use the <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.MethodInfo> for the method you want to call, and then use the <xref:System.Reflection.MethodBase.MethodHandle%2A> property to get the <xref:System.RuntimeMethodHandle>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f51b-159">Задает основной текст кода связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-159">Sets the code body of the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte[] code, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8[] code, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCode (code As Byte(), maxStackSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(cli::array &lt;System::Byte&gt; ^ code, int maxStackSize);" />
      <MemberSignature Language="F#" Value="member this.SetCode : byte[] * int -&gt; unit" Usage="dynamicILInfo.SetCode (code, maxStackSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte[]" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="4f51b-160">Массив, который содержит поток MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-160">An array that contains the MSIL stream.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="4f51b-161">Максимальное количество элементов в стеке операторов при выполнении метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-161">The maximum number of items on the operand stack when the method is executing.</span></span></param>
        <summary><span data-ttu-id="4f51b-162">Задает основной текст кода связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-162">Sets the code body of the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-163">Нет проверок допустимости, выполняются в потоке MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-163">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="4f51b-164">Второй вызов этого метода во второй раз заменяет первый поток MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-164">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="4f51b-165">Создание собственных метаданные и MSIL требует знакомства с документацией по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="4f51b-165">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="4f51b-166">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-166">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCode">
      <MemberSignature Language="C#" Value="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCode(unsigned int8* code, int32 codeSize, int32 maxStackSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCode(System::Byte* code, int codeSize, int maxStackSize);" />
      <MemberSignature Language="F#" Value="member this.SetCode : nativeptr&lt;byte&gt; * int * int -&gt; unit" Usage="dynamicILInfo.SetCode (code, codeSize, maxStackSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Byte*" />
        <Parameter Name="codeSize" Type="System.Int32" />
        <Parameter Name="maxStackSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="4f51b-167">Указатель на массив байтов, в котором содержится поток MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-167">A pointer to a byte array containing the MSIL stream.</span></span></param>
        <param name="codeSize"><span data-ttu-id="4f51b-168">Возвращает число байтов потока MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-168">The number of bytes in the MSIL stream.</span></span></param>
        <param name="maxStackSize"><span data-ttu-id="4f51b-169">Максимальное количество элементов в стеке операторов при выполнении метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-169">The maximum number of items on the operand stack when the method is executing.</span></span></param>
        <summary><span data-ttu-id="4f51b-170">Задает основной текст кода связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-170">Sets the code body of the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-171">Нет проверок допустимости, выполняются в потоке MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-171">No validity checks are performed on the MSIL stream.</span></span>  
  
 <span data-ttu-id="4f51b-172">Второй вызов этого метода во второй раз заменяет первый поток MSIL.</span><span class="sxs-lookup"><span data-stu-id="4f51b-172">Calling this method a second time replaces the first MSIL stream with the second.</span></span>  
  
 <span data-ttu-id="4f51b-173">Создание собственных метаданные и MSIL требует знакомства с документацией по Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL.»</span><span class="sxs-lookup"><span data-stu-id="4f51b-173">Generating your own metadata and MSIL requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set."</span></span> <span data-ttu-id="4f51b-174">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-174">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f51b-175"><paramref name="code" /> равно <see langword="null" />, а <paramref name="codeSize" /> больше 0.</span><span class="sxs-lookup"><span data-stu-id="4f51b-175"><paramref name="code" /> is <see langword="null" /> and <paramref name="codeSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4f51b-176">Значение параметра <paramref name="codeSize" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="4f51b-176"><paramref name="codeSize" /> is less than 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="4f51b-177">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-177">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="4f51b-178">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="4f51b-178">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetExceptions">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f51b-179">Задает метаданные исключения для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-179">Sets the exception metadata for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte[] exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8[] exceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetExceptions (exceptions As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(cli::array &lt;System::Byte&gt; ^ exceptions);" />
      <MemberSignature Language="F#" Value="member this.SetExceptions : byte[] -&gt; unit" Usage="dynamicILInfo.SetExceptions exceptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="4f51b-180">Массив, в котором содержатся метаданные исключения.</span><span class="sxs-lookup"><span data-stu-id="4f51b-180">An array that contains the exception metadata.</span></span></param>
        <summary><span data-ttu-id="4f51b-181">Задает метаданные исключения для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-181">Sets the exception metadata for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-182">Метаданные исключения для метода определяют расположение и размер всех `try`, `catch`, `finally`, блоки fault и filter.</span><span class="sxs-lookup"><span data-stu-id="4f51b-182">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="4f51b-183">Дополнительные сведения о макете эти метаданные, см. в документации Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="4f51b-183">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="4f51b-184">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-184">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExceptions">
      <MemberSignature Language="C#" Value="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetExceptions(unsigned int8* exceptions, int32 exceptionsSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetExceptions(System::Byte* exceptions, int exceptionsSize);" />
      <MemberSignature Language="F#" Value="member this.SetExceptions : nativeptr&lt;byte&gt; * int -&gt; unit" Usage="dynamicILInfo.SetExceptions (exceptions, exceptionsSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Byte*" />
        <Parameter Name="exceptionsSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exceptions"><span data-ttu-id="4f51b-185">Указатель на массив байтов, содержащий метаданные исключения.</span><span class="sxs-lookup"><span data-stu-id="4f51b-185">A pointer to a byte array containing the exception metadata.</span></span></param>
        <param name="exceptionsSize"><span data-ttu-id="4f51b-186">Количество байтов в метаданных исключения.</span><span class="sxs-lookup"><span data-stu-id="4f51b-186">The number of bytes of exception metadata.</span></span></param>
        <summary><span data-ttu-id="4f51b-187">Задает метаданные исключения для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-187">Sets the exception metadata for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-188">Метаданные исключения для метода определяют расположение и размер всех `try`, `catch`, `finally`, блоки fault и filter.</span><span class="sxs-lookup"><span data-stu-id="4f51b-188">The exception metadata for a method defines the location and size of all `try`, `catch`, `finally`, filter, and fault blocks.</span></span> <span data-ttu-id="4f51b-189">Дополнительные сведения о макете эти метаданные, см. в документации Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика" и "Раздел III. Набор инструкций CIL".</span><span class="sxs-lookup"><span data-stu-id="4f51b-189">For information on the layout of this metadata, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="4f51b-190">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-190">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f51b-191"><paramref name="exceptions" /> равно <see langword="null" />, а <paramref name="exceptionSize" /> больше 0.</span><span class="sxs-lookup"><span data-stu-id="4f51b-191"><paramref name="exceptions" /> is <see langword="null" /> and <paramref name="exceptionSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4f51b-192">Значение параметра <paramref name="exceptionSize" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="4f51b-192"><paramref name="exceptionSize" /> is less than 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="4f51b-193">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-193">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="4f51b-194">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="4f51b-194">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetLocalSignature">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f51b-195">Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-195">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte[] localSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8[] localSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLocalSignature (localSignature As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(cli::array &lt;System::Byte&gt; ^ localSignature);" />
      <MemberSignature Language="F#" Value="member this.SetLocalSignature : byte[] -&gt; unit" Usage="dynamicILInfo.SetLocalSignature localSignature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="localSignature"><span data-ttu-id="4f51b-196">Массив, содержащий структуру локальных переменных для связанного метода <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-196">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></param>
        <summary><span data-ttu-id="4f51b-197">Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-197">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-198">Подпись локальной переменной описывает структуру локальных переменных метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-198">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="4f51b-199">Для упрощения построения подпись локальной переменной, используйте `static` (`Shared` в Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> метод для получения <xref:System.Reflection.Emit.SignatureHelper> для подписи локальной.</span><span class="sxs-lookup"><span data-stu-id="4f51b-199">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="4f51b-200">Сведения о подписях локальных переменных, см. в документации Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="4f51b-200">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="4f51b-201">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-201">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocalSignature">
      <MemberSignature Language="C#" Value="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLocalSignature(unsigned int8* localSignature, int32 signatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetLocalSignature(System::Byte* localSignature, int signatureSize);" />
      <MemberSignature Language="F#" Value="member this.SetLocalSignature : nativeptr&lt;byte&gt; * int -&gt; unit" Usage="dynamicILInfo.SetLocalSignature (localSignature, signatureSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Emit.Lightweight</AssemblyName>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinmac-3.0;netframework-4.8;netcore-3.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localSignature" Type="System.Byte*" />
        <Parameter Name="signatureSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localSignature"><span data-ttu-id="4f51b-202">Массив, содержащий структуру локальных переменных для связанного метода <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span><span class="sxs-lookup"><span data-stu-id="4f51b-202">An array that contains the layout of local variables for the associated <see cref="T:System.Reflection.Emit.DynamicMethod" />.</span></span></param>
        <param name="signatureSize"><span data-ttu-id="4f51b-203">Число байтов в подписи.</span><span class="sxs-lookup"><span data-stu-id="4f51b-203">The number of bytes in the signature.</span></span></param>
        <summary><span data-ttu-id="4f51b-204">Задает подпись локальной переменной, которая описывает структуру локальных переменных для связанного динамического метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-204">Sets the local variable signature that describes the layout of local variables for the associated dynamic method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f51b-205">Подпись локальной переменной описывает структуру локальных переменных метода.</span><span class="sxs-lookup"><span data-stu-id="4f51b-205">The local variable signature describes the layout of a method's local variables.</span></span> <span data-ttu-id="4f51b-206">Для упрощения построения подпись локальной переменной, используйте `static` (`Shared` в Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> метод для получения <xref:System.Reflection.Emit.SignatureHelper> для подписи локальной.</span><span class="sxs-lookup"><span data-stu-id="4f51b-206">To simplify construction of the local variable signature, use the `static` (`Shared` in Visual Basic) <xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=nameWithType> method to get a <xref:System.Reflection.Emit.SignatureHelper> for the local signature.</span></span>  
  
 <span data-ttu-id="4f51b-207">Сведения о подписях локальных переменных, см. в документации Common Language Infrastructure (CLI), особенно «раздел II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="4f51b-207">For information on local variable signatures, see the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="4f51b-208">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="4f51b-208">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4f51b-209"><paramref name="localSignature" /> равно <see langword="null" />, а <paramref name="signatureSize" /> больше 0.</span><span class="sxs-lookup"><span data-stu-id="4f51b-209"><paramref name="localSignature" /> is <see langword="null" /> and <paramref name="signatureSize" /> is greater than 0.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="4f51b-210">Значение параметра <paramref name="signatureSize" /> меньше 0.</span><span class="sxs-lookup"><span data-stu-id="4f51b-210"><paramref name="signatureSize" /> is less than 0.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="4f51b-211">Требует полного доверия для непосредственного вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="4f51b-211">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="4f51b-212">Этот член не может использоваться частично доверенным или прозрачным кодом.</span><span class="sxs-lookup"><span data-stu-id="4f51b-212">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>