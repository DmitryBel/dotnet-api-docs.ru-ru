<Type Name="OpCodes" FullName="System.Reflection.Emit.OpCodes">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d6d2cd6f31cc97089037cf8c47853b3dd6d37d7e" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/18/2019" /><Meta Name="ms.locfileid" Value="58875584" /></Metadata><TypeSignature Language="C#" Value="public class OpCodes" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OpCodes extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Emit.OpCodes" />
  <TypeSignature Language="VB.NET" Value="Public Class OpCodes" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpCodes" />
  <TypeSignature Language="F#" Value="type OpCodes = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="03b79-101">Содержит поля, предоставляющие инструкции языка MSIL для выпуска элементами класса <see cref="T:System.Reflection.Emit.ILGenerator" /> (например, <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-101">Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <see cref="T:System.Reflection.Emit.ILGenerator" /> class members (such as <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-102">Подробное описание члена кодов операций, особенно см. в документации Common Language Infrastructure (CLI), «раздел III: Набор инструкций CIL» и «секционировать II: Определение метаданных и семантика».</span><span class="sxs-lookup"><span data-stu-id="03b79-102">For a detailed description of the member opcodes, see the Common Language Infrastructure (CLI) documentation, especially "Partition III: CIL Instruction Set" and "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="03b79-103">Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.</span><span class="sxs-lookup"><span data-stu-id="03b79-103">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03b79-104">В следующем примере демонстрируется динамический метод с помощью конструкции <xref:System.Reflection.Emit.ILGenerator> для порождения `OpCodes` в <xref:System.Reflection.Emit.MethodBuilder>.</span><span class="sxs-lookup"><span data-stu-id="03b79-104">The following example demonstrates the construction of a dynamic method using <xref:System.Reflection.Emit.ILGenerator> to emit `OpCodes` into a <xref:System.Reflection.Emit.MethodBuilder>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.OpCodes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.OpCodes Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-105">Складывает два значения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-105">Adds two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-106">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-106">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-107">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-107">Format</span></span>|<span data-ttu-id="03b79-108">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-108">Assembly Format</span></span>|<span data-ttu-id="03b79-109">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-109">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-110">58</span><span class="sxs-lookup"><span data-stu-id="03b79-110">58</span></span>|<span data-ttu-id="03b79-111">add</span><span class="sxs-lookup"><span data-stu-id="03b79-111">add</span></span>|<span data-ttu-id="03b79-112">Добавляет два числовых значения и возвращает новое числовое значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-112">Adds two numeric values, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="03b79-113">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-113">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-114">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-114">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-115">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-115">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-116">`value2` и `value1` извлекаются из стека; `value1` добавляется `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-116">`value2` and `value1` are popped from the stack; `value1` is added to `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-117">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-117">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-118">Переполнение не определяется для операций с целыми числами (для управления переполнением правильный, см. в разделе <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="03b79-118">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Add_Ovf>).</span></span>  
  
 <span data-ttu-id="03b79-119">Дополнение целого числа вместо насыщение заключает в оболочку.</span><span class="sxs-lookup"><span data-stu-id="03b79-119">Integer addition wraps, rather than saturates.</span></span> <span data-ttu-id="03b79-120">Например, при условии, что 8-битовых целых чисел где `value1` составляет 255 и `value2` имеет значение 1, будет получен результат является 0, а не 256.</span><span class="sxs-lookup"><span data-stu-id="03b79-120">For example, assuming 8-bit integers where `value1` is set to 255 and `value2` is set to 1, the wrapped result is 0 rather than 256.</span></span>  
  
 <span data-ttu-id="03b79-121">Возвращает с плавающей запятой переполнения `+inf` (`PositiveInfinity`) или `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="03b79-121">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="03b79-122">В следующей таблице перечислены допустимые типы операндов и их соответствующие типы данных результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-122">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="03b79-123">Если нет записи для сочетания определенного типа (например, `int32` и `float`; `int32` и `int64`), он является недопустимым промежуточного языка MSIL (Microsoft) и выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="03b79-123">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) and generates an error.</span></span>  
  
|<span data-ttu-id="03b79-124">Операнд</span><span class="sxs-lookup"><span data-stu-id="03b79-124">operand</span></span>|<span data-ttu-id="03b79-125">Значение1 типа</span><span class="sxs-lookup"><span data-stu-id="03b79-125">value1 type</span></span>|<span data-ttu-id="03b79-126">Тип value2</span><span class="sxs-lookup"><span data-stu-id="03b79-126">value2 type</span></span>|<span data-ttu-id="03b79-127">Тип результата</span><span class="sxs-lookup"><span data-stu-id="03b79-127">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="03b79-128">add</span><span class="sxs-lookup"><span data-stu-id="03b79-128">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="03b79-129">add</span><span class="sxs-lookup"><span data-stu-id="03b79-129">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="03b79-130">add</span><span class="sxs-lookup"><span data-stu-id="03b79-130">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="03b79-131">add</span><span class="sxs-lookup"><span data-stu-id="03b79-131">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="03b79-132">add</span><span class="sxs-lookup"><span data-stu-id="03b79-132">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="03b79-133">add</span><span class="sxs-lookup"><span data-stu-id="03b79-133">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="03b79-134">add</span><span class="sxs-lookup"><span data-stu-id="03b79-134">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="03b79-135">add</span><span class="sxs-lookup"><span data-stu-id="03b79-135">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="03b79-136">add</span><span class="sxs-lookup"><span data-stu-id="03b79-136">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="03b79-137">add</span><span class="sxs-lookup"><span data-stu-id="03b79-137">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="03b79-138">add</span><span class="sxs-lookup"><span data-stu-id="03b79-138">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="03b79-139">add</span><span class="sxs-lookup"><span data-stu-id="03b79-139">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="03b79-140">add</span><span class="sxs-lookup"><span data-stu-id="03b79-140">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="03b79-141">add</span><span class="sxs-lookup"><span data-stu-id="03b79-141">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="03b79-142">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `add` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-142">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-143">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-143">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-144">Складывает два целых числа, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-144">Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-145">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-145">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-146">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-146">Format</span></span>|<span data-ttu-id="03b79-147">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-147">Assembly Format</span></span>|<span data-ttu-id="03b79-148">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-148">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-149">D6</span><span class="sxs-lookup"><span data-stu-id="03b79-149">D6</span></span>|<span data-ttu-id="03b79-150">Add.ovf</span><span class="sxs-lookup"><span data-stu-id="03b79-150">add.ovf</span></span>|<span data-ttu-id="03b79-151">Складывает два значения целого числа со знаком с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-151">Adds two signed integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="03b79-152">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-152">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-153">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-153">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-154">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-154">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-155">`value2` и `value1` извлекаются из стека; `value1` добавляется `value2` с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-155">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="03b79-156">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-156">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-157"><xref:System.OverflowException> возникает, если результат не представлен в тип результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-157"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-158">Этой операции над знаковыми целочисленными значениями.</span><span class="sxs-lookup"><span data-stu-id="03b79-158">You can perform this operation on signed integers.</span></span> <span data-ttu-id="03b79-159">Для значений с плавающей запятой, используйте <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="03b79-159">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="03b79-160">В следующей таблице перечислены допустимые типы операндов и их соответствующие типы данных результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-160">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="03b79-161">Если нет записи для сочетания определенного типа (например, `int32` и `float`; `int32` и `int64`), он имеет недопустимую инструкцию языка MSIL (Microsoft Intermediate) и выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="03b79-161">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="03b79-162">Операнд</span><span class="sxs-lookup"><span data-stu-id="03b79-162">operand</span></span>|<span data-ttu-id="03b79-163">Значение1 типа</span><span class="sxs-lookup"><span data-stu-id="03b79-163">value1 type</span></span>|<span data-ttu-id="03b79-164">Тип value2</span><span class="sxs-lookup"><span data-stu-id="03b79-164">value2 type</span></span>|<span data-ttu-id="03b79-165">Тип результата</span><span class="sxs-lookup"><span data-stu-id="03b79-165">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="03b79-166">add</span><span class="sxs-lookup"><span data-stu-id="03b79-166">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="03b79-167">add</span><span class="sxs-lookup"><span data-stu-id="03b79-167">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="03b79-168">add</span><span class="sxs-lookup"><span data-stu-id="03b79-168">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="03b79-169">add</span><span class="sxs-lookup"><span data-stu-id="03b79-169">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="03b79-170">add</span><span class="sxs-lookup"><span data-stu-id="03b79-170">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="03b79-171">add</span><span class="sxs-lookup"><span data-stu-id="03b79-171">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="03b79-172">add</span><span class="sxs-lookup"><span data-stu-id="03b79-172">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="03b79-173">add</span><span class="sxs-lookup"><span data-stu-id="03b79-173">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="03b79-174">add</span><span class="sxs-lookup"><span data-stu-id="03b79-174">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="03b79-175">add</span><span class="sxs-lookup"><span data-stu-id="03b79-175">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="03b79-176">add</span><span class="sxs-lookup"><span data-stu-id="03b79-176">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="03b79-177">add</span><span class="sxs-lookup"><span data-stu-id="03b79-177">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="03b79-178">add</span><span class="sxs-lookup"><span data-stu-id="03b79-178">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="03b79-179">add</span><span class="sxs-lookup"><span data-stu-id="03b79-179">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="03b79-180">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `add.ovf` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-180">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-181">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-181">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Add_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Add_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Add_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Add_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Add_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-182">Складывает два целочисленных значения без знака, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-182">Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-183">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-183">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-184">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-184">Format</span></span>|<span data-ttu-id="03b79-185">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-185">Assembly Format</span></span>|<span data-ttu-id="03b79-186">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-186">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-187">D7</span><span class="sxs-lookup"><span data-stu-id="03b79-187">D7</span></span>|<span data-ttu-id="03b79-188">Add.ovf.un</span><span class="sxs-lookup"><span data-stu-id="03b79-188">add.ovf.un</span></span>|<span data-ttu-id="03b79-189">Складывает два значения целого числа без знака, с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-189">Adds two unsigned integer values with an overflow check.</span></span>|  
  
 <span data-ttu-id="03b79-190">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-190">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-191">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-191">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-192">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-192">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-193">`value2` и `value1` извлекаются из стека; `value1` добавляется `value2` с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-193">`value2` and `value1` are popped from the stack; `value1` is added to `value2` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="03b79-194">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-194">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-195"><xref:System.OverflowException> возникает, если результат не представлен в тип результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-195"><xref:System.OverflowException> is thrown if the result is not represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-196">Этой операции над знаковыми целочисленными значениями.</span><span class="sxs-lookup"><span data-stu-id="03b79-196">You can perform this operation on signed integers.</span></span> <span data-ttu-id="03b79-197">Для значений с плавающей запятой, используйте <xref:System.Reflection.Emit.OpCodes.Add>.</span><span class="sxs-lookup"><span data-stu-id="03b79-197">For floating-point values, use <xref:System.Reflection.Emit.OpCodes.Add>.</span></span>  
  
 <span data-ttu-id="03b79-198">В следующей таблице перечислены допустимые типы операндов и их соответствующие типы данных результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-198">The acceptable operand types and their corresponding result data type are listed in the table below.</span></span> <span data-ttu-id="03b79-199">Если нет записи для сочетания определенного типа (например, `int32` и `float`; `int32` и `int64`), он имеет недопустимую инструкцию языка MSIL (Microsoft Intermediate) и выдает ошибку.</span><span class="sxs-lookup"><span data-stu-id="03b79-199">If there is no entry for a particular type combination (for example, `int32` and `float`; `int32` and `int64`), it is an invalid Microsoft Intermediate Language (MSIL) instruction and generates an error.</span></span>  
  
|<span data-ttu-id="03b79-200">Операнд</span><span class="sxs-lookup"><span data-stu-id="03b79-200">operand</span></span>|<span data-ttu-id="03b79-201">Значение1 типа</span><span class="sxs-lookup"><span data-stu-id="03b79-201">value1 type</span></span>|<span data-ttu-id="03b79-202">Тип value2</span><span class="sxs-lookup"><span data-stu-id="03b79-202">value2 type</span></span>|<span data-ttu-id="03b79-203">Тип результата</span><span class="sxs-lookup"><span data-stu-id="03b79-203">result type</span></span>|  
|-------------|-----------------|-----------------|-----------------|  
|<span data-ttu-id="03b79-204">add</span><span class="sxs-lookup"><span data-stu-id="03b79-204">add</span></span>|`int32`|`int32`|`int32`|  
|<span data-ttu-id="03b79-205">add</span><span class="sxs-lookup"><span data-stu-id="03b79-205">add</span></span>|`int32`|`native int`|`native int`|  
|<span data-ttu-id="03b79-206">add</span><span class="sxs-lookup"><span data-stu-id="03b79-206">add</span></span>|`int32`|`&`|`&`|  
|<span data-ttu-id="03b79-207">add</span><span class="sxs-lookup"><span data-stu-id="03b79-207">add</span></span>|`int32`|`*`|`*`|  
|<span data-ttu-id="03b79-208">add</span><span class="sxs-lookup"><span data-stu-id="03b79-208">add</span></span>|`int64`|`int64`|`int64`|  
|<span data-ttu-id="03b79-209">add</span><span class="sxs-lookup"><span data-stu-id="03b79-209">add</span></span>|`native int`|`int32`|`native int`|  
|<span data-ttu-id="03b79-210">add</span><span class="sxs-lookup"><span data-stu-id="03b79-210">add</span></span>|`native int`|`native int`|`native int`|  
|<span data-ttu-id="03b79-211">add</span><span class="sxs-lookup"><span data-stu-id="03b79-211">add</span></span>|`native int`|`&`|`&`|  
|<span data-ttu-id="03b79-212">add</span><span class="sxs-lookup"><span data-stu-id="03b79-212">add</span></span>|`native int`|`*`|`*`|  
|<span data-ttu-id="03b79-213">add</span><span class="sxs-lookup"><span data-stu-id="03b79-213">add</span></span>|`F`|`F`|`F`|  
|<span data-ttu-id="03b79-214">add</span><span class="sxs-lookup"><span data-stu-id="03b79-214">add</span></span>|`&`|`int32`|`&`|  
|<span data-ttu-id="03b79-215">add</span><span class="sxs-lookup"><span data-stu-id="03b79-215">add</span></span>|`&`|`native int`|`&`|  
|<span data-ttu-id="03b79-216">add</span><span class="sxs-lookup"><span data-stu-id="03b79-216">add</span></span>|`*`|`int32`|`*`|  
|<span data-ttu-id="03b79-217">add</span><span class="sxs-lookup"><span data-stu-id="03b79-217">add</span></span>|`*`|`native int`|`*`|  
  
 <span data-ttu-id="03b79-218">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `add.ovf.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-218">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `add.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-219">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-219">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode And;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode And" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.And" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly And As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode And;" />
      <MemberSignature Language="F#" Value=" staticval mutable And : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.And" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-220">Вычисляет побитовое И двух значений и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-220">Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-221">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-221">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-222">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-222">Format</span></span>|<span data-ttu-id="03b79-223">Инструкция</span><span class="sxs-lookup"><span data-stu-id="03b79-223">Instruction</span></span>|<span data-ttu-id="03b79-224">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-224">Description</span></span>|  
|------------|-----------------|-----------------|  
|<span data-ttu-id="03b79-225">5F</span><span class="sxs-lookup"><span data-stu-id="03b79-225">5F</span></span>|<span data-ttu-id="03b79-226">и</span><span class="sxs-lookup"><span data-stu-id="03b79-226">and</span></span>|<span data-ttu-id="03b79-227">Вычисляет побитовое и двух целочисленных значений.</span><span class="sxs-lookup"><span data-stu-id="03b79-227">Determines the bitwise AND of two integer values.</span></span>|  
  
 <span data-ttu-id="03b79-228">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-228">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-229">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-229">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-230">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-230">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-231">`value1` и `value2` извлекаются из стека; вычисляется побитовое и двух значений.</span><span class="sxs-lookup"><span data-stu-id="03b79-231">`value1` and `value2` are popped from the stack; the bitwise AND of the two values is computed.</span></span>  
  
4.  <span data-ttu-id="03b79-232">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-232">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-233">`and` Инструкция вычисляет побитовое и двух верхних значений в стеке и оставляет результат в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-233">The `and` instruction computes the bitwise AND of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="03b79-234">`And` представляет собой операцию целыми числами.</span><span class="sxs-lookup"><span data-stu-id="03b79-234">`And` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="03b79-235">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `and` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-235">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `and` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-236">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-236">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Arglist">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Arglist;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Arglist" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Arglist" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Arglist As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Arglist;" />
      <MemberSignature Language="F#" Value=" staticval mutable Arglist : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Arglist" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-237">Возвращает неуправляемый указатель на список аргументов текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-237">Returns an unmanaged pointer to the argument list of the current method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-238">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-238">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-239">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-239">Format</span></span>|<span data-ttu-id="03b79-240">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-240">Assembly Format</span></span>|<span data-ttu-id="03b79-241">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-241">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-242">FE 00</span><span class="sxs-lookup"><span data-stu-id="03b79-242">FE 00</span></span>|<span data-ttu-id="03b79-243">arglist</span><span class="sxs-lookup"><span data-stu-id="03b79-243">arglist</span></span>|<span data-ttu-id="03b79-244">Возвращает дескриптор списка аргументов для текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-244">Returns an argument list handle for the current method.</span></span>|  
  
 <span data-ttu-id="03b79-245">По этой операции выполняются не стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-245">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="03b79-246">`arglist` Инструкция возвращает непрозрачный дескриптор (неуправляемый указатель, типа `native int`), представляющий список аргументов текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-246">The `arglist` instruction returns an opaque handle (an unmanaged pointer, of type `native int`) that represents the argument list of the current method.</span></span> <span data-ttu-id="03b79-247">Этот дескриптор допустим только в течение времени существования текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-247">This handle is valid only during the lifetime of the current method.</span></span> <span data-ttu-id="03b79-248">Тем не менее, можно Передайте дескриптор для других методов, до тех пор, пока текущий метод является в потоке управления.</span><span class="sxs-lookup"><span data-stu-id="03b79-248">You can, however, pass the handle to other methods as long as the current method is on the thread of control.</span></span> <span data-ttu-id="03b79-249">Может выполняться только `arglist` инструкции в пределах метода, который принимает переменное число аргументов.</span><span class="sxs-lookup"><span data-stu-id="03b79-249">You can only execute the `arglist` instruction within a method that takes a variable number of arguments.</span></span>  
  
 <span data-ttu-id="03b79-250">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `arglist` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-250">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `arglist` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-251">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-251">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-252">Передает управление конечной инструкции, если два значения равны.</span><span class="sxs-lookup"><span data-stu-id="03b79-252">Transfers control to a target instruction if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-253">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-253">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-254">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-254">Format</span></span>|<span data-ttu-id="03b79-255">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-255">Assembly Format</span></span>|<span data-ttu-id="03b79-256">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-256">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-257">3B < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-257">3B < `int32` ></span></span>|<span data-ttu-id="03b79-258">beq `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-258">beq `target`</span></span>|<span data-ttu-id="03b79-259">Выполняет переход к целевой инструкции по смещению `target` Если два значения равны.</span><span class="sxs-lookup"><span data-stu-id="03b79-259">Branch to the target instruction at offset `target` if the two values are equal.</span></span>|  
  
 <span data-ttu-id="03b79-260">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-260">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-261">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-261">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-262">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-262">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-263">`value2` и `value1` извлекаются из стека; если `value1` равен `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-263">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-264">`beq` Инструкция передает управление указанной конечной инструкции, если `value1` равен `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-264">The `beq` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="03b79-265">Действует так же, как выполнение `ceq` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-265">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-266">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-266">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-267">Допустимые типы операндов инкапсулированы ниже.</span><span class="sxs-lookup"><span data-stu-id="03b79-267">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="03b79-268">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-268">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="03b79-269">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция (таких передач серьезно ограничены. их необходимо использовать <xref:System.Reflection.Emit.OpCodes.Leave> инструкции вместо этого).</span><span class="sxs-lookup"><span data-stu-id="03b79-269">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="03b79-270">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `beq` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-270">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-271">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-271">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Beq_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Beq_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Beq_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Beq_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Beq_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Beq_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-272">Передает управление конечной инструкции (короткая форма), если два значения равны.</span><span class="sxs-lookup"><span data-stu-id="03b79-272">Transfers control to a target instruction (short form) if two values are equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-273">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-273">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-274">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-274">Format</span></span>|<span data-ttu-id="03b79-275">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-275">Assembly Format</span></span>|<span data-ttu-id="03b79-276">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-276">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-277">2E < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-277">2E < `int8` ></span></span>|<span data-ttu-id="03b79-278">beq.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-278">beq.s `target`</span></span>|<span data-ttu-id="03b79-279">Выполняет переход к целевой инструкции по смещению `target` Если объекты равны, краткая форма</span><span class="sxs-lookup"><span data-stu-id="03b79-279">Branch to the target instruction at offset `target` if equal, short form</span></span>|  
  
 <span data-ttu-id="03b79-280">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-280">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-281">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-281">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-282">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-282">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-283">`value2` и `value1` извлекаются из стека; если `value1` равен `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-283">`value2` and `value1` are popped from the stack; if `value1` is equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-284">`beq.s` Инструкция передает управление указанной конечной инструкции, если `value1` равен `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-284">The `beq.s` instruction transfers control to the specified target instruction if `value1` is equal to `value2`.</span></span> <span data-ttu-id="03b79-285">Действует так же, как выполнение `ceq` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-285">The effect is the same as performing a `ceq` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-286">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-286">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-287">Допустимые типы операндов инкапсулированы ниже.</span><span class="sxs-lookup"><span data-stu-id="03b79-287">The acceptable operand types are encapsulated below:</span></span>  
  
 <span data-ttu-id="03b79-288">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-288">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="03b79-289">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция (таких передач серьезно ограничены. их необходимо использовать <xref:System.Reflection.Emit.OpCodes.Leave> инструкции вместо этого).</span><span class="sxs-lookup"><span data-stu-id="03b79-289">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction (such transfers are severely restricted and must use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction instead).</span></span>  
  
 <span data-ttu-id="03b79-290">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `beq.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-290">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `beq.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-291">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-291">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-292">Передает управление конечной инструкции, если первое значение больше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="03b79-292">Transfers control to a target instruction if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-293">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-293">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-294">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-294">Format</span></span>|<span data-ttu-id="03b79-295">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-295">Assembly Format</span></span>|<span data-ttu-id="03b79-296">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-296">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-297">3C `<int32>`</span><span class="sxs-lookup"><span data-stu-id="03b79-297">3C `<int32>`</span></span>|<span data-ttu-id="03b79-298">bge `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-298">bge `target`</span></span>|<span data-ttu-id="03b79-299">Ветвь конечной инструкции с указанным смещением, если первое значение больше или равно значению второго.</span><span class="sxs-lookup"><span data-stu-id="03b79-299">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="03b79-300">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-300">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-301">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-301">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-302">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-302">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-303">`value2` и `value1` извлекаются из стека; если `value1` больше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-303">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-304">`bge` Инструкция передает управление указанной конечной инструкции, если `value1` больше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-304">The `bge` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="03b79-305">Аналогично выполнению `clt.un` инструкции, за которым следует `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-305">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-306">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-306">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-307">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-307">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-308">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-308">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-309">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bge` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-309">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-310">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-310">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-311">Передает управление конечной инструкции (короткая форма), если первое значение больше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="03b79-311">Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-312">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-312">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-313">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-313">Format</span></span>|<span data-ttu-id="03b79-314">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-314">Assembly Format</span></span>|<span data-ttu-id="03b79-315">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-315">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-316">2F `<int8>`</span><span class="sxs-lookup"><span data-stu-id="03b79-316">2F `<int8>`</span></span>|<span data-ttu-id="03b79-317">bge.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-317">bge.s `target`</span></span>|<span data-ttu-id="03b79-318">Выполняет переход к конечной инструкции с указанным смещением, если первое значение больше или равно значению второго, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-318">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="03b79-319">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-319">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-320">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-320">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-321">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-321">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-322">`value2` и `value1` извлекаются из стека; если `value1` больше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-322">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-323">`bge.s` Инструкция передает управление указанной конечной инструкции, если `value1` больше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-323">The `bge.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`.</span></span> <span data-ttu-id="03b79-324">Аналогично выполнению `clt.un` инструкции, за которым следует `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-324">The effect is identical to performing a `clt.un` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-325">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-325">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-326">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-326">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-327">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-327">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-328">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bge.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-328">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-329">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-329">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-330">Передает управление конечной инструкции, если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-330">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-331">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-331">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-332">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-332">Format</span></span>|<span data-ttu-id="03b79-333">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-333">Assembly Format</span></span>|<span data-ttu-id="03b79-334">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-334">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-335">41 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="03b79-335">41 `<int32>`</span></span>|<span data-ttu-id="03b79-336">bge.un `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-336">bge.un `target`</span></span>|<span data-ttu-id="03b79-337">Выполняет переход к конечной инструкции с указанным смещением, если первое значение больше или равно значению второго (значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-337">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-338">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-338">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-339">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-339">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-340">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-340">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-341">`value2` и `value1` извлекаются из стека; если `value1` больше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-341">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-342">`bge.un` Инструкция передает управление указанной конечной инструкции, если `value1` больше или равно `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-342">The `bge.un` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-343">Аналогично выполнению `clt` инструкции, за которым следует `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-343">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-344">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-344">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-345">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-345">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-346">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-346">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-347">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bge.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-348">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-348">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bge_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bge_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bge_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bge_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bge_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bge_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-349">Передает управление конечной инструкции (короткая форма), если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-349">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-350">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-351">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-351">Format</span></span>|<span data-ttu-id="03b79-352">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-352">Assembly Format</span></span>|<span data-ttu-id="03b79-353">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-354">34 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-354">34 < `int8` ></span></span>|<span data-ttu-id="03b79-355">bge.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-355">bge.un.s `target`</span></span>|<span data-ttu-id="03b79-356">Выполняет переход к конечной инструкции с указанным смещением, если первое значение больше или равно ему (для значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-356">Branch to the target instruction at the specified offset if the first value is greater than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="03b79-357">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-358">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-358">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-359">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-359">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-360">`value2` и `value1` извлекаются из стека; если `value1` больше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-360">`value2` and `value1` are popped from the stack; if `value1` is greater than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-361">`bge.un.s` Инструкция передает управление указанной конечной инструкции, если `value1` больше или равно `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-361">The `bge.un.s` instruction transfers control to the specified target instruction if `value1` is greater than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-362">Аналогично выполнению `clt` инструкции, за которым следует `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-362">The effect is identical to performing a `clt` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-363">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-363">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-364">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-364">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-365">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-365">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-366">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bge.un.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-366">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bge.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-367">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-367">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-368">Передает управление конечной инструкции, если первое значение больше второго.</span><span class="sxs-lookup"><span data-stu-id="03b79-368">Transfers control to a target instruction if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-369">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-370">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-370">Format</span></span>|<span data-ttu-id="03b79-371">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-371">Assembly Format</span></span>|<span data-ttu-id="03b79-372">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-373">3D < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-373">3D < `int32` ></span></span>|<span data-ttu-id="03b79-374">bgt `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-374">bgt `target`</span></span>|<span data-ttu-id="03b79-375">Выполняет переход к конечной инструкции с указанным смещением, если первое значение больше, чем значение второго.</span><span class="sxs-lookup"><span data-stu-id="03b79-375">Branch to the target instruction at the specified offset if the first value is greater than the second value.</span></span>|  
  
 <span data-ttu-id="03b79-376">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-376">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-377">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-377">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-378">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-378">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-379">`value2` и `value1` извлекаются из стека; если `value1` больше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-379">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-380">`bgt` Инструкция передает управление указанной конечной инструкции, если `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-380">The `bgt` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="03b79-381">Аналогично выполнению `cgt` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-381">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-382">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-382">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-383">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-383">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-384">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-384">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-385">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bgt` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-385">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-386">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-386">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-387">Передает управление конечной инструкции (короткая форма), если первое значение больше второго.</span><span class="sxs-lookup"><span data-stu-id="03b79-387">Transfers control to a target instruction (short form) if the first value is greater than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-388">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-388">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-389">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-389">Format</span></span>|<span data-ttu-id="03b79-390">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-390">Assembly Format</span></span>|<span data-ttu-id="03b79-391">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-391">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-392">30 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-392">30 < `int8` ></span></span>|<span data-ttu-id="03b79-393">bgt.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-393">bgt.s `target`</span></span>|<span data-ttu-id="03b79-394">Ветвь конечной инструкции с указанным смещением, если первое значение больше, чем значение второго краткую форму.</span><span class="sxs-lookup"><span data-stu-id="03b79-394">Branch to the target instruction at the specified offset if the first value is greater than the second value, short form.</span></span>|  
  
 <span data-ttu-id="03b79-395">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-395">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-396">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-396">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-397">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-397">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-398">`value2` и `value1` извлекаются из стека; если `value1` больше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-398">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-399">`bgt.s` Инструкция передает управление указанной конечной инструкции, если `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-399">The `bgt.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`.</span></span> <span data-ttu-id="03b79-400">Аналогично выполнению `cgt` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-400">The effect is identical to performing a `cgt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-401">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-401">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-402">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-402">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-403">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-403">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-404">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bgt.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-404">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-405">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-405">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-406">Передает управление конечной инструкции, если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-406">Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-407">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-407">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-408">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-408">Format</span></span>|<span data-ttu-id="03b79-409">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-409">Assembly Format</span></span>|<span data-ttu-id="03b79-410">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-410">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-411">42 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-411">42 < `int32` ></span></span>|<span data-ttu-id="03b79-412">bgt.un `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-412">bgt.un `target`</span></span>|<span data-ttu-id="03b79-413">Выполняет переход к конечной инструкции с указанным смещением, если первое значение больше, чем значение второго (значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-413">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-414">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-414">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-415">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-415">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-416">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-416">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-417">`value2` и `value1` извлекаются из стека; если `value1` больше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-417">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-418">`bgt.un` Инструкция передает управление указанной конечной инструкции, если `value1` больше, чем `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-418">The `bgt.un` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-419">Аналогично выполнению `cgt.un` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-419">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-420">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-420">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-421">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-421">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-422">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-422">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-423">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bgt.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-423">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-424">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-424">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bgt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bgt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bgt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bgt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bgt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bgt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-425">Передает управление конечной инструкции (короткая форма), если первое значение больше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-425">Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-426">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-426">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-427">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-427">Format</span></span>|<span data-ttu-id="03b79-428">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-428">Assembly Format</span></span>|<span data-ttu-id="03b79-429">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-429">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-430">35 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-430">35 < `int8` ></span></span>|<span data-ttu-id="03b79-431">bgt.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-431">bgt.un.s `target`</span></span>|<span data-ttu-id="03b79-432">Ветвь конечной инструкции с указанным смещением, если первое значение больше, чем (для значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-432">Branch to the target instruction at the specified offset if the first value is greater than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="03b79-433">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-433">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-434">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-434">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-435">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-435">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-436">`value2` и `value1` извлекаются из стека; если `value1` больше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-436">`value2` and `value1` are popped from the stack; if `value1` is greater than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-437">`bgt.un.s` Инструкция передает управление указанной конечной инструкции, если `value1` больше, чем `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-437">The `bgt.un.s` instruction transfers control to the specified target instruction if `value1` is greater than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-438">Аналогично выполнению `cgt.un` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-438">The effect is identical to performing a `cgt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-439">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-439">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-440">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-440">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-441">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-441">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-442">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bgt.un.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-442">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bgt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-443">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-443">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-444">Передает управление конечной инструкции, если первое значение меньше второго значения или равно ему.</span><span class="sxs-lookup"><span data-stu-id="03b79-444">Transfers control to a target instruction if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-445">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-445">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-446">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-446">Format</span></span>|<span data-ttu-id="03b79-447">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-447">Assembly Format</span></span>|<span data-ttu-id="03b79-448">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-448">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-449">3E `<int32>`</span><span class="sxs-lookup"><span data-stu-id="03b79-449">3E `<int32>`</span></span>|<span data-ttu-id="03b79-450">ble `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-450">ble `target`</span></span>|<span data-ttu-id="03b79-451">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше или равно значению второго.</span><span class="sxs-lookup"><span data-stu-id="03b79-451">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value.</span></span>|  
  
 <span data-ttu-id="03b79-452">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-452">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-453">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-453">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-454">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-454">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-455">`value2` и `value1` извлекаются из стека; если `value1` меньше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-455">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-456">`ble` Инструкция передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-456">The `ble` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="03b79-457">Аналогично выполнению `cgt` инструкции (`cgt.un` для числа с плавающей запятой) следуют `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-457">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-458">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-458">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-459">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-459">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-460">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-460">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-461">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ble` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-461">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-462">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-462">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-463">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго или равно ему.</span><span class="sxs-lookup"><span data-stu-id="03b79-463">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-464">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-464">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-465">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-465">Format</span></span>|<span data-ttu-id="03b79-466">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-466">Assembly Format</span></span>|<span data-ttu-id="03b79-467">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-467">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-468">31 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="03b79-468">31 `<int8>`</span></span>|<span data-ttu-id="03b79-469">ble.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-469">ble.s `target`</span></span>|<span data-ttu-id="03b79-470">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше или равно значению второго, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-470">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value, short form.</span></span>|  
  
 <span data-ttu-id="03b79-471">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-471">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-472">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-472">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-473">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-473">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-474">`value2` и `value1` извлекаются из стека; если `value1` меньше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-474">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-475">`ble.s` Инструкция передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-475">The `ble.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="03b79-476">Аналогично выполнению `cgt` инструкции (`cgt.un` для числа с плавающей запятой) инструкции, за которым следует`brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-476">The effect is identical to performing a `cgt` instruction (`cgt.un` for floats) instruction followed by a`brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-477">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-477">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-478">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-478">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-479">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-479">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-480">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ble.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-481">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-481">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-482">Передает управление конечной инструкции, если первое значение меньше второго или равно ему (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-482">Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-483">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-484">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-484">Format</span></span>|<span data-ttu-id="03b79-485">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-485">Assembly Format</span></span>|<span data-ttu-id="03b79-486">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-487">43 `<int32>`</span><span class="sxs-lookup"><span data-stu-id="03b79-487">43 `<int32>`</span></span>|<span data-ttu-id="03b79-488">ble.un `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-488">ble.un `target`</span></span>|<span data-ttu-id="03b79-489">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше или равно значению второго (значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-489">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-490">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-491">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-491">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-492">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-492">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-493">`value2` и `value1` извлекаются из стека; если `value1` меньше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-493">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-494">`ble.un` Инструкция передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-494">The `ble.un` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-495">Аналогично выполнению `cgt.un` инструкции (`cgt` для числа с плавающей запятой) следуют `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-495">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-496">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-496">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-497">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-497">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-498">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-498">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-499">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ble.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-499">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-500">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-500">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ble_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ble_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ble_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ble_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ble_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ble_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-501">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго или равно ему (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-501">Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-502">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-502">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-503">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-503">Format</span></span>|<span data-ttu-id="03b79-504">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-504">Assembly Format</span></span>|<span data-ttu-id="03b79-505">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-505">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-506">36 `<int8>`</span><span class="sxs-lookup"><span data-stu-id="03b79-506">36 `<int8>`</span></span>|<span data-ttu-id="03b79-507">ble.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-507">ble.un.s `target`</span></span>|<span data-ttu-id="03b79-508">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше или равно ему (для значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-508">Branch to the target instruction at the specified offset if the first value is less than or equal to the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="03b79-509">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-509">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-510">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-510">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-511">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-511">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-512">`value2` и `value1` извлекаются из стека; если `value1` меньше или равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-512">`value2` and `value1` are popped from the stack; if `value1` is less than or equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-513">`ble.un.s` Инструкция передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-513">The `ble.un.s` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-514">Аналогично выполнению `cgt.un` инструкции (`cgt` для числа с плавающей запятой) следуют `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-514">The effect is identical to performing a `cgt.un` instruction (`cgt` for floats) followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-515">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-515">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-516">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-516">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-517">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-517">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-518">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ble.un.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-518">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ble.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-519">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-519">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-520">Передает управление конечной инструкции, если первое значение меньше второго.</span><span class="sxs-lookup"><span data-stu-id="03b79-520">Transfers control to a target instruction if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-521">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-521">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-522">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-522">Format</span></span>|<span data-ttu-id="03b79-523">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-523">Assembly Format</span></span>|<span data-ttu-id="03b79-524">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-524">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-525">3F < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-525">3F < `int32` ></span></span>|<span data-ttu-id="03b79-526">инструкцию blt `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-526">blt `target`</span></span>|<span data-ttu-id="03b79-527">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше второго значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-527">Branch to the target instruction at the specified offset if the first value is less than the second value.</span></span>|  
  
 <span data-ttu-id="03b79-528">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-528">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-529">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-529">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-530">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-530">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-531">`value2` и `value1` извлекаются из стека; если `value1` — меньше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-531">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-532">`blt` Инструкция передает управление указанной конечной инструкции, если `value1` меньше или равно `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-532">The `blt` instruction transfers control to the specified target instruction if `value1` is less than or equal to `value2`.</span></span> <span data-ttu-id="03b79-533">Аналогично выполнению `clt` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-533">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-534">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-534">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-535">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-535">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-536">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-536">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-537">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `blt` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-537">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-538">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-538">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-539">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-539">Transfers control to a target instruction (short form) if the first value is less than the second value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-540">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-540">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-541">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-541">Format</span></span>|<span data-ttu-id="03b79-542">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-542">Assembly Format</span></span>|<span data-ttu-id="03b79-543">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-543">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-544">32 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-544">32 < `int8` ></span></span>|<span data-ttu-id="03b79-545">BLT.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-545">blt.s `target`</span></span>|<span data-ttu-id="03b79-546">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше второго, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-546">Branch to the target instruction at the specified offset if the first value is less than the second value, short form.</span></span>|  
  
 <span data-ttu-id="03b79-547">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-547">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-548">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-548">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-549">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-549">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-550">`value2` и `value1` извлекаются из стека; если `value1` — меньше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-550">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-551">`blt.s` Инструкция передает управление указанной конечной инструкции, если `value1` — меньше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-551">The `blt.s` instruction transfers control to the specified target instruction if `value1` is less than `value2`.</span></span> <span data-ttu-id="03b79-552">Аналогично выполнению `clt` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-552">The effect is identical to performing a `clt` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-553">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-553">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-554">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-554">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-555">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-555">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-556">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `blt.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-556">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-557">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-557">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-558">Передает управление конечной инструкции, если первое значение меньше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-558">Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-559">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-559">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-560">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-560">Format</span></span>|<span data-ttu-id="03b79-561">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-561">Assembly Format</span></span>|<span data-ttu-id="03b79-562">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-562">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-563">44 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-563">44 < `int32` ></span></span>|<span data-ttu-id="03b79-564">BLT.un `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-564">blt.un `target`</span></span>|<span data-ttu-id="03b79-565">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше второго значения (значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-565">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-566">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-566">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-567">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-567">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-568">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-568">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-569">`value2` и `value1` извлекаются из стека; если `value1` — меньше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-569">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-570">`blt.un` Инструкция передает управление указанной конечной инструкции, если `value1` — меньше, чем `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-570">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-571">Аналогично выполнению `clt.un` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-571">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-572">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-572">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-573">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-573">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-574">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-574">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-575">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `blt.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-575">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-576">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-576">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blt_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Blt_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Blt_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Blt_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Blt_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Blt_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-577">Передает управление конечной инструкции (короткая форма), если первое значение меньше второго (при сравнении целочисленных значений без знака или неупорядоченных значений с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-577">Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-578">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-578">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-579">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-579">Format</span></span>|<span data-ttu-id="03b79-580">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-580">Assembly Format</span></span>|<span data-ttu-id="03b79-581">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-581">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-582">37 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-582">37 < `int8` ></span></span>|<span data-ttu-id="03b79-583">BLT.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-583">blt.un.s `target`</span></span>|<span data-ttu-id="03b79-584">Выполняет переход к конечной инструкции с указанным смещением, если первое значение меньше второго значения (значений без знака), краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-584">Branch to the target instruction at the specified offset if the first value is less than the second value (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="03b79-585">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-585">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-586">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-586">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-587">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-587">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-588">`value2` и `value1` извлекаются из стека; если `value1` — меньше, чем `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-588">`value2` and `value1` are popped from the stack; if `value1` is less than `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-589">`blt.un` Инструкция передает управление указанной конечной инструкции, если `value1` — меньше, чем `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-589">The `blt.un` instruction transfers control to the specified target instruction if `value1` is less than `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-590">Аналогично выполнению `clt.un` инструкции, за которым следует `brtrue` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-590">The effect is identical to performing a `clt.un` instruction followed by a `brtrue` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-591">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-591">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-592">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-592">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-593">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-593">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-594">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `blt.un.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-594">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `blt.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-595">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-595">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-596">Передает управление конечной инструкции в случае неравенства двух целочисленных значений без знака или двух неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="03b79-596">Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-597">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-597">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-598">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-598">Format</span></span>|<span data-ttu-id="03b79-599">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-599">Assembly Format</span></span>|<span data-ttu-id="03b79-600">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-600">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-601">40 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-601">40 < `int32` ></span></span>|<span data-ttu-id="03b79-602">bne.un `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-602">bne.un `target`</span></span>|<span data-ttu-id="03b79-603">Ветвь в целевой объект инструкции с указанным смещением в случае двух целочисленных значений, не равно (значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-603">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-604">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-604">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-605">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-605">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-606">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-606">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-607">`value2` и `value1` извлекаются из стека; если `value1` не равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-607">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-608">`bne.un` Инструкция передает управление указанной конечной инструкции, если `value1` не равно `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-608">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-609">Аналогично выполнению `ceq` инструкции, за которым следует `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-609">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-610">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-610">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-611">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-611">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-612">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-612">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-613">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bne.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-613">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-614">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-614">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Bne_Un_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Bne_Un_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Bne_Un_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Bne_Un_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Bne_Un_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Bne_Un_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-615">Передает управление конечной инструкции (короткая форма) в случае неравенства двух целочисленных значений без знака или двух неупорядоченных значений с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="03b79-615">Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-616">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-616">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-617">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-617">Format</span></span>|<span data-ttu-id="03b79-618">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-618">Assembly Format</span></span>|<span data-ttu-id="03b79-619">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-619">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-620">33 < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-620">33 < `int8` ></span></span>|<span data-ttu-id="03b79-621">bne.un.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-621">bne.un.s `target`</span></span>|<span data-ttu-id="03b79-622">Ветвь в целевой объект инструкции с указанным смещением в случае двух целочисленных значений, не равно (значений без знака), краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-622">Branch to the target instruction at the specified offset if two unsigned integer values are not equal (unsigned values), short form.</span></span>|  
  
 <span data-ttu-id="03b79-623">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-623">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-624">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-624">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-625">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-625">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-626">`value2` и `value1` извлекаются из стека; если `value1` не равно `value2`, выполняется операция перехода.</span><span class="sxs-lookup"><span data-stu-id="03b79-626">`value2` and `value1` are popped from the stack; if `value1` is not equal to `value2`, the branch operation is performed.</span></span>  
  
 <span data-ttu-id="03b79-627">`bne.un` Инструкция передает управление указанной конечной инструкции, если `value1` не равно `value2`, по сравнению с помощью целого числа без знака или неупорядоченных типа float.</span><span class="sxs-lookup"><span data-stu-id="03b79-627">The `bne.un` instruction transfers control to the specified target instruction if `value1` is not equal to `value2`, when compared using unsigned integer or unordered float values.</span></span> <span data-ttu-id="03b79-628">Аналогично выполнению `ceq` инструкции, за которым следует `brfalse` ветвь для указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-628">The effect is identical to performing a `ceq` instruction followed by a `brfalse` branch to the specific target instruction.</span></span> <span data-ttu-id="03b79-629">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-629">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-630">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-630">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-631">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-631">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-632">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `bne.un.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-632">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `bne.un.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-633">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-633">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Box">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Box;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Box" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Box" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Box As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Box;" />
      <MemberSignature Language="F#" Value=" staticval mutable Box : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Box" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-634">Преобразует тип значения в ссылку на объект (тип <see langword="O" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-634">Converts a value type to an object reference (type <see langword="O" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-635">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-635">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-636">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-636">Format</span></span>|<span data-ttu-id="03b79-637">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-637">Assembly Format</span></span>|<span data-ttu-id="03b79-638">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-638">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-639">8C < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-639">8C < `T` ></span></span>|<span data-ttu-id="03b79-640">поле `valTypeToken`</span><span class="sxs-lookup"><span data-stu-id="03b79-640">box `valTypeToken`</span></span>|<span data-ttu-id="03b79-641">Преобразование типа значения (типа, указанного в `valTypeToken`) значение true, ссылку на объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-641">Convert a value type (of the type specified in `valTypeToken`) to a true object reference.</span></span>|  
  
 <span data-ttu-id="03b79-642">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-642">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-643">Тип значения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-643">A value type is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-644">Тип значения, извлеченные из стека; `box` операций.</span><span class="sxs-lookup"><span data-stu-id="03b79-644">The value type is popped from the stack; the `box` operation is performed.</span></span>  
  
3.  <span data-ttu-id="03b79-645">Ссылка на объект для результирующего типа «процессор» значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-645">An object reference to the resulting "boxed" value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-646">Тип значения имеет два представления в Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="03b79-646">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="03b79-647">Форма «raw», используемый при внедрении типа значения в другом объекте или в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-647">A 'raw' form used when a value type is embedded within another object or on the stack.</span></span>  
  
-   <span data-ttu-id="03b79-648">Форма «процессор», где данные в тип значения упаковываются в объект и существуют как независимые сущности.</span><span class="sxs-lookup"><span data-stu-id="03b79-648">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="03b79-649">`box` Инструкция преобразует тип значения «raw» (из упакованной) в ссылку на объект (тип `O`).</span><span class="sxs-lookup"><span data-stu-id="03b79-649">The `box` instruction converts the 'raw' (unboxed) value type into an object reference (type `O`).</span></span> <span data-ttu-id="03b79-650">Это достигается путем создания нового объекта и копирования данных из типа значения во вновь выделенный объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-650">This is accomplished by creating a new object and copying the data from the value type into the newly allocated object.</span></span> <span data-ttu-id="03b79-651">`valTypeToken` токен метаданных, указывающий тип тип значения в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-651">`valTypeToken` is a metadata token indicating the type of the value type on the stack.</span></span>  
  
 <span data-ttu-id="03b79-652"><xref:System.OutOfMemoryException> возникает, если памяти недостаточно для удовлетворения запроса.</span><span class="sxs-lookup"><span data-stu-id="03b79-652"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="03b79-653"><xref:System.TypeLoadException> возникает, если класс не может быть найден.</span><span class="sxs-lookup"><span data-stu-id="03b79-653"><xref:System.TypeLoadException> is thrown if the class cannot be found.</span></span> <span data-ttu-id="03b79-654">Обычно это обнаруживается промежуточного языка MSIL (Microsoft) преобразуется в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-654">This is typically detected when Microsoft Intermediate Language (MSIL) is converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-655">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `box` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-655">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `box` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-656">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-656">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-657">Обеспечивает безусловную передачу управления конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-657">Unconditionally transfers control to a target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-658">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-658">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-659">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-659">Format</span></span>|<span data-ttu-id="03b79-660">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-660">Assembly Format</span></span>|<span data-ttu-id="03b79-661">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-661">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-662">38 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-662">38 < `int32` ></span></span>|<span data-ttu-id="03b79-663">br `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-663">br `target`</span></span>|<span data-ttu-id="03b79-664">Выполняет переход к конечной инструкции с указанным смещением.</span><span class="sxs-lookup"><span data-stu-id="03b79-664">Branches to a target instruction at the specified offset.</span></span>|  
  
 <span data-ttu-id="03b79-665">По этой операции выполняются не стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-665">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="03b79-666">`br` Инструкция обеспечивает безусловную передачу управления конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-666">The `br` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="03b79-667">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-667">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-668">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-668">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-669">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-669">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-670">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `br` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-670">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-671">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-671">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Br_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Br_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Br_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Br_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Br_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Br_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Br_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Br_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-672">Обеспечивает безусловную передачу управления конечной инструкции (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-672">Unconditionally transfers control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-673">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-673">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-674">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-674">Format</span></span>|<span data-ttu-id="03b79-675">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-675">Assembly Format</span></span>|<span data-ttu-id="03b79-676">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-676">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-677">2B < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-677">2B < `int8` ></span></span>|<span data-ttu-id="03b79-678">br.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-678">br.s `target`</span></span>|<span data-ttu-id="03b79-679">Выполняет переход к конечной инструкции с указанным смещением, краткую форму.</span><span class="sxs-lookup"><span data-stu-id="03b79-679">Branches to a target instruction at the specified offset, short form.</span></span>|  
  
 <span data-ttu-id="03b79-680">По этой операции выполняются не стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-680">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="03b79-681">`br.s` Инструкция обеспечивает безусловную передачу управления конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-681">The `br.s` instruction unconditionally transfers control to a target instruction.</span></span> <span data-ttu-id="03b79-682">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-682">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-683">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-683">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-684">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-684">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-685">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `br.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-685">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `br.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-686">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-686">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Break;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Break" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Break" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Break As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Break;" />
      <MemberSignature Language="F#" Value=" staticval mutable Break : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Break" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-687">Сообщает инфраструктуре CLI, что необходимо оповестить отладчик о достижении точки останова.</span><span class="sxs-lookup"><span data-stu-id="03b79-687">Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-688">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-688">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-689">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-689">Format</span></span>|<span data-ttu-id="03b79-690">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-690">Assembly Format</span></span>|<span data-ttu-id="03b79-691">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-691">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-692">01</span><span class="sxs-lookup"><span data-stu-id="03b79-692">01</span></span>|<span data-ttu-id="03b79-693">break</span><span class="sxs-lookup"><span data-stu-id="03b79-693">break</span></span>|<span data-ttu-id="03b79-694">оповещение отладчик, что была достигнута точка останова.</span><span class="sxs-lookup"><span data-stu-id="03b79-694">inform a debugger that a breakpoint has been reached.</span></span>|  
  
 <span data-ttu-id="03b79-695">По этой операции выполняются не стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-695">No evaluation stack behaviors are performed by this operation.</span></span>  
  
 <span data-ttu-id="03b79-696">`break` Инструкция выглядит следующим образом для поддержки отладки.</span><span class="sxs-lookup"><span data-stu-id="03b79-696">The `break` instruction is for debugging support.</span></span> <span data-ttu-id="03b79-697">Она сообщает инфраструктуре CLI необходимо оповестить отладчик о достижении точки останова.</span><span class="sxs-lookup"><span data-stu-id="03b79-697">It signals the CLI to inform the debugger that a break point has been tripped.</span></span> <span data-ttu-id="03b79-698">Он имеет не влияет на состояние интерпретатора.</span><span class="sxs-lookup"><span data-stu-id="03b79-698">It has no other effect on the interpreter state.</span></span>  
  
 <span data-ttu-id="03b79-699">`break` Инструкция имеет наименьший возможный размер Включение установки исправлений с помощью точки останова с минимальным воздействием на окружающий код.</span><span class="sxs-lookup"><span data-stu-id="03b79-699">The `break` instruction has the smallest possible instruction size enabling code patching with a break point and generating minimal disturbance to the surrounding code.</span></span>  
  
 <span data-ttu-id="03b79-700">`break` Инструкции можно перехватывать к отладчику, ничего не делать или вызывать исключение безопасности.</span><span class="sxs-lookup"><span data-stu-id="03b79-700">The `break` instruction can trap to a debugger, do nothing, or raise a security exception.</span></span> <span data-ttu-id="03b79-701">Точное поведение определяется реализацией.</span><span class="sxs-lookup"><span data-stu-id="03b79-701">The exact behavior is implementation-defined.</span></span>  
  
 <span data-ttu-id="03b79-702">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `break` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-702">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `break` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-703">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-703">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-704">Передает управление конечной инструкции, если значением <paramref name="value" /> является <see langword="false" />, пустая ссылка (<see langword="Nothing" /> в Visual Basic) или ноль.</span><span class="sxs-lookup"><span data-stu-id="03b79-704">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference (<see langword="Nothing" /> in Visual Basic), or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-705">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-705">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-706">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-706">Format</span></span>|<span data-ttu-id="03b79-707">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-707">Assembly Format</span></span>|<span data-ttu-id="03b79-708">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-708">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-709">39 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-709">39 < `int32` ></span></span>|<span data-ttu-id="03b79-710">brfalse `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-710">brfalse `target`</span></span><br /><br /> <span data-ttu-id="03b79-711">brnull `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-711">brnull `target`</span></span><br /><br /> <span data-ttu-id="03b79-712">brzero `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-712">brzero `target`</span></span>|<span data-ttu-id="03b79-713">Выполняет переход к конечной инструкции с указанным смещением, если `false`.</span><span class="sxs-lookup"><span data-stu-id="03b79-713">Branches to a target instruction at the specified offset if `false`.</span></span>|  
  
 <span data-ttu-id="03b79-714">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-714">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-715">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="03b79-715">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="03b79-716">`value` извлекается из стека; Если `value` — `false`, ветвь `target`.</span><span class="sxs-lookup"><span data-stu-id="03b79-716">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="03b79-717">`brfalse` Инструкции (и ее псевдонимы `brnull` и `brzero`) передачу управления указанной конечной инструкции, если `value` (типа `int32`, `int64`, ссылка на объект `O`управляемого указателя `&`, временный указатель `*`, `native int`) равно нулю (`false`).</span><span class="sxs-lookup"><span data-stu-id="03b79-717">The `brfalse` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="03b79-718">Если `value` имеет ненулевое значение (`true`) продолжает выполнение следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-718">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="03b79-719">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-719">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-720">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-720">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-721">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-721">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-722">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `brfalse` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-723">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-723">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brfalse_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brfalse_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brfalse_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brfalse_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brfalse_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brfalse_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-724">Передает управление конечной инструкции, если значением <paramref name="value" /> является <see langword="false" />, пустая ссылка или ноль.</span><span class="sxs-lookup"><span data-stu-id="03b79-724">Transfers control to a target instruction if <paramref name="value" /> is <see langword="false" />, a null reference, or zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-725">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-726">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-726">Format</span></span>|<span data-ttu-id="03b79-727">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-727">Assembly Format</span></span>|<span data-ttu-id="03b79-728">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-729">2C <`int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-729">2C <`int8` ></span></span>|<span data-ttu-id="03b79-730">brfalse.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-730">brfalse.s `target`</span></span><br /><br /> <span data-ttu-id="03b79-731">brnull.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-731">brnull.s `target`</span></span><br /><br /> <span data-ttu-id="03b79-732">brzero.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-732">brzero.s `target`</span></span>|<span data-ttu-id="03b79-733">Выполняет переход к конечной инструкции с указанным смещением, если `false`, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-733">Branches to a target instruction at the specified offset if `false`, short form.</span></span>|  
  
 <span data-ttu-id="03b79-734">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-734">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-735">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="03b79-735">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="03b79-736">`value` извлекается из стека; Если `value` — `false`, ветвь `target`.</span><span class="sxs-lookup"><span data-stu-id="03b79-736">`value` is popped from the stack; if `value` is `false`, branch to `target`.</span></span>  
  
 <span data-ttu-id="03b79-737">`brfalse.s` Инструкции (и ее псевдонимы `brnull` и `brzero`) передачу управления указанной конечной инструкции, если `value` (типа `int32`, `int64`, ссылка на объект `O`управляемого указателя `&`, временный указатель `*`, `native int`) равно нулю (`false`).</span><span class="sxs-lookup"><span data-stu-id="03b79-737">The `brfalse.s` instruction (and its aliases `brnull` and `brzero`) transfers control to the specified target instruction if `value` (of type `int32`, `int64`, object reference `O`, managed pointer `&`, transient pointer `*`, `native int`) is zero (`false`).</span></span> <span data-ttu-id="03b79-738">Если `value` имеет ненулевое значение (`true`) продолжает выполнение следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-738">If `value` is non-zero (`true`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="03b79-739">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-739">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-740">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-740">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-741">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-741">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-742">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `brfalse.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-742">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brfalse.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-743">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-743">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-744">Передает управление конечной инструкции, если значение <paramref name="value" /> равно <see langword="true" />, либо отличается от null и от нуля.</span><span class="sxs-lookup"><span data-stu-id="03b79-744">Transfers control to a target instruction if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-745">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-745">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-746">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-746">Format</span></span>|<span data-ttu-id="03b79-747">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-747">Assembly Format</span></span>|<span data-ttu-id="03b79-748">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-748">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-749">3A < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-749">3A < `int32` ></span></span>|<span data-ttu-id="03b79-750">brtrue `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-750">brtrue `target`</span></span><br /><br /> <span data-ttu-id="03b79-751">brinst `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-751">brinst `target`</span></span>|<span data-ttu-id="03b79-752">Ветвление конечной инструкции, начиная с указанной позиции, если ненулевое значение (`true`).</span><span class="sxs-lookup"><span data-stu-id="03b79-752">Branch to a target instruction at the specified offset if non-zero (`true`).</span></span>|  
  
 <span data-ttu-id="03b79-753">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-753">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-754">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="03b79-754">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="03b79-755">`value` извлекается из стека; Если `value` — `true`, ветвь `target`.</span><span class="sxs-lookup"><span data-stu-id="03b79-755">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="03b79-756">`brtrue` Инструкция передает управление указанной конечной инструкции, если `value` (тип `native int`) имеет ненулевое значение (`true`).</span><span class="sxs-lookup"><span data-stu-id="03b79-756">The `brtrue` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="03b79-757">Если `value` равно нулю (`false`) продолжает выполнение следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-757">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="03b79-758">Если `value` является ссылкой на объект (тип `O`) затем `brinst` (псевдоним для `brtrue`) передает управление в том случае, если оно представляет экземпляр объекта (например, если он не является ссылкой на пустой объект; см. в разделе <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="03b79-758">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="03b79-759">Целевая инструкция представляется как 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-759">The target instruction is represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-760">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-760">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-761">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-761">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-762">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `brtrue` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-762">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-763">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-763">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brtrue_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Brtrue_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Brtrue_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Brtrue_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Brtrue_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Brtrue_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-764">Передает управление конечной инструкции (короткая форма), если значение <paramref name="value" /> равно <see langword="true" /> либо отличается от null и от нуля.</span><span class="sxs-lookup"><span data-stu-id="03b79-764">Transfers control to a target instruction (short form) if <paramref name="value" /> is <see langword="true" />, not null, or non-zero.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-765">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-765">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-766">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-766">Format</span></span>|<span data-ttu-id="03b79-767">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-767">Assembly Format</span></span>|<span data-ttu-id="03b79-768">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-768">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-769">2D < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-769">2D < `int8` ></span></span>|<span data-ttu-id="03b79-770">brtrue.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-770">brtrue.s `target`</span></span><br /><br /> <span data-ttu-id="03b79-771">brinst.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-771">brinst.s `target`</span></span>|<span data-ttu-id="03b79-772">Ветвление конечной инструкции, начиная с указанной позиции, если ненулевое значение (`true`), краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-772">Branch to a target instruction at the specified offset if non-zero (`true`), short form.</span></span>|  
  
 <span data-ttu-id="03b79-773">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-773">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-774">`value` помещается в стек с помощью предыдущей операции.</span><span class="sxs-lookup"><span data-stu-id="03b79-774">`value` is pushed onto the stack by a previous operation.</span></span>  
  
2.  <span data-ttu-id="03b79-775">`value` извлекается из стека; Если `value` — `true`, ветвь `target`.</span><span class="sxs-lookup"><span data-stu-id="03b79-775">`value` is popped from the stack; if `value` is `true`, branch to `target`.</span></span>  
  
 <span data-ttu-id="03b79-776">`brtrue.s` Инструкция передает управление указанной конечной инструкции, если `value` (тип `native int`) имеет ненулевое значение (`true`).</span><span class="sxs-lookup"><span data-stu-id="03b79-776">The `brtrue.s` instruction transfers control to the specified target instruction if `value` (type `native int`) is nonzero (`true`).</span></span> <span data-ttu-id="03b79-777">Если `value` равно нулю (`false`) продолжает выполнение следующей инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-777">If `value` is zero (`false`) execution continues at the next instruction.</span></span>  
  
 <span data-ttu-id="03b79-778">Если `value` является ссылкой на объект (тип `O`) затем `brinst` (псевдоним для `brtrue`) передает управление в том случае, если оно представляет экземпляр объекта (например, если он не является ссылкой на пустой объект; см. в разделе <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span><span class="sxs-lookup"><span data-stu-id="03b79-778">If `value` is an object reference (type `O`) then `brinst` (an alias for `brtrue`) transfers control if it represents an instance of an object (for example, if it is not the null object reference; see <xref:System.Reflection.Emit.OpCodes.Ldnull>).</span></span>  
  
 <span data-ttu-id="03b79-779">Целевая инструкция представляется как 1-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-779">The target instruction is represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-780">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-780">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span> <span data-ttu-id="03b79-781">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-781">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span>  
  
 <span data-ttu-id="03b79-782">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `brtrue.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-782">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `brtrue.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-783">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-783">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Call;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Call" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Call" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Call As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Call;" />
      <MemberSignature Language="F#" Value=" staticval mutable Call : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Call" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-784">Вызывает метод, на который ссылается переданный дескриптор метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-784">Calls the method indicated by the passed method descriptor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-785">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-785">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-786">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-786">Format</span></span>|<span data-ttu-id="03b79-787">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-787">Assembly Format</span></span>|<span data-ttu-id="03b79-788">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-788">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-789">28 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-789">28 < `T` ></span></span>|<span data-ttu-id="03b79-790">Вызов `methodDesc`</span><span class="sxs-lookup"><span data-stu-id="03b79-790">call `methodDesc`</span></span>|<span data-ttu-id="03b79-791">Вызовите метод, описанный `methodDesc`.</span><span class="sxs-lookup"><span data-stu-id="03b79-791">Call the method described by `methodDesc`.</span></span>|  
  
 <span data-ttu-id="03b79-792">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-792">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-793">Аргументы метода `arg1` через `argN` помещаются в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-793">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-794">Аргументы метода `arg1` через `argN` извлекаются из стека; вызов метода выполняется с этими аргументами и управление передается в метод, на который ссылается дескриптор метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-794">Method arguments `arg1` through `argN` are popped from the stack; the method call is performed with these arguments and control is transferred to the method referred to by the method descriptor.</span></span> <span data-ttu-id="03b79-795">По завершении возвращаемое значение созданные вызываемый метод и отправляемые вызывающий объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-795">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
3.  <span data-ttu-id="03b79-796">Возвращаемое значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-796">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-797">`call` Инструкция вызывает метод, передаваемый с инструкцией дескриптор метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-797">The `call` instruction calls the method indicated by the method descriptor passed with the instruction.</span></span> <span data-ttu-id="03b79-798">Дескриптор метода является маркером метаданных, который указывает метод для вызова и количество, тип и порядок аргументов, которые были помещены в стек передается этому методу, а также соглашение о вызове для использования.</span><span class="sxs-lookup"><span data-stu-id="03b79-798">The method descriptor is a metadata token that indicates the method to call and the number, type, and order of the arguments that have been placed on the stack to be passed to that method as well as the calling convention to be used.</span></span> <span data-ttu-id="03b79-799">`call` Инструкции непосредственно перед которым `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) префикса инструкциям, чтобы указать, что текущее состояние метода необходимо освободить перед передачей управления.</span><span class="sxs-lookup"><span data-stu-id="03b79-799">The `call` instruction can be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix instruction to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="03b79-800">Если вызов передает управление методу, более высокий уровень доверия, чем у исходного метода, кадр стека не освобождается.</span><span class="sxs-lookup"><span data-stu-id="03b79-800">If the call transfers control to a method of higher trust than the origin method, the stack frame is not released.</span></span> <span data-ttu-id="03b79-801">Вместо этого выполнение продолжается так как если `tail` не был задан.</span><span class="sxs-lookup"><span data-stu-id="03b79-801">Instead, the execution continues silently as if the `tail` had not been supplied.</span></span> <span data-ttu-id="03b79-802">Токен метаданных содержит достаточно сведений, чтобы определить, является ли вызов статического метода, метод экземпляра, виртуальный метод или глобальной функции.</span><span class="sxs-lookup"><span data-stu-id="03b79-802">The metadata token carries sufficient information to determine whether the call is to a static method, an instance method, a virtual method, or a global function.</span></span> <span data-ttu-id="03b79-803">Во всех этих случаях адрес назначения определяется исключительно на основании дескриптора метода (Сравните это с <xref:System.Reflection.Emit.OpCodes.Callvirt> инструкцию для вызова виртуальных методов, где адрес назначения также зависит от типа среды выполнения экземпляра Справочник по стек перед <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span><span class="sxs-lookup"><span data-stu-id="03b79-803">In all of these cases the destination address is determined entirely from the method descriptor (contrast this with the <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction for calling virtual methods, where the destination address also depends upon the runtime type of the instance reference pushed before the <xref:System.Reflection.Emit.OpCodes.Callvirt>).</span></span>  
  
 <span data-ttu-id="03b79-804">Аргументы помещаются в стек в порядке слева направо.</span><span class="sxs-lookup"><span data-stu-id="03b79-804">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="03b79-805">То есть первый аргумент вычисляется и поместить в стек, второй аргумент, а затем третий, пока все необходимые аргументы не на вершине стека в порядке убывания.</span><span class="sxs-lookup"><span data-stu-id="03b79-805">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="03b79-806">Существует три важные особые случаи:</span><span class="sxs-lookup"><span data-stu-id="03b79-806">There are three important special cases:</span></span>  
  
 1. <span data-ttu-id="03b79-807">Вызовы к экземпляру (или виртуального) метода необходимо поместить ссылку на экземпляр перед любой из аргументов видимыми.</span><span class="sxs-lookup"><span data-stu-id="03b79-807">Calls to an instance (or virtual) method must push that instance reference before any of the user-visible arguments.</span></span> <span data-ttu-id="03b79-808">Ссылка на экземпляр не должен быть пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-808">The instance reference must not be a null reference.</span></span> <span data-ttu-id="03b79-809">Подпись, передавая в метаданных не содержит запись в списке параметров для `this` указателю; вместо этого используется немного, чтобы указать, требуется ли метод передачи `this` указатель.</span><span class="sxs-lookup"><span data-stu-id="03b79-809">The signature carried in the metadata does not contain an entry in the parameter list for the `this` pointer; instead, it uses a bit to indicate whether the method requires passing the `this` pointer.</span></span>  
  
 2. <span data-ttu-id="03b79-810">Допускается вызов виртуального метода с использованием `call` (а не `callvirt`); это означает, что метод будет обработан с помощью класса, указанного с помощью метода, а не как динамически из вызываемого объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-810">It is valid to call a virtual method using `call` (rather than `callvirt`); this indicates that the method is to be resolved using the class specified by method rather than as specified dynamically from the object being invoked.</span></span>  
  
 3. <span data-ttu-id="03b79-811">Обратите внимание, что делегата `Invoke` метод может вызываться с любым `call` или `callvirt` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-811">Note that a delegate's `Invoke` method can be called with either the `call` or `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="03b79-812"><xref:System.Security.SecurityException> может быть вызвано, если система безопасности не предоставляет доступа вызывающего объекта в вызываемый метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-812"><xref:System.Security.SecurityException> may be thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="03b79-813">Проверка безопасности возникает в том случае, когда инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-813">The security check may occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="03b79-814">При вызове методов класса System.Object в типах значений, рассмотрите возможность использования `constrained` префикс `callvirt` инструкции вместо выдачи `call` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-814">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction instead of emitting a `call` instruction.</span></span> <span data-ttu-id="03b79-815">Это избавляет от необходимости создавать разные IL в зависимости от того, является ли тип значения переопределяет метод, как избежать потенциальной проблемы управления версиями.</span><span class="sxs-lookup"><span data-stu-id="03b79-815">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="03b79-816">Рассмотрите возможность использования `constrained` префикс при вызове методов интерфейса для типов значений, так как метод типов значений, реализующий метод интерфейса можно изменить с помощью `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="03b79-816">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="03b79-817">Эти проблемы описаны более подробно в <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="03b79-817">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="03b79-818">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `call` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `call` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-819">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-819">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="03b79-820">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="03b79-820">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="03b79-821"><xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> Метод предоставляется для `varargs` вызовов.</span><span class="sxs-lookup"><span data-stu-id="03b79-821">The <xref:System.Reflection.Emit.ILGenerator.EmitCall%2A> method is provided for `varargs` calls.</span></span> <span data-ttu-id="03b79-822">Используйте <xref:System.Reflection.Emit.ILGenerator.Emit%2A> метод обычные вызовы.</span><span class="sxs-lookup"><span data-stu-id="03b79-822">Use the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method for normal calls.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calli">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Calli;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Calli" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Calli" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Calli As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Calli;" />
      <MemberSignature Language="F#" Value=" staticval mutable Calli : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Calli" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-823">Вызывает метод, заданный в стеке вычислений (как указатель на точку входа), с аргументами, описанными в соглашении о вызовах.</span><span class="sxs-lookup"><span data-stu-id="03b79-823">Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-824">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-824">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-825">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-825">Format</span></span>|<span data-ttu-id="03b79-826">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-826">Assembly Format</span></span>|<span data-ttu-id="03b79-827">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-827">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-828">29 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-828">29 < `T` ></span></span>|<span data-ttu-id="03b79-829">Calli `callSiteDescr`</span><span class="sxs-lookup"><span data-stu-id="03b79-829">calli `callSiteDescr`</span></span>|<span data-ttu-id="03b79-830">Вызывает метод, на который указывает с аргументами, описанными в соглашении о вызовах.</span><span class="sxs-lookup"><span data-stu-id="03b79-830">Calls the method pointed to with arguments described by the calling convention.</span></span>|  
  
 <span data-ttu-id="03b79-831">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-831">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-832">Аргументы метода `arg1` через `argN` помещаются в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-832">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-833">Указатель на точку входа метода помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-833">The method entry pointer is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-834">Аргументы метода `arg1` через `argN` и указатель на точку входа метода выталкиваются из стека; выполняется вызов метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-834">Method arguments `arg1` through `argN` and the method entry pointer are popped from the stack; the call to the method is performed.</span></span> <span data-ttu-id="03b79-835">По завершении возвращаемое значение созданные вызываемый метод и отправляемые вызывающий объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-835">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="03b79-836">Возвращаемое значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-836">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-837">`calli` Инструкция вызывает указатель на точку входа метода с аргументами `arg1` через `argN`.</span><span class="sxs-lookup"><span data-stu-id="03b79-837">The `calli` instruction calls the method entry pointer with the arguments `arg1` through `argN`.</span></span> <span data-ttu-id="03b79-838">Типы из этих аргументов описаны определенным соглашением о вызовах (`callSiteDesc`).</span><span class="sxs-lookup"><span data-stu-id="03b79-838">The types of these arguments are described by the specific calling convention (`callSiteDesc`).</span></span> <span data-ttu-id="03b79-839">`calli` Инструкция может быть непосредственно перед которым `tail` префикс (<xref:System.Reflection.Emit.OpCodes.Tailcall>) для указания, что текущее состояние метода необходимо освободить перед передачей управления.</span><span class="sxs-lookup"><span data-stu-id="03b79-839">The `calli` instruction may be immediately preceded by a `tail` prefix (<xref:System.Reflection.Emit.OpCodes.Tailcall>) to specify that the current method state should be released before transferring control.</span></span> <span data-ttu-id="03b79-840">Если вызов передает управление методу более высокий уровень доверия, чем у исходного метода кадр стека не удаляется. Вместо этого выполнение продолжается так, как если бы `tail` не был задан.</span><span class="sxs-lookup"><span data-stu-id="03b79-840">If the call would transfer control to a method of higher trust than the origin method the stack frame will not be released; instead, the execution will continue silently as if the `tail` had not been supplied.</span></span>  
  
 <span data-ttu-id="03b79-841">Предполагается, что указатель на точку входа метода является определенный указатель на машинный код (конечного компьютера), можете законным образом вызван с аргументами, описанными в соглашении о вызовах (лексема метаданных для отдельной подписи).</span><span class="sxs-lookup"><span data-stu-id="03b79-841">The method entry pointer is assumed to be a specific pointer to native code (of the target machine) that can be legitimately called with the arguments described by the calling convention (a metadata token for a stand-alone signature).</span></span> <span data-ttu-id="03b79-842">Такой указатель могут создаваться с использованием <xref:System.Reflection.Emit.OpCodes.Ldftn> или <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> инструкции или переданный из машинного кода.</span><span class="sxs-lookup"><span data-stu-id="03b79-842">Such a pointer can be created using the <xref:System.Reflection.Emit.OpCodes.Ldftn> or <xref:System.Reflection.Emit.OpCodes.Ldvirtftn> instructions, or passed in from native code.</span></span>  
  
 <span data-ttu-id="03b79-843">Соглашение о вызовах не проверяется динамически, поэтому код, использующий `calli` инструкций не работает правильно, если конечный метод не использует указанное соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="03b79-843">The calling convention is not checked dynamically, so code that uses a `calli` instruction does not work correctly if the destination does not actually use the specified calling convention.</span></span>  
  
 <span data-ttu-id="03b79-844">Аргументы помещаются в стек в порядке слева направо.</span><span class="sxs-lookup"><span data-stu-id="03b79-844">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="03b79-845">То есть первый аргумент вычисляется и поместить в стек, второй аргумент, а затем третий, пока все необходимые аргументы не на вершине стека в порядке убывания.</span><span class="sxs-lookup"><span data-stu-id="03b79-845">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="03b79-846">Аргумент дом последовательности кода для экземпляра или виртуальный метод необходимо поместить ссылку на экземпляр (который не должен быть ссылкой на null) перед любой из аргументов видимыми.</span><span class="sxs-lookup"><span data-stu-id="03b79-846">The argument-building code sequence for an instance or virtual method must push that instance reference (which must not be a null reference) before any of the user-visible arguments.</span></span>  
  
 <span data-ttu-id="03b79-847"><xref:System.Security.SecurityException> может быть вызвано, если система безопасности не предоставляет доступа вызывающего объекта в вызываемый метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-847"><xref:System.Security.SecurityException> may be thrown if the system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="03b79-848">Проверка безопасности может произойти, когда инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-848">The security check can occur when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-849">Следующие <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> методы могут использоваться для выполнения `calli` инструкции в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-849">The following <xref:System.Reflection.Emit.ILGenerator.EmitCalli%2A> methods can be used to perform a `calli` instruction on the stack.</span></span> <span data-ttu-id="03b79-850">Обратите внимание, что `calli` должен вызываться через ниже методов, а не с помощью <xref:System.Reflection.Emit.ILGenerator.Emit%2A> класс для помещения инструкции непосредственно в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-850">Note that `calli` should be called through the below methods rather than using the <xref:System.Reflection.Emit.ILGenerator.Emit%2A> class to place the instruction directly on the stack.</span></span>  
  
-   <span data-ttu-id="03b79-851">ILGenerator.EmitCalli (код операции, CallingConventions, тип, Type [], Type[]) для вызовов с помощью управляемых вызовах.</span><span class="sxs-lookup"><span data-stu-id="03b79-851">ILGenerator.EmitCalli(Opcode, CallingConventions, Type, Type[], Type[]) for calls using a managed calling convention.</span></span>  
  
-   <span data-ttu-id="03b79-852">ILGenerator.EmitCalli (код операции, Type[]) CallingConvention, тип, для вызовов с помощью соглашений по неуправляемым вызовам.</span><span class="sxs-lookup"><span data-stu-id="03b79-852">ILGenerator.EmitCalli(Opcode, CallingConvention, Type, Type[]) for calls using an unmanaged calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Callvirt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Callvirt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Callvirt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Callvirt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Callvirt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Callvirt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-853">Вызывает метод объекта с поздней привязкой и помещает возвращаемое значение в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-853">Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-854">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-855">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-855">Format</span></span>|<span data-ttu-id="03b79-856">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-856">Assembly Format</span></span>|<span data-ttu-id="03b79-857">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-858">6F < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-858">6F < `T` ></span></span>|<span data-ttu-id="03b79-859">callvirt `method`</span><span class="sxs-lookup"><span data-stu-id="03b79-859">callvirt `method`</span></span>|<span data-ttu-id="03b79-860">Вызывает определенный метод, связанный с `obj`.</span><span class="sxs-lookup"><span data-stu-id="03b79-860">Calls a specific method associated with `obj`.</span></span>|  
  
 <span data-ttu-id="03b79-861">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-862">Ссылка на объект `obj` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-862">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-863">Аргументы метода `arg1` через `argN` помещаются в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-863">Method arguments `arg1` through `argN` are pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-864">Аргументы метода `arg1` через `argN` и ссылку на объект `obj` извлекаются из стека; вызов метода выполняется с этими аргументами и управление передается методу в `obj` ссылается метод токен метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-864">Method arguments `arg1` through `argN` and the object reference `obj` are popped from the stack; the method call is performed with these arguments and control is transferred to the method in `obj` referred to by the method metadata token.</span></span> <span data-ttu-id="03b79-865">По завершении возвращаемое значение созданные вызываемый метод и отправляемые вызывающий объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-865">When complete, a return value is generated by the callee method and sent to the caller.</span></span>  
  
4.  <span data-ttu-id="03b79-866">Возвращаемое значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-866">The return value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-867">`callvirt` Инструкция вызывает метод с поздним связыванием объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-867">The `callvirt` instruction calls a late-bound method on an object.</span></span> <span data-ttu-id="03b79-868">То есть метод выбирается в зависимости от типа среды выполнения `obj` вместо компиляции класса, видимого в указатель метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-868">That is, the method is chosen based on the runtime type of `obj` rather than the compile-time class visible in the method pointer.</span></span> <span data-ttu-id="03b79-869">`Callvirt` можно использовать для вызова виртуальных методов и методов экземпляра.</span><span class="sxs-lookup"><span data-stu-id="03b79-869">`Callvirt` can be used to call both virtual and instance methods.</span></span> <span data-ttu-id="03b79-870">`callvirt` Инструкция может быть непосредственно перед которым `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) префикса, чтобы указать, что перед передачей управления необходимо освободить текущий кадр стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-870">The `callvirt` instruction may be immediately preceded by a `tail` (<xref:System.Reflection.Emit.OpCodes.Tailcall>) prefix to specify that the current stack frame should be released before transferring control.</span></span> <span data-ttu-id="03b79-871">Если вызов передает управление методу, более высокий уровень доверия, чем исходный метод кадр стека, не удаляется.</span><span class="sxs-lookup"><span data-stu-id="03b79-871">If the call would transfer control to a method of higher trust than the original method the stack frame will not be released.</span></span>  
  
 <span data-ttu-id="03b79-872">Токен метаданных метода предоставляет имя, класс и подпись метода для вызова.</span><span class="sxs-lookup"><span data-stu-id="03b79-872">The method metadata token provides the name, class and signature of the method to call.</span></span> <span data-ttu-id="03b79-873">Класс, связанный с `obj` — это класс, из которых он является экземпляром.</span><span class="sxs-lookup"><span data-stu-id="03b79-873">The class associated with `obj` is the class of which it is an instance.</span></span> <span data-ttu-id="03b79-874">Если класс определяет нестатический метод, который соответствует указанное имя и подпись, этот метод вызывается.</span><span class="sxs-lookup"><span data-stu-id="03b79-874">If the class defines a non-static method that matches the indicated method name and signature, this method is called.</span></span> <span data-ttu-id="03b79-875">В противном случае все классы в цепочке базовый класс этого класса проверяются в порядке.</span><span class="sxs-lookup"><span data-stu-id="03b79-875">Otherwise all classes in the base class chain of this class are checked in order.</span></span> <span data-ttu-id="03b79-876">Это ошибка, если метод не найден.</span><span class="sxs-lookup"><span data-stu-id="03b79-876">It is an error if no method is found.</span></span>  
  
 <span data-ttu-id="03b79-877">`Callvirt` Извлекает объект и соответствующие аргументы из стека вычислений перед вызовом метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-877">`Callvirt` pops the object and the associated arguments off the evaluation stack before calling the method.</span></span> <span data-ttu-id="03b79-878">Если метод имеет возвращаемое значение, он помещается в стек по завершении метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-878">If the method has a return value, it is pushed on the stack upon method completion.</span></span> <span data-ttu-id="03b79-879">На стороне вызываемой `obj` параметра осуществляется аргумент 0, `arg1` как аргумент 1 и т. д.</span><span class="sxs-lookup"><span data-stu-id="03b79-879">On the callee side, the `obj` parameter is accessed as argument 0, `arg1` as argument 1, and so on.</span></span>  
  
 <span data-ttu-id="03b79-880">Аргументы помещаются в стек в порядке слева направо.</span><span class="sxs-lookup"><span data-stu-id="03b79-880">The arguments are placed on the stack in left-to-right order.</span></span> <span data-ttu-id="03b79-881">То есть первый аргумент вычисляется и поместить в стек, второй аргумент, а затем третий, пока все необходимые аргументы не на вершине стека в порядке убывания.</span><span class="sxs-lookup"><span data-stu-id="03b79-881">That is, the first argument is computed and placed on the stack, then the second argument, then the third, until all necessary arguments are atop the stack in descending order.</span></span> <span data-ttu-id="03b79-882">Ссылка на экземпляр `obj` (всегда требуется для `callvirt`) должна быть в стек перед любой из аргументов видимыми.</span><span class="sxs-lookup"><span data-stu-id="03b79-882">The instance reference `obj` (always required for `callvirt`) must be pushed before any of the user-visible arguments.</span></span> <span data-ttu-id="03b79-883">Подпись, (передавая маркер метаданных) не должны содержать записи в списке параметров для этого указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-883">The signature (carried in the metadata token) need not contain an entry in the parameter list for the this pointer.</span></span>  
  
 <span data-ttu-id="03b79-884">Обратите внимание на то, что виртуальный метод может также быть вызван с помощью <xref:System.Reflection.Emit.OpCodes.Call> инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-884">Note that a virtual method can also be called using the <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span>  
  
 <span data-ttu-id="03b79-885"><xref:System.MissingMethodException> возникает, если не удается найти нестатический метод с указанным именем и сигнатурой в классе, связанном с `obj` или любого из его базовых классов.</span><span class="sxs-lookup"><span data-stu-id="03b79-885"><xref:System.MissingMethodException> is thrown if a non-static method with the indicated name and signature could not be found in the class associated with `obj` or any of its base classes.</span></span> <span data-ttu-id="03b79-886">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-886">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-887"><xref:System.NullReferenceException> возникает, если obj имеет значение null.</span><span class="sxs-lookup"><span data-stu-id="03b79-887"><xref:System.NullReferenceException> is thrown if obj is null.</span></span>  
  
 <span data-ttu-id="03b79-888"><xref:System.Security.SecurityException> возникает, если система безопасности не предоставляет доступа вызывающего объекта в вызываемый метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-888"><xref:System.Security.SecurityException> is thrown if system security does not grant the caller access to the called method.</span></span> <span data-ttu-id="03b79-889">Проверка безопасности возникает в том случае, когда CIL преобразуется в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-889">The security check may occur when the CIL is converted to native code rather than at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="03b79-890">При вызове методов класса System.Object в типах значений, рассмотрите возможность использования `constrained` префикс `callvirt` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-890">When calling methods of System.Object on value types, consider using the `constrained` prefix with the `callvirt` instruction.</span></span> <span data-ttu-id="03b79-891">Это избавляет от необходимости создавать разные IL в зависимости от того, является ли тип значения переопределяет метод, как избежать потенциальной проблемы управления версиями.</span><span class="sxs-lookup"><span data-stu-id="03b79-891">This removes the need to emit different IL depending on whether or not the value type overrides the method, avoiding a potential versioning problem.</span></span> <span data-ttu-id="03b79-892">Рассмотрите возможность использования `constrained` префикс при вызове методов интерфейса для типов значений, так как метод типов значений, реализующий метод интерфейса можно изменить с помощью `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="03b79-892">Consider using the `constrained` prefix when invoking interface methods on value types, since the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="03b79-893">Эти проблемы описаны более подробно в <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span><span class="sxs-lookup"><span data-stu-id="03b79-893">These issues are described in more detail in the <xref:System.Reflection.Emit.OpCodes.Constrained> opcode.</span></span>  
  
 <span data-ttu-id="03b79-894">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `callvirt` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-894">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `callvirt` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-895">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-895">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="03b79-896">ILGenerator.EmitCall (OpCode, MethodInfo, Type[])</span><span class="sxs-lookup"><span data-stu-id="03b79-896">ILGenerator.EmitCall(OpCode, MethodInfo, Type[])</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Castclass">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Castclass;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Castclass" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Castclass" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Castclass As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Castclass;" />
      <MemberSignature Language="F#" Value=" staticval mutable Castclass : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Castclass" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-897">Предпринимает попытку привести объект, передаваемый по ссылке, к указанному классу.</span><span class="sxs-lookup"><span data-stu-id="03b79-897">Attempts to cast an object passed by reference to the specified class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-898">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-899">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-899">Format</span></span>|<span data-ttu-id="03b79-900">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-900">Assembly Format</span></span>|<span data-ttu-id="03b79-901">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-902">74 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-902">74 < `T` ></span></span>|<span data-ttu-id="03b79-903">castclass `class`</span><span class="sxs-lookup"><span data-stu-id="03b79-903">castclass `class`</span></span>|<span data-ttu-id="03b79-904">Приводит объект с новым объектом типа `class`.</span><span class="sxs-lookup"><span data-stu-id="03b79-904">Casts an object to a new object of type `class`.</span></span>|  
  
 <span data-ttu-id="03b79-905">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-906">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-906">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-907">Ссылка на объект извлекается из стека; Указанный объект приводится согласно указанному `class`.</span><span class="sxs-lookup"><span data-stu-id="03b79-907">The object reference is popped from the stack; the referenced object is cast as the specified `class`.</span></span>  
  
3.  <span data-ttu-id="03b79-908">В случае успешного выполнения новая ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-908">If successful, a new object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-909">`castclass` Инструкции предпринимается попытка преобразования ссылка на объект (тип `O`) на вершине стека для указанного класса.</span><span class="sxs-lookup"><span data-stu-id="03b79-909">The `castclass` instruction attempts to cast the object reference (type `O`) atop the stack to a specified class.</span></span> <span data-ttu-id="03b79-910">Новый класс, указанный токеном метаданных, указывающее, требуемого класса.</span><span class="sxs-lookup"><span data-stu-id="03b79-910">The new class is specified by a metadata token indicating the desired class.</span></span> <span data-ttu-id="03b79-911">Если класс объекта на вершине стека не реализует новый класс (новый класс — это интерфейс) и не является производным от класса нового класса исключение <xref:System.InvalidCastException> возникает исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-911">If the class of the object on the top of the stack does not implement the new class (assuming the new class is an interface) and is not a derived class of the new class then an <xref:System.InvalidCastException> is thrown.</span></span> <span data-ttu-id="03b79-912">Если ссылка на объект является пустой ссылкой, `castclass` завершается успешно и возвращает новый объект как ссылку на null.</span><span class="sxs-lookup"><span data-stu-id="03b79-912">If the object reference is a null reference, `castclass` succeeds and returns the new object as a null reference.</span></span>  
  
 <span data-ttu-id="03b79-913"><xref:System.InvalidCastException> возникает, если obj не может быть приведен к классу.</span><span class="sxs-lookup"><span data-stu-id="03b79-913"><xref:System.InvalidCastException> is thrown if obj cannot be cast to class.</span></span>  
  
 <span data-ttu-id="03b79-914"><xref:System.TypeLoadException> возникает, если не удается найти класс.</span><span class="sxs-lookup"><span data-stu-id="03b79-914"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="03b79-915">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуется в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-915">This is typically detected when a Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-916">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `castclass` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-916">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `castclass` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-917">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-917">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ceq">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ceq;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ceq" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ceq" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ceq As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ceq;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ceq : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ceq" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-918">Сравнивает два значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-918">Compares two values.</span></span> <span data-ttu-id="03b79-919">Если они равны, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-919">If they are equal, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-920">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-920">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-921">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-921">Format</span></span>|<span data-ttu-id="03b79-922">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-922">Assembly Format</span></span>|<span data-ttu-id="03b79-923">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-923">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-924">FE 01</span><span class="sxs-lookup"><span data-stu-id="03b79-924">FE 01</span></span>|<span data-ttu-id="03b79-925">ceq</span><span class="sxs-lookup"><span data-stu-id="03b79-925">ceq</span></span>|<span data-ttu-id="03b79-926">Помещает в стек 1, если `value1` равно `value2`; в противном случае помещает 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-926">Pushes 1 if `value1` equals `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="03b79-927">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-927">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-928">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-928">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-929">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-929">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-930">`value2` и `value1` извлекаются из стека; `value1` сравнивается с `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-930">`value2` and `value1` are popped from the stack; `value1` is compared to `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-931">Если `value1` равен `value2`, 1 помещается в стек; в противном случае — значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-931">If `value1` is equal to `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-932">`ceq` Сравнивает инструкции `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-932">The `ceq` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="03b79-933">Если `value1` равен `value2`, 1 (типа `int32`) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-933">If `value1` is equal to `value2`, then 1 (of type `int32`) is pushed on the stack.</span></span> <span data-ttu-id="03b79-934">В противном случае — 0 (типа `int32`) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-934">Otherwise 0 (of type `int32`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="03b79-935">Для числа с плавающей запятой `ceq` возвращает 0, если числа неупорядочены (одно или оба имеют значения NaN).</span><span class="sxs-lookup"><span data-stu-id="03b79-935">For floating-point number, `ceq` will return 0 if the numbers are unordered (either or both are NaN).</span></span> <span data-ttu-id="03b79-936">Бесконечные значения равны на самих себя.</span><span class="sxs-lookup"><span data-stu-id="03b79-936">The infinite values are equal to themselves.</span></span>  
  
 <span data-ttu-id="03b79-937">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ceq` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-937">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ceq` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-938">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-938">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-939">Сравнивает два значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-939">Compares two values.</span></span> <span data-ttu-id="03b79-940">Если первое значение больше второго, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-940">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-941">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-942">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-942">Format</span></span>|<span data-ttu-id="03b79-943">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-943">Assembly Format</span></span>|<span data-ttu-id="03b79-944">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-945">FE 02</span><span class="sxs-lookup"><span data-stu-id="03b79-945">FE 02</span></span>|<span data-ttu-id="03b79-946">cgt</span><span class="sxs-lookup"><span data-stu-id="03b79-946">cgt</span></span>|<span data-ttu-id="03b79-947">Помещает в стек 1, если `value1` больше, чем `value2`; в противном случае помещает 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-947">Pushes 1 if `value1` is greater than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="03b79-948">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-949">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-949">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-950">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-950">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-951">`value2` и `value1` извлекаются из стека; `cgt` проверяет `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-951">`value2` and `value1` are popped from the stack; `cgt` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-952">Если `value1` больше, чем `value2`, 1 помещается в стек; в противном случае — значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-952">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-953">`cgt` Сравнивает инструкции `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-953">The `cgt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="03b79-954">Если `value1` строго больше, чем `value2`, а затем `int32` помещается значение 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-954">If `value1` is strictly greater than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="03b79-955">В противном случае `int32` значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-955">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="03b79-956">Для чисел с плавающей запятой `cgt` возвращает 0, если числа неупорядочены (то есть, если один или оба аргумента имеют значения NaN).</span><span class="sxs-lookup"><span data-stu-id="03b79-956">For floating-point numbers, `cgt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="03b79-957">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `cgt` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-957">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-958">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-958">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cgt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cgt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cgt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cgt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cgt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cgt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-959">Сравнивает два значения без знака или два неупорядоченных значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-959">Compares two unsigned or unordered values.</span></span> <span data-ttu-id="03b79-960">Если первое значение больше второго, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-960">If the first value is greater than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-961">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-961">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-962">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-962">Format</span></span>|<span data-ttu-id="03b79-963">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-963">Assembly Format</span></span>|<span data-ttu-id="03b79-964">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-964">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-965">FE 03</span><span class="sxs-lookup"><span data-stu-id="03b79-965">FE 03</span></span>|<span data-ttu-id="03b79-966">или cgt.un</span><span class="sxs-lookup"><span data-stu-id="03b79-966">cgt.un</span></span>|<span data-ttu-id="03b79-967">Помещает в стек 1, если `value1` больше, чем `value2`; в противном случае помещает в стек 0 (для значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-967">Pushes 1 if `value1` is greater than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-968">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-968">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-969">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-969">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-970">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-970">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-971">`value2` и `value1` извлекаются из стека; `cgt.un` проверяет `value1` больше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-971">`value2` and `value1` are popped from the stack; `cgt.un` tests if `value1` is greater than `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-972">Если `value1` больше, чем `value2`, 1 помещается в стек; в противном случае — значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-972">If `value1` is greater than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-973">`int32` В стеке помещается значение 1, если выполняется одно из следующих `true` :</span><span class="sxs-lookup"><span data-stu-id="03b79-973">An `int32` value of 1 is pushed on the stack if any of the following is `true` :</span></span>  
  
 <span data-ttu-id="03b79-974">Для чисел с плавающей запятой `value1` не упорядочен по отношению к `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-974">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
 <span data-ttu-id="03b79-975">Для целых значений `value1` строго больше, чем `value2` при сравнении чисел без знака.</span><span class="sxs-lookup"><span data-stu-id="03b79-975">For integer values, `value1` is strictly greater than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="03b79-976">В противном случае `int32` значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-976">Otherwise an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="03b79-977">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `cgt.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-977">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cgt.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-978">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-978">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ckfinite">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ckfinite" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ckfinite As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ckfinite;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ckfinite : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ckfinite" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-979">Создает исключение <see cref="T:System.ArithmeticException" />, если значение не является конечным числом.</span><span class="sxs-lookup"><span data-stu-id="03b79-979">Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-980">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-980">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-981">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-981">Format</span></span>|<span data-ttu-id="03b79-982">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-982">Assembly Format</span></span>|<span data-ttu-id="03b79-983">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-983">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-984">C3</span><span class="sxs-lookup"><span data-stu-id="03b79-984">C3</span></span>|<span data-ttu-id="03b79-985">Ckfinite</span><span class="sxs-lookup"><span data-stu-id="03b79-985">ckfinite</span></span>|<span data-ttu-id="03b79-986">исключение <xref:System.ArithmeticException> Если значение не является конечным числом.</span><span class="sxs-lookup"><span data-stu-id="03b79-986">throw <xref:System.ArithmeticException> if value is not a finite number.</span></span>|  
  
 <span data-ttu-id="03b79-987">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-987">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-988">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-988">`value` is pushed onto the stack.</span></span> 
  
2.  <span data-ttu-id="03b79-989">`value` извлекается из стека и `ckfinite` инструкции выполняются на нем.</span><span class="sxs-lookup"><span data-stu-id="03b79-989">`value` is popped from the stack and the `ckfinite` instruction is performed on it.</span></span>  
  
3.  <span data-ttu-id="03b79-990">`value` помещается обратно в стек, если исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="03b79-990">`value` is pushed back onto the stack if no exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-991">`ckfinite instruction` Вызывает <xref:System.ArithmeticException> Если `value` (число с плавающей запятой) имеет значение «не число» значением (NaN) или `+-` значение бесконечности.</span><span class="sxs-lookup"><span data-stu-id="03b79-991">The `ckfinite instruction` throws <xref:System.ArithmeticException> if `value` (a floating-point number) is either a "not a number" value (NaN) or a `+-` infinity value.</span></span> <span data-ttu-id="03b79-992">`Ckfinite` оставляет значение в стеке, если исключение не создается.</span><span class="sxs-lookup"><span data-stu-id="03b79-992">`Ckfinite` leaves the value on the stack if no exception is thrown.</span></span> <span data-ttu-id="03b79-993">Выполнение не определено, если `value` не является числом с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="03b79-993">Execution is unspecified if `value` is not a floating-point number.</span></span>  
  
 <span data-ttu-id="03b79-994"><xref:System.ArithmeticException> возникает, если `value` не является числом «normal».</span><span class="sxs-lookup"><span data-stu-id="03b79-994"><xref:System.ArithmeticException> is thrown if `value` is not a 'normal' number.</span></span>  
  
 <span data-ttu-id="03b79-995">Обратите внимание, что специальные исключения или производным от класса <xref:System.ArithmeticException> может быть более эффективными, передачи неверного значения обработчику исключений.</span><span class="sxs-lookup"><span data-stu-id="03b79-995">Note that a special exception or a derived class of <xref:System.ArithmeticException> may be more appropriate, passing the incorrect value to the exception handler.</span></span>  
  
 <span data-ttu-id="03b79-996">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ckfinite` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-996">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ckfinite` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-997">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-997">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-998">Сравнивает два значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-998">Compares two values.</span></span> <span data-ttu-id="03b79-999">Если первое значение меньше второго, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-999">If the first value is less than the second, the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1000">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1000">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1001">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1001">Format</span></span>|<span data-ttu-id="03b79-1002">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1002">Assembly Format</span></span>|<span data-ttu-id="03b79-1003">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1003">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1004">FE 04</span><span class="sxs-lookup"><span data-stu-id="03b79-1004">FE 04</span></span>|<span data-ttu-id="03b79-1005">Средство регистрации звонков</span><span class="sxs-lookup"><span data-stu-id="03b79-1005">clt</span></span>|<span data-ttu-id="03b79-1006">Помещает в стек 1, если `value1` — меньше, чем `value2`; в противном случае помещает 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-1006">Pushes 1 if `value1` is less than `value2`; else pushes 0.</span></span>|  
  
 <span data-ttu-id="03b79-1007">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1007">The stack transitional behavior, in sequential order, is:</span></span> 

1.  <span data-ttu-id="03b79-1008">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1008">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1009">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1009">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1010">`value2` и `value1` извлекаются из стека; `clt` проверяет `value1` — меньше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1010">`value2` and `value1` are popped from the stack; `clt` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-1011">Если `value1` — меньше, чем `value2`, 1 помещается в стек; в противном случае — значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1011">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1012">`clt` Сравнивает инструкции `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1012">The `clt` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="03b79-1013">Если `value1` является строго меньше, чем `value2`, а затем `int32` помещается значение 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1013">If `value1` is strictly less than `value2`, then an `int32` value of 1 is pushed on the stack.</span></span> <span data-ttu-id="03b79-1014">В противном случае `int32` значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1014">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
-   <span data-ttu-id="03b79-1015">Для чисел с плавающей запятой `clt` возвращает 0, если числа неупорядочены (то есть, если один или оба аргумента имеют значения NaN).</span><span class="sxs-lookup"><span data-stu-id="03b79-1015">For floating-point numbers, `clt` returns 0 if the numbers are unordered (that is, if one or both of the arguments are NaN).</span></span>  
  
 <span data-ttu-id="03b79-1016">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `clt` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1016">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1017">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1017">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clt_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Clt_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Clt_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Clt_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Clt_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Clt_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1018">Сравнивает два значения без знака или два неупорядоченных значения <paramref name="value1" /> и <paramref name="value2" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1018">Compares the unsigned or unordered values <paramref name="value1" /> and <paramref name="value2" />.</span></span> <span data-ttu-id="03b79-1019">Если значение <paramref name="value1" /> меньше значения <paramref name="value2" />, целочисленное значение 1 (<see langword="(int32" />) помещается в стек вычислений; в противном случае в стек вычислений помещается 0 (<see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-1019">If <paramref name="value1" /> is less than <paramref name="value2" />, then the integer value 1 <see langword="(int32" />) is pushed onto the evaluation stack; otherwise 0 (<see langword="int32" />) is pushed onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1020">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1020">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1021">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1021">Format</span></span>|<span data-ttu-id="03b79-1022">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1022">Assembly Format</span></span>|<span data-ttu-id="03b79-1023">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1023">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1024">FE 05</span><span class="sxs-lookup"><span data-stu-id="03b79-1024">FE 05</span></span>|<span data-ttu-id="03b79-1025">CLT.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1025">clt.un</span></span>|<span data-ttu-id="03b79-1026">Помещает в стек 1, если `value1` — меньше, чем `value2`; в противном случае помещает в стек 0 (для значений без знака).</span><span class="sxs-lookup"><span data-stu-id="03b79-1026">Pushes 1 if `value1` is less than `value2`; else pushes 0 (unsigned values).</span></span>|  
  
 <span data-ttu-id="03b79-1027">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1027">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1028">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1028">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1029">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1029">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1030">`value2` и `value1` извлекаются из стека; `clt.un` проверяет `value1` — меньше, чем `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1030">`value2` and `value1` are popped from the stack; `clt.un` tests if `value1` is less than `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-1031">Если `value1` — меньше, чем `value2`, 1 помещается в стек; в противном случае — значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1031">If `value1` is less than `value2`, 1 is pushed onto the stack; otherwise 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1032">`clt.un` Сравнивает инструкции `value1` и `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1032">The `clt.un` instruction compares `value1` and `value2`.</span></span> <span data-ttu-id="03b79-1033">`int32` В стеке помещается значение 1, если выполняется хотя бы одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="03b79-1033">An `int32` value of 1 is pushed on the stack if any of the following is true:</span></span>  
  
-   <span data-ttu-id="03b79-1034">`value1` является строго меньше, чем `value2` (как для `clt`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1034">`value1` is strictly less than `value2` (as for `clt`).</span></span>  
  
-   <span data-ttu-id="03b79-1035">Для чисел с плавающей запятой `value1` не упорядочен по отношению к `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1035">For floating-point numbers, `value1` is not ordered with respect to `value2`.</span></span>  
  
-   <span data-ttu-id="03b79-1036">Для целых значений `value1` является строго меньше, чем `value2` при сравнении чисел без знака.</span><span class="sxs-lookup"><span data-stu-id="03b79-1036">For integer values, `value1` is strictly less than `value2` when considered as unsigned numbers.</span></span>  
  
 <span data-ttu-id="03b79-1037">В противном случае `int32` значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1037">Otherwise, an `int32` value of 0 is pushed on the stack.</span></span>  
  
 <span data-ttu-id="03b79-1038">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `clt.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1038">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `clt.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1039">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1039">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constrained">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Constrained;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Constrained" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Constrained" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Constrained As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Constrained;" />
      <MemberSignature Language="F#" Value=" staticval mutable Constrained : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Constrained" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1040">Ограничивает тип, для которого был вызван виртуальный метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-1040">Constrains the type on which a virtual method call is made.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1041">В следующей таблице перечислены инструкции по шестнадцатеричном формате и формате сборки промежуточного языка MSIL, Microsoft, а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1041">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1042">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1042">Format</span></span>|<span data-ttu-id="03b79-1043">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1043">Assembly Format</span></span>|<span data-ttu-id="03b79-1044">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1044">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1045">FE 16 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-1045">FE 16 < `T` ></span></span>|<span data-ttu-id="03b79-1046">ограничение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1046">constrained.</span></span> `thisType`|<span data-ttu-id="03b79-1047">Вызов виртуального метода в типе ограниченное тип `T`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1047">Call a virtual method on a type constrained to be type `T`.</span></span>|  
  
 <span data-ttu-id="03b79-1048">`constrained` Префикс допускается только в `callvirt` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1048">The `constrained` prefix is permitted only on a `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="03b79-1049">Состояние стека MSIL на этом этапе может выглядеть следующим образом:</span><span class="sxs-lookup"><span data-stu-id="03b79-1049">The state of the MSIL stack at this point must be as follows:</span></span>  
  
1.  <span data-ttu-id="03b79-1050">Управляемый указатель, `ptr`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1050">A managed pointer, `ptr`, is pushed onto the stack.</span></span> <span data-ttu-id="03b79-1051">Тип `ptr` должен быть управляемый указатель (`&`) для `thisType`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1051">The type of `ptr` must be a managed pointer (`&`) to `thisType`.</span></span> <span data-ttu-id="03b79-1052">Обратите внимание, что это отличается от применения без префикса `callvirt` инструкции, что наличие ссылки `thisType`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1052">Note that this is different from the case of an unprefixed `callvirt` instruction, which expects a reference of `thisType`.</span></span>  
  
2.  <span data-ttu-id="03b79-1053">Аргументы метода `arg1` через `argN` помещаются в стек, как и в случае без префикса `callvirt` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1053">Method arguments `arg1` through `argN` are pushed onto the stack, just as with an unprefixed `callvirt` instruction.</span></span>  
  
 <span data-ttu-id="03b79-1054">`constrained` Префикс позволяет `callvirt` инструкциям, чтобы быть независимы в универсальный способ ли `thisType` является типом значения или ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-1054">The `constrained` prefix is designed to allow `callvirt` instructions to be made in a uniform way independent of whether `thisType` is a value type or a reference type.</span></span>  
  
 <span data-ttu-id="03b79-1055">Когда `callvirt` `method` предшествует инструкции `constrained` `thisType`, инструкция выполняется следующим образом:</span><span class="sxs-lookup"><span data-stu-id="03b79-1055">When a `callvirt` `method` instruction has been prefixed by `constrained` `thisType`, the instruction is executed as follows:</span></span>  
  
-   <span data-ttu-id="03b79-1056">Если `thisType` является ссылочным типом (в отличие от типа значения), затем `ptr` разыменован и передается как указатель «this» для `callvirt` из `method`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1056">If `thisType` is a reference type (as opposed to a value type) then `ptr` is dereferenced and passed as the 'this' pointer to the `callvirt` of `method`.</span></span>  
  
-   <span data-ttu-id="03b79-1057">Если `thisType` является типом значения и `thisType` реализует `method` затем `ptr` передается без изменений независимо от указатель «this» для `call` `method` инструкции для реализации `method` по `thisType`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1057">If `thisType` is a value type and `thisType` implements `method` then `ptr` is passed unmodified as the 'this' pointer to a `call` `method` instruction, for the implementation of `method` by `thisType`.</span></span>  
  
-   <span data-ttu-id="03b79-1058">Если `thisType` является типом значения и `thisType` не реализует `method` затем `ptr` разыменован, упаковывается и передается как указатель «this» для `callvirt` `method` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1058">If `thisType` is a value type and `thisType` does not implement `method` then `ptr` is dereferenced, boxed, and passed as the 'this' pointer to the `callvirt` `method` instruction.</span></span>  
  
 <span data-ttu-id="03b79-1059">Последний случай может произойти только тогда, когда `method` был определен на <xref:System.Object>, <xref:System.ValueType>, или <xref:System.Enum> и не переопределяется `thisType`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1059">This last case can occur only when `method` was defined on <xref:System.Object>, <xref:System.ValueType>, or <xref:System.Enum> and not overridden by `thisType`.</span></span> <span data-ttu-id="03b79-1060">В этом случае упаковка приводит копию исходного объекта должна быть выполнена.</span><span class="sxs-lookup"><span data-stu-id="03b79-1060">In this case, the boxing causes a copy of the original object to be made.</span></span> <span data-ttu-id="03b79-1061">Тем не менее так как ни один из методов класса <xref:System.Object>, <xref:System.ValueType>, и <xref:System.Enum> изменить состояние объекта, не удается обнаружить этот факт.</span><span class="sxs-lookup"><span data-stu-id="03b79-1061">However, because none of the methods of <xref:System.Object>, <xref:System.ValueType>, and <xref:System.Enum> modify the state of the object, this fact cannot be detected.</span></span>  
  
 <span data-ttu-id="03b79-1062">`constrained` Префикс поддерживает генераторов IL, которые создают универсальный код.</span><span class="sxs-lookup"><span data-stu-id="03b79-1062">The `constrained` prefix supports IL generators that create generic code.</span></span> <span data-ttu-id="03b79-1063">Обычно `callvirt` инструкция не является допустимой для типов значений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1063">Normally the `callvirt` instruction is not valid on value types.</span></span> <span data-ttu-id="03b79-1064">Вместо этого он необходим, компиляторы IL эффективного выполнения «this» преобразования, описанные выше, во время компиляции, в зависимости от типа `ptr` и вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-1064">Instead it is required that IL compilers effectively perform the 'this' transformation outlined above at compile time, depending on the type of `ptr` and the method being called.</span></span> <span data-ttu-id="03b79-1065">Тем не менее, если `ptr` является универсальным типом, неизвестен во время компиляции, это не позволяет сделать это преобразование во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1065">However, when `ptr` is a generic type that is unknown at compile time, it is not possible to make this transformation at compile time.</span></span>  
  
 <span data-ttu-id="03b79-1066">`constrained` Opcode позволяет компиляторам промежуточного языка вызов виртуальной функции в универсальный способ зависит от ли `ptr` является типом значения или ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-1066">The `constrained` opcode allows IL compilers to make a call to a virtual function in a uniform way independent of whether `ptr` is a value type or a reference type.</span></span> <span data-ttu-id="03b79-1067">Несмотря на то, что он предназначен для случая где `thisType` является переменной универсального типа `constrained` префикс также работает для неуниверсальных типов и могут упростить процесс создания виртуальных вызовов на языках, которые скрывают различие между типами значений и ссылочные типы.</span><span class="sxs-lookup"><span data-stu-id="03b79-1067">Although it is intended for the case where `thisType` is a generic type variable, the `constrained` prefix also works for nongeneric types and can reduce the complexity of generating virtual calls in languages that hide the distinction between value types and reference types.</span></span>  
  
 <span data-ttu-id="03b79-1068">С помощью `constrained` префикс также позволяет избежать потенциальных проблем управления версиями с типами значений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1068">Using the `constrained` prefix also avoids potential versioning problems with value types.</span></span> <span data-ttu-id="03b79-1069">Если `constrained` префикс не используется, в зависимости от того, является ли тип значения переопределяет метод System.Object должны выдаваться разные IL.</span><span class="sxs-lookup"><span data-stu-id="03b79-1069">If the `constrained` prefix is not used, different IL must be emitted depending on whether or not a value type overrides a method of System.Object.</span></span> <span data-ttu-id="03b79-1070">Например, если тип значения `V` переопределяет метод Object.ToString() `call` `V.ToString()` создается инструкция; Если это не так, `box` инструкции и `callvirt` `Object.ToString()` создаются инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1070">For example, if a value type `V` overrides the Object.ToString() method, a `call` `V.ToString()` instruction is emitted; if it does not, a `box` instruction and a `callvirt` `Object.ToString()` instruction are emitted.</span></span> <span data-ttu-id="03b79-1071">Проблема может возникнуть в первом примере, если переопределение позднее будут удалены и в последнем случае, если переопределение позже добавить.</span><span class="sxs-lookup"><span data-stu-id="03b79-1071">A versioning problem can arise in the former case if the override is later removed, and in the latter case if an override is later added.</span></span>  
  
 <span data-ttu-id="03b79-1072">`constrained` Префикс также используется для вызова методов интерфейса для типов значений, так как метод типов значений, реализующий метод интерфейса можно изменить с помощью `MethodImpl`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1072">The `constrained` prefix can also be used for invocation of interface methods on value types, because the value type method implementing the interface method can be changed using a `MethodImpl`.</span></span> <span data-ttu-id="03b79-1073">Если `constrained` префикс не используется, компилятор вынужден выбирать, какие значения типа методов для привязки к во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1073">If the `constrained` prefix is not used, the compiler is forced to choose which of the value type's methods to bind to at compile time.</span></span> <span data-ttu-id="03b79-1074">С помощью `constrained` префикс позволяет MSIL-код для привязки к методу, который реализует метод интерфейса во время выполнения, а не во время компиляции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1074">Using the `constrained` prefix allows the MSIL to bind to the method that implements the interface method at run time, rather than at compile time.</span></span>  
  
 <span data-ttu-id="03b79-1075">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `constrained` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1075">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `constrained` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1076">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-1076">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1077">Преобразует верхнее значение в стеке вычислений в тип <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1077">Converts the value on top of the evaluation stack to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1078">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1078">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1079">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1079">Format</span></span>|<span data-ttu-id="03b79-1080">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1080">Assembly Format</span></span>|<span data-ttu-id="03b79-1081">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1081">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1082">D3</span><span class="sxs-lookup"><span data-stu-id="03b79-1082">D3</span></span>|<span data-ttu-id="03b79-1083">conv.i</span><span class="sxs-lookup"><span data-stu-id="03b79-1083">conv.i</span></span>|<span data-ttu-id="03b79-1084">Преобразовать в `native int`и помещает `native int` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1084">Convert to `native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1085">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1085">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1086">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1086">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1087">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1087">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1088">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1088">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1089">`conv.i` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1089">The `conv.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1090">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1090">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1091">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1091">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1092">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1092">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1093">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1093">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1094">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1094">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1095">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1095">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1096">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1096">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1097">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1097">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1098">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1098">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1099">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1099">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1100">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.i` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1100">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1101">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1101">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1102">Преобразует верхнее значение в стеке вычислений в <see langword="int8" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1102">Converts the value on top of the evaluation stack to <see langword="int8" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1103">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1103">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1104">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1104">Format</span></span>|<span data-ttu-id="03b79-1105">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1105">Assembly Format</span></span>|<span data-ttu-id="03b79-1106">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1106">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1107">67</span><span class="sxs-lookup"><span data-stu-id="03b79-1107">67</span></span>|<span data-ttu-id="03b79-1108">conv.i1</span><span class="sxs-lookup"><span data-stu-id="03b79-1108">conv.i1</span></span>|<span data-ttu-id="03b79-1109">Преобразовать в `int8`и помещает `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1109">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1110">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1110">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1111">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1111">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1112">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1112">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1113">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1113">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1114">`conv.i1` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1114">The `conv.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1115">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1115">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1116">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1116">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1117">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1117">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1118">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1118">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1119">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1119">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1120">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1120">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1121">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1121">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1122">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1122">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1123">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1123">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1124">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1124">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1125">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.i1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1125">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1126">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1126">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1127">Преобразует верхнее значение в стеке вычислений в <see langword="int16" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1127">Converts the value on top of the evaluation stack to <see langword="int16" />, then extends (pads) it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1128">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1128">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1129">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1129">Format</span></span>|<span data-ttu-id="03b79-1130">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1130">Assembly Format</span></span>|<span data-ttu-id="03b79-1131">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1131">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1132">68</span><span class="sxs-lookup"><span data-stu-id="03b79-1132">68</span></span>|<span data-ttu-id="03b79-1133">conv.I2</span><span class="sxs-lookup"><span data-stu-id="03b79-1133">conv.i2</span></span>|<span data-ttu-id="03b79-1134">Преобразовать в `int16`и помещает `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1134">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1135">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1135">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1136">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1136">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1137">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1137">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1138">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1138">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1139">`conv.i2` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1139">The `conv.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1140">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1140">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1141">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1141">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1142">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1142">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1143">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1143">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1144">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1144">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1145">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1145">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1146">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1146">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1147">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1147">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1148">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1148">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1149">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1149">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1150">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.i2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1150">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1151">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1151">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1152">Преобразует верхнее значение в стеке вычислений в тип <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1152">Converts the value on top of the evaluation stack to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1153">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1153">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1154">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1154">Format</span></span>|<span data-ttu-id="03b79-1155">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1155">Assembly Format</span></span>|<span data-ttu-id="03b79-1156">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1156">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1157">69</span><span class="sxs-lookup"><span data-stu-id="03b79-1157">69</span></span>|<span data-ttu-id="03b79-1158">conv.i4</span><span class="sxs-lookup"><span data-stu-id="03b79-1158">conv.i4</span></span>|<span data-ttu-id="03b79-1159">Преобразовать в `int32`и помещает `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1159">Convert to `int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1160">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1160">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1161">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1161">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1162">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1162">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1163">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1163">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1164">`conv.i4` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1164">The `conv.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1165">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1165">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1166">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1166">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1167">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1167">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1168">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1168">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1169">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1169">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1170">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1170">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1171">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1171">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1172">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1172">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1173">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1173">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1174">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1174">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1175">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1175">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1176">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1176">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1177">Преобразует верхнее значение в стеке вычислений в тип <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1177">Converts the value on top of the evaluation stack to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1178">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1178">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1179">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1179">Format</span></span>|<span data-ttu-id="03b79-1180">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1180">Assembly Format</span></span>|<span data-ttu-id="03b79-1181">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1181">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1182">6A</span><span class="sxs-lookup"><span data-stu-id="03b79-1182">6A</span></span>|<span data-ttu-id="03b79-1183">conv.I8</span><span class="sxs-lookup"><span data-stu-id="03b79-1183">conv.i8</span></span>|<span data-ttu-id="03b79-1184">Преобразовать в `int64`и помещает `int64` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1184">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1185">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1185">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1186">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1186">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1187">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1187">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1188">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1188">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1189">`conv.i8` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1189">The `conv.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1190">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1190">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1191">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1191">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1192">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1192">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1193">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1193">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1194">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1194">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1195">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1195">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1196">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1196">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1197">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1197">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1198">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1198">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1199">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1199">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1200">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1202">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="native int" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1202">Converts the signed value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1203">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1204">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1204">Format</span></span>|<span data-ttu-id="03b79-1205">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1205">Assembly Format</span></span>|<span data-ttu-id="03b79-1206">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1207">D4</span><span class="sxs-lookup"><span data-stu-id="03b79-1207">D4</span></span>|<span data-ttu-id="03b79-1208">conv.ovf.i</span><span class="sxs-lookup"><span data-stu-id="03b79-1208">conv.ovf.i</span></span>|<span data-ttu-id="03b79-1209">Преобразовать в `native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1209">Convert to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1210">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1211">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1211">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1212">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1212">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1213">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1213">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1214">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1214">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1215">`conv.ovf.i` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1215">The `conv.ovf.i` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1216">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1216">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1217">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1217">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1218">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1218">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1219"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1219"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1220">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1220">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1221">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1221">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1222">Преобразует значение без знака на вершине стека вычислений в значение <see langword="native int" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1222">Converts the unsigned value on top of the evaluation stack to signed <see langword="native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1223">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1223">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1224">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1224">Format</span></span>|<span data-ttu-id="03b79-1225">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1225">Assembly Format</span></span>|<span data-ttu-id="03b79-1226">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1226">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1227">8A</span><span class="sxs-lookup"><span data-stu-id="03b79-1227">8A</span></span>|<span data-ttu-id="03b79-1228">conv.ovf.i.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1228">conv.ovf.i.un</span></span>|<span data-ttu-id="03b79-1229">Преобразует значение без знака `native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1229">Converts an unsigned value to a `native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1230">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1230">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1231">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1231">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1232">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1232">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1233">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1233">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1234">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1234">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1235">`conv.ovf.i.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1235">The `conv.ovf.i.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1236">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1236">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1237">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1237">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1238">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1238">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1239"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1239"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1240">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1240">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1241">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1241">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1242">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int8" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1242">Converts the signed value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1243">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1243">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1244">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1244">Format</span></span>|<span data-ttu-id="03b79-1245">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1245">Assembly Format</span></span>|<span data-ttu-id="03b79-1246">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1246">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1247">B3</span><span class="sxs-lookup"><span data-stu-id="03b79-1247">B3</span></span>|<span data-ttu-id="03b79-1248">conv.ovf.i1</span><span class="sxs-lookup"><span data-stu-id="03b79-1248">conv.ovf.i1</span></span>|<span data-ttu-id="03b79-1249">Преобразовать в `int8` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1249">Convert to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1250">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1250">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1251">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1251">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1252">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1252">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1253">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1253">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1254">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1254">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1255">`conv.ovf.i1` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1255">The `conv.ovf.i1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1256">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1256">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1257">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1257">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1258">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1258">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1259"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1259"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1260">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1260">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1261">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1261">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1262">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int8" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1262">Converts the unsigned value on top of the evaluation stack to signed <see langword="int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1263">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1263">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1264">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1264">Format</span></span>|<span data-ttu-id="03b79-1265">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1265">Assembly Format</span></span>|<span data-ttu-id="03b79-1266">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1266">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1267">82</span><span class="sxs-lookup"><span data-stu-id="03b79-1267">82</span></span>|<span data-ttu-id="03b79-1268">conv.ovf.i1.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1268">conv.ovf.i1.un</span></span>|<span data-ttu-id="03b79-1269">Преобразует значение без знака `int8` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1269">Converts an unsigned value to an `int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1270">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1270">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1271">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1271">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1272">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1272">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1273">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1273">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1274">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1274">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1275">`conv.ovf.i1.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1275">The `conv.ovf.i1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1276">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1276">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1277">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1277">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1278">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1278">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1279"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1279"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1280">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i1.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1280">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i1.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1281">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1281">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1282">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int16" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1282">Converts the signed value on top of the evaluation stack to signed <see langword="int16" /> and extending it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1283">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1283">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1284">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1284">Format</span></span>|<span data-ttu-id="03b79-1285">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1285">Assembly Format</span></span>|<span data-ttu-id="03b79-1286">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1286">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1287">B5</span><span class="sxs-lookup"><span data-stu-id="03b79-1287">B5</span></span>|<span data-ttu-id="03b79-1288">conv.ovf.I2</span><span class="sxs-lookup"><span data-stu-id="03b79-1288">conv.ovf.i2</span></span>|<span data-ttu-id="03b79-1289">Преобразовать в `int16` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1289">Convert to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1290">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1290">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1291">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1291">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1292">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1292">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1293">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1293">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1294">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1294">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1295">`conv.ovf.i2` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1295">The `conv.ovf.i2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1296">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1296">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1297">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1297">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1298">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1298">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1299"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1299"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1300">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1300">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1301">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1301">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1302">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int16" /> со знаком, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1302">Converts the unsigned value on top of the evaluation stack to signed <see langword="int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1303">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1303">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1304">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1304">Format</span></span>|<span data-ttu-id="03b79-1305">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1305">Assembly Format</span></span>|<span data-ttu-id="03b79-1306">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1306">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1307">83</span><span class="sxs-lookup"><span data-stu-id="03b79-1307">83</span></span>|<span data-ttu-id="03b79-1308">conv.ovf.I2.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1308">conv.ovf.i2.un</span></span>|<span data-ttu-id="03b79-1309">Преобразует значение без знака `int16` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1309">Converts an unsigned value to an `int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1310">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1310">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1311">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1311">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1312">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1312">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1313">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1313">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1314">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1314">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1315">`conv.ovf.i2.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1315">The `conv.ovf.i2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1316">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1316">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1317">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1317">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1318">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1318">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1319"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1319"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1320">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i2.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1320">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i2.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1321">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1321">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1322">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int32" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1322">Converts the signed value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1323">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1323">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1324">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1324">Format</span></span>|<span data-ttu-id="03b79-1325">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1325">Assembly Format</span></span>|<span data-ttu-id="03b79-1326">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1326">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1327">B7</span><span class="sxs-lookup"><span data-stu-id="03b79-1327">B7</span></span>|<span data-ttu-id="03b79-1328">conv.ovf.i4</span><span class="sxs-lookup"><span data-stu-id="03b79-1328">conv.ovf.i4</span></span>|<span data-ttu-id="03b79-1329">Преобразовать в `int32` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1329">Convert to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1330">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1330">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1331">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1331">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1332">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1332">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1333">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1333">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1334">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1334">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1335">`conv.ovf.i4` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1335">The `conv.ovf.i4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1336">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1336">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1337">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1337">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1338">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1338">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1339"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1339"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1340">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1340">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1341">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1341">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1342">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int32" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1342">Converts the unsigned value on top of the evaluation stack to signed <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1343">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1343">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1344">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1344">Format</span></span>|<span data-ttu-id="03b79-1345">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1345">Assembly Format</span></span>|<span data-ttu-id="03b79-1346">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1346">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1347">84</span><span class="sxs-lookup"><span data-stu-id="03b79-1347">84</span></span>|<span data-ttu-id="03b79-1348">conv.ovf.i4.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1348">conv.ovf.i4.un</span></span>|<span data-ttu-id="03b79-1349">Преобразует значение без знака `int32` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1349">Converts an unsigned value to an `int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1350">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1350">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1351">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1351">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1352">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1352">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1353">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1353">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1354">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1354">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1355">`conv.ovf.i4.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1355">The `conv.ovf.i4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1356">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1356">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1357">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1357">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1358">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1358">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1359"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1359"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1360">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i4.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i4.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1361">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1361">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1362">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="int64" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1362">Converts the signed value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1363">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1363">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1364">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1364">Format</span></span>|<span data-ttu-id="03b79-1365">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1365">Assembly Format</span></span>|<span data-ttu-id="03b79-1366">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1366">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1367">B9</span><span class="sxs-lookup"><span data-stu-id="03b79-1367">B9</span></span>|<span data-ttu-id="03b79-1368">conv.ovf.I8</span><span class="sxs-lookup"><span data-stu-id="03b79-1368">conv.ovf.i8</span></span>|<span data-ttu-id="03b79-1369">Преобразовать в `int64` (в стеке как `int64`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1369">Convert to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1370">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1370">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1371">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1371">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1372">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1372">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1373">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1373">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1374">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1374">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1375">`conv.ovf.i8` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1375">The `conv.ovf.i8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1376">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1376">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1377">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1377">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1378">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1378">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1379"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1379"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1380">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1380">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1381">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1381">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_I8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_I8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_I8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_I8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1382">Преобразует значение без знака на вершине стека вычислений в значение <see langword="int64" /> со знаком и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1382">Converts the unsigned value on top of the evaluation stack to signed <see langword="int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1383">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1383">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1384">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1384">Format</span></span>|<span data-ttu-id="03b79-1385">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1385">Assembly Format</span></span>|<span data-ttu-id="03b79-1386">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1386">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1387">85</span><span class="sxs-lookup"><span data-stu-id="03b79-1387">85</span></span>|<span data-ttu-id="03b79-1388">conv.ovf.I8.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1388">conv.ovf.i8.un</span></span>|<span data-ttu-id="03b79-1389">Преобразует значение без знака `int64` (в стеке как `int64`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1389">Converts an unsigned value to an `int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1390">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1390">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1391">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1391">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1392">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1392">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1393">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1393">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1394">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1394">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1395">`conv.ovf.i8.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1395">The `conv.ovf.i8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1396">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1396">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1397">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1397">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1398">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1398">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1399"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1399"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1400">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.i8.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1400">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.i8.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1401">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1401">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1402">Преобразует значение со знаком на вершине стека вычислений в <see langword="unsigned native int" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1402">Converts the signed value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1403">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1403">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1404">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1404">Format</span></span>|<span data-ttu-id="03b79-1405">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1405">Assembly Format</span></span>|<span data-ttu-id="03b79-1406">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1406">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1407">D5</span><span class="sxs-lookup"><span data-stu-id="03b79-1407">D5</span></span>|<span data-ttu-id="03b79-1408">conv.ovf.u</span><span class="sxs-lookup"><span data-stu-id="03b79-1408">conv.ovf.u</span></span>|<span data-ttu-id="03b79-1409">Преобразовать в `unsigned native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1409">Convert to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1410">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1410">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1411">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1411">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1412">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1412">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1413">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1413">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1414">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1414">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1415">`conv.ovf.u` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1415">The `conv.ovf.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1416">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1416">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1417">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1417">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1418">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1418">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1419"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1419"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1420">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1420">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1421">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1421">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1422">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned native int" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1422">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned native int" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1423">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1423">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1424">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1424">Format</span></span>|<span data-ttu-id="03b79-1425">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1425">Assembly Format</span></span>|<span data-ttu-id="03b79-1426">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1426">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1427">8B</span><span class="sxs-lookup"><span data-stu-id="03b79-1427">8B</span></span>|<span data-ttu-id="03b79-1428">conv.ovf.u.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1428">conv.ovf.u.un</span></span>|<span data-ttu-id="03b79-1429">Преобразует значение в без знака `unsigned native int` (в стеке как `native int`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1429">Converts un unsigned value to an `unsigned native int` (on the stack as `native int`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1430">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1430">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1431">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1431">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1432">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1432">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1433">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1433">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1434">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1434">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1435">`conv.ovf.u.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1435">The `conv.ovf.u.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1436">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1436">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1437">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1437">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1438">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1438">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1439"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1439"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1440">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.uvf.u.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1440">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.uvf.u.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1441">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1441">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1442">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="unsigned int8" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1442">Converts the signed value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1443">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1443">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1444">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1444">Format</span></span>|<span data-ttu-id="03b79-1445">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1445">Assembly Format</span></span>|<span data-ttu-id="03b79-1446">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1446">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1447">B4</span><span class="sxs-lookup"><span data-stu-id="03b79-1447">B4</span></span>|<span data-ttu-id="03b79-1448">conv.ovf.U1</span><span class="sxs-lookup"><span data-stu-id="03b79-1448">conv.ovf.u1</span></span>|<span data-ttu-id="03b79-1449">Преобразовать в `unsigned int8` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1449">Convert to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1450">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1450">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1451">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1451">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1452">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1452">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1453">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1453">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1454">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1454">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1455">`conv.ovf.u1` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1455">The `conv.ovf.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1456">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1456">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1457">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1457">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1458">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1458">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1459"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1459"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1460">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1460">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1461">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1461">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U1_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U1_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U1_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U1_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1462">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int8" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1462">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int8" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1463">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1463">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1464">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1464">Format</span></span>|<span data-ttu-id="03b79-1465">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1465">Assembly Format</span></span>|<span data-ttu-id="03b79-1466">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1466">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1467">86</span><span class="sxs-lookup"><span data-stu-id="03b79-1467">86</span></span>|<span data-ttu-id="03b79-1468">conv.ovf.U1.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1468">conv.ovf.u1.un</span></span>|<span data-ttu-id="03b79-1469">Преобразует значение без знака `unsigned int8` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1469">Converts an unsigned value to an `unsigned int8` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1470">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1470">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1471">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1471">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1472">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1472">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1473">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1473">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1474">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1474">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1475">`conv.ovf.u1.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1475">The `conv.ovf.u1.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1476">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1476">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1477">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1477">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1478">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1478">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1479"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1479"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1480">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u1.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1480">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u1.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1481">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1481">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1482">Преобразует значение со знаком на вершине стека вычислений в значение <see langword="unsigned int16" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1482">Converts the signed value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1483">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1483">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1484">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1484">Format</span></span>|<span data-ttu-id="03b79-1485">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1485">Assembly Format</span></span>|<span data-ttu-id="03b79-1486">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1486">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1487">B6</span><span class="sxs-lookup"><span data-stu-id="03b79-1487">B6</span></span>|<span data-ttu-id="03b79-1488">conv.ovf.U2</span><span class="sxs-lookup"><span data-stu-id="03b79-1488">conv.ovf.u2</span></span>|<span data-ttu-id="03b79-1489">Преобразовать в `unsigned int16` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1489">Convert to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1490">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1490">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1491">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1491">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1492">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1492">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1493">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1493">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1494">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1494">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1495">`conv.ovf.u2` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1495">The `conv.ovf.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1496">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1496">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1497">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1497">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1498">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1498">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1499"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1499"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1500">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1500">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1501">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1501">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U2_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U2_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U2_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U2_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1502">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int16" />, расширяет его до <see langword="int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1502">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int16" /> and extends it to <see langword="int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1503">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1503">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1504">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1504">Format</span></span>|<span data-ttu-id="03b79-1505">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1505">Assembly Format</span></span>|<span data-ttu-id="03b79-1506">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1506">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1507">87</span><span class="sxs-lookup"><span data-stu-id="03b79-1507">87</span></span>|<span data-ttu-id="03b79-1508">conv.ovf.U2.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1508">conv.ovf.u2.un</span></span>|<span data-ttu-id="03b79-1509">Преобразует значение без знака `unsigned int16` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1509">Converts an unsigned value to an `unsigned int16` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1510">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1510">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1511">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1511">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1512">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1512">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1513">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1513">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1514">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1514">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1515">`conv.ovf.u2.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1515">The `conv.ovf.u2.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1516">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1516">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1517">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1517">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1518">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1518">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1519"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1519"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1520">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u2.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1520">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u2.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1521">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1521">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1522">Преобразует значение со знаком на вершине стека вычислений в <see langword="unsigned int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1522">Converts the signed value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1523">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1523">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1524">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1524">Format</span></span>|<span data-ttu-id="03b79-1525">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1525">Assembly Format</span></span>|<span data-ttu-id="03b79-1526">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1526">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1527">B8</span><span class="sxs-lookup"><span data-stu-id="03b79-1527">B8</span></span>|<span data-ttu-id="03b79-1528">conv.ovf.U4</span><span class="sxs-lookup"><span data-stu-id="03b79-1528">conv.ovf.u4</span></span>|<span data-ttu-id="03b79-1529">Преобразовать в `unsigned int32` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1529">Convert to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1530">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1530">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1531">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1531">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1532">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1532">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1533">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1533">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1534">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1534">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1535">`conv.ovf.u4` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1535">The `conv.ovf.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1536">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1536">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1537">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1537">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1538">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1538">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1539"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1539"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1540">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1540">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1541">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1541">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U4_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U4_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U4_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U4_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1542">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int32" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1542">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int32" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1543">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1543">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1544">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1544">Format</span></span>|<span data-ttu-id="03b79-1545">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1545">Assembly Format</span></span>|<span data-ttu-id="03b79-1546">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1546">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1547">88</span><span class="sxs-lookup"><span data-stu-id="03b79-1547">88</span></span>|<span data-ttu-id="03b79-1548">conv.ovf.U4.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1548">conv.ovf.u4.un</span></span>|<span data-ttu-id="03b79-1549">Преобразует значение без знака `unsigned int32` (в стеке как `int32`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1549">Converts an unsigned value to an `unsigned int32` (on the stack as `int32`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1550">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1550">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1551">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1551">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1552">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1552">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1553">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1553">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1554">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1554">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1555">`conv.ovf.u4.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1555">The `conv.ovf.u4.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1556">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1556">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1557">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1557">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1558">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1558">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1559"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1559"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1560">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u4.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1560">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u4.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1561">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1561">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1562">Преобразует значение со знаком на вершине стека вычислений в <see langword="unsigned int64" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1562">Converts the signed value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1563">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1563">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1564">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1564">Format</span></span>|<span data-ttu-id="03b79-1565">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1565">Assembly Format</span></span>|<span data-ttu-id="03b79-1566">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1566">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1567">BA</span><span class="sxs-lookup"><span data-stu-id="03b79-1567">BA</span></span>|<span data-ttu-id="03b79-1568">conv.ovf.u8</span><span class="sxs-lookup"><span data-stu-id="03b79-1568">conv.ovf.u8</span></span>|<span data-ttu-id="03b79-1569">Преобразовать в `unsigned int64` (в стеке как `int64`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1569">Convert to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1570">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1570">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1571">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1571">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1572">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1572">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1573">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1573">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1574">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1574">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1575">`conv.ovf.u8` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1575">The `conv.ovf.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1576">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1576">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1577">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1577">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1578">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1578">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1579"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1579"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1580">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1580">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1581">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1581">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_Ovf_U8_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_Ovf_U8_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_Ovf_U8_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_Ovf_U8_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1582">Преобразует значение без знака на вершине стека вычислений в значение <see langword="unsigned int64" /> и создает исключение <see cref="T:System.OverflowException" /> в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1582">Converts the unsigned value on top of the evaluation stack to <see langword="unsigned int64" />, throwing <see cref="T:System.OverflowException" /> on overflow.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1583">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1583">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1584">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1584">Format</span></span>|<span data-ttu-id="03b79-1585">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1585">Assembly Format</span></span>|<span data-ttu-id="03b79-1586">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1586">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1587">89</span><span class="sxs-lookup"><span data-stu-id="03b79-1587">89</span></span>|<span data-ttu-id="03b79-1588">conv.ovf.u8.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1588">conv.ovf.u8.un</span></span>|<span data-ttu-id="03b79-1589">Преобразует значение без знака `unsigned int64` (в стеке как `int64`) и создает исключение в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1589">Converts an unsigned value to an `unsigned int64` (on the stack as `int64`) and throw an exception on overflow.</span></span>|  
  
 <span data-ttu-id="03b79-1590">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1590">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1591">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1591">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1592">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1592">`value` is popped from the stack and the conversion operation is attempted.</span></span> <span data-ttu-id="03b79-1593">Если возникает переполнение, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1593">If overflow occurs, an exception is thrown.</span></span>  
  
3.  <span data-ttu-id="03b79-1594">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1594">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1595">`conv.ovf.u8.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1595">The `conv.ovf.u8.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and places that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1596">Если значение слишком велико или слишком мало для представления в целевой тип, выдается исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1596">If the value is too large or too small to be represented by the target type, an exception is thrown.</span></span>  
  
 <span data-ttu-id="03b79-1597">Преобразование чисел с плавающей запятой в целые усечь числом, дробная часть.</span><span class="sxs-lookup"><span data-stu-id="03b79-1597">Conversions from floating-point numbers to integer values truncate the number toward zero.</span></span> <span data-ttu-id="03b79-1598">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.ovf.i` или `conv.ovf.u` используются, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1598">Note that integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.ovf.i` or `conv.ovf.u` are used, in which case the result is also `native int`).</span></span>  
  
 <span data-ttu-id="03b79-1599"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1599"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-1600">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.ovf.u8.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1600">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.ovf.u8.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1601">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1601">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1602">Преобразование целочисленного значения без знака на вершине стека вычислений в <see langword="float32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1602">Converts the unsigned integer value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1603">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1603">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1604">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1604">Format</span></span>|<span data-ttu-id="03b79-1605">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1605">Assembly Format</span></span>|<span data-ttu-id="03b79-1606">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1606">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1607">76</span><span class="sxs-lookup"><span data-stu-id="03b79-1607">76</span></span>|<span data-ttu-id="03b79-1608">conv.r.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1608">conv.r.un</span></span>|<span data-ttu-id="03b79-1609">Преобразовать целое число без знака с плавающей запятой, помещает `F` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1609">Convert unsigned integer to floating-point, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1610">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1610">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1611">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1611">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1612">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1612">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1613">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1613">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1614">`conv.r.un` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1614">The `conv.r.un` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1615">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1615">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1616">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1616">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1617">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1617">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1618">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1618">When converting from a `float64` to a `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1619">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1619">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1620">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1620">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1621">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1621">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1622">Если возникает переполнение, преобразование типа с плавающей запятой в целое число `result` возвращается не определен.</span><span class="sxs-lookup"><span data-stu-id="03b79-1622">If overflow occurs converting a floating-point type to an integer the `result` returned is unspecified.</span></span> <span data-ttu-id="03b79-1623">`conv.r.un` Операция принимает целое число из стека, интерпретирует его как число без знака и заменяет его значение с плавающей запятой, чтобы представить целое число: либо `float32`, если это достаточно широким, чтобы представить целое число без потери точности или else `float64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1623">The `conv.r.un` operation takes an integer off the stack, interprets it as unsigned, and replaces it with a floating-point number to represent the integer: either a `float32`, if this is wide enough to represent the integer without loss of precision, or else a `float64`.</span></span>  
  
 <span data-ttu-id="03b79-1624">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1624">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="03b79-1625">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.r.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1627">Преобразует верхнее значение в стеке вычислений в тип <see langword="float32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1627">Converts the value on top of the evaluation stack to <see langword="float32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1628">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1629">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1629">Format</span></span>|<span data-ttu-id="03b79-1630">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1630">Assembly Format</span></span>|<span data-ttu-id="03b79-1631">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1632">6B</span><span class="sxs-lookup"><span data-stu-id="03b79-1632">6B</span></span>|<span data-ttu-id="03b79-1633">conv.R4</span><span class="sxs-lookup"><span data-stu-id="03b79-1633">conv.r4</span></span>|<span data-ttu-id="03b79-1634">Преобразовать в `float32`и помещает `F` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1634">Convert to `float32`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1635">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1636">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1636">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1637">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1637">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1638">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1638">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1639">`conv.r4` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1639">The `conv.r4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1640">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1640">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1641">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1641">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1642">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1642">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1643">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1643">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1644">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1644">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1645">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1645">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1646">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1646">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1647">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1647">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1648">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1648">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="03b79-1649">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.r4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1649">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1650">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1650">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1651">Преобразует верхнее значение в стеке вычислений в тип <see langword="float64" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1651">Converts the value on top of the evaluation stack to <see langword="float64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1652">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1652">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1653">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1653">Format</span></span>|<span data-ttu-id="03b79-1654">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1654">Assembly Format</span></span>|<span data-ttu-id="03b79-1655">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1655">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1656">6C</span><span class="sxs-lookup"><span data-stu-id="03b79-1656">6C</span></span>|<span data-ttu-id="03b79-1657">conv.R8</span><span class="sxs-lookup"><span data-stu-id="03b79-1657">conv.r8</span></span>|<span data-ttu-id="03b79-1658">Преобразовать в `float64`и помещает `F` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1658">Convert to `float64`, pushing `F` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1659">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1659">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1660">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1660">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1661">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1661">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1662">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1662">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1663">`conv.r8` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1663">The `conv.r8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1664">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1664">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1665">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1665">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1666">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1666">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1667">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1667">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1668">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1668">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1669">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1669">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1670">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1670">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1671">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1671">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1672">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1672">No exceptions are ever thrown when using this field.</span></span>  
  
 <span data-ttu-id="03b79-1673">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.r8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1673">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.r8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1674">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1674">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1675">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned native int" />, а затем расширяет его до <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1675">Converts the value on top of the evaluation stack to <see langword="unsigned native int" />, and extends it to <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1676">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1676">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1677">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1677">Format</span></span>|<span data-ttu-id="03b79-1678">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1678">Assembly Format</span></span>|<span data-ttu-id="03b79-1679">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1679">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1680">E0</span><span class="sxs-lookup"><span data-stu-id="03b79-1680">E0</span></span>|<span data-ttu-id="03b79-1681">conv.u</span><span class="sxs-lookup"><span data-stu-id="03b79-1681">conv.u</span></span>|<span data-ttu-id="03b79-1682">Преобразовать в `unsigned native int`и помещает `native int` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1682">Convert to `unsigned native int`, pushing `native int` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1683">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1683">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1684">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1684">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1685">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1685">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1686">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1686">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1687">`conv.u` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1687">The `conv.u` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1688">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1688">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1689">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1689">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1690">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1690">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1691">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1691">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1692">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1692">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1693">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1693">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1694">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1694">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1695">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1695">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1696">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1696">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1697">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1697">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1698">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.u` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1700">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int8" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1700">Converts the value on top of the evaluation stack to <see langword="unsigned int8" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1701">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1702">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1702">Format</span></span>|<span data-ttu-id="03b79-1703">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1703">Assembly Format</span></span>|<span data-ttu-id="03b79-1704">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1705">D2</span><span class="sxs-lookup"><span data-stu-id="03b79-1705">D2</span></span>|<span data-ttu-id="03b79-1706">conv.U1</span><span class="sxs-lookup"><span data-stu-id="03b79-1706">conv.u1</span></span>|<span data-ttu-id="03b79-1707">Преобразовать в `int8`и помещает `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1707">Convert to `int8`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1708">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1709">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1709">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1710">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1710">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1711">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1711">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1712">`conv.u1` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1712">The `conv.u1` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1713">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1713">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1714">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1714">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1715">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1715">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1716">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1716">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1717">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1717">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1718">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1718">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1719">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1719">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1720">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1720">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1721">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1721">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1722">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1722">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1723">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.u1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1723">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1724">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1724">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1725">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int16" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1725">Converts the value on top of the evaluation stack to <see langword="unsigned int16" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1726">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1726">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1727">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1727">Format</span></span>|<span data-ttu-id="03b79-1728">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1728">Assembly Format</span></span>|<span data-ttu-id="03b79-1729">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1729">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1730">D1</span><span class="sxs-lookup"><span data-stu-id="03b79-1730">D1</span></span>|<span data-ttu-id="03b79-1731">conv.U2</span><span class="sxs-lookup"><span data-stu-id="03b79-1731">conv.u2</span></span>|<span data-ttu-id="03b79-1732">Преобразовать в `int16`и помещает `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1732">Convert to `int16`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1733">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1733">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1734">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1734">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1735">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1735">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1736">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1736">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1737">`conv.u2` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1737">The `conv.u2` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1738">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1738">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1739">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1739">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1740">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1740">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1741">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1741">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1742">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1742">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1743">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1743">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1744">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1744">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1745">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1745">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1746">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1746">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1747">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1747">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1748">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.u2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1748">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1749">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1749">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1750">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int32" />, а затем расширяет его до <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1750">Converts the value on top of the evaluation stack to <see langword="unsigned int32" />, and extends it to <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1751">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1751">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1752">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1752">Format</span></span>|<span data-ttu-id="03b79-1753">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1753">Assembly Format</span></span>|<span data-ttu-id="03b79-1754">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1754">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1755">6D</span><span class="sxs-lookup"><span data-stu-id="03b79-1755">6D</span></span>|<span data-ttu-id="03b79-1756">conv.U4</span><span class="sxs-lookup"><span data-stu-id="03b79-1756">conv.u4</span></span>|<span data-ttu-id="03b79-1757">Преобразовать в `unsigned int32`и помещает `int32` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1757">Convert to `unsigned int32`, pushing `int32` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1758">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1758">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1759">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1759">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1760">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1760">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1761">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1761">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1762">`conv.u4` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1762">The `conv.u4` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1763">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1763">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1764">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1764">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1765">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1765">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1766">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1766">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1767">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1767">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1768">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1768">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1769">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1769">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1770">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1770">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1771">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1771">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1772">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1772">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1773">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.u4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1773">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1774">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1774">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Conv_U8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Conv_U8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Conv_U8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Conv_U8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Conv_U8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Conv_U8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1775">Преобразует верхнее значение в стеке вычислений в <see langword="unsigned int64" />, а затем расширяет его до <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-1775">Converts the value on top of the evaluation stack to <see langword="unsigned int64" />, and extends it to <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1776">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1776">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1777">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1777">Format</span></span>|<span data-ttu-id="03b79-1778">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1778">Assembly Format</span></span>|<span data-ttu-id="03b79-1779">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1779">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1780">6E</span><span class="sxs-lookup"><span data-stu-id="03b79-1780">6E</span></span>|<span data-ttu-id="03b79-1781">conv.u8</span><span class="sxs-lookup"><span data-stu-id="03b79-1781">conv.u8</span></span>|<span data-ttu-id="03b79-1782">Преобразовать в `int64`и помещает `int64` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1782">Convert to `int64`, pushing `int64` on stack.</span></span>|  
  
 <span data-ttu-id="03b79-1783">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1783">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1784">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1784">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1785">`value` извлекается из стека; преобразование выполняется операция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1785">`value` is popped from the stack and the conversion operation is attempted.</span></span>  
  
3.  <span data-ttu-id="03b79-1786">Если преобразование прошло успешно, результирующее значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1786">If the conversion is successful, the resulting value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1787">`conv.u8` Преобразует opcode `value` на вершине стека к типу, указанному в коде операции и оставляет преобразованное значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1787">The `conv.u8` opcode converts the `value` on top of the stack to the type specified in the opcode, and leave that converted value on the top of the stack.</span></span> <span data-ttu-id="03b79-1788">Целочисленные значения меньше 4 байтов расширяются до `int32` когда они были загружены в стек вычислений (если не `conv.i` или `conv.u` используется, в этом случае результат также имеет `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1788">Integer values of less than 4 bytes are extended to `int32` when they are loaded onto the evaluation stack (unless `conv.i` or `conv.u` is used, in which case the result is also `native int`).</span></span> <span data-ttu-id="03b79-1789">Значения с плавающей запятой преобразуются в `F` типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1789">Floating-point values are converted to the `F` type.</span></span>  
  
 <span data-ttu-id="03b79-1790">Преобразование из чисел с плавающей запятой, до целых чисел усекает число к нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1790">Conversion from floating-point numbers to integer values truncates the number toward zero.</span></span> <span data-ttu-id="03b79-1791">При преобразовании из `float64` для `float32`, точности могут быть потеряны.</span><span class="sxs-lookup"><span data-stu-id="03b79-1791">When converting from an `float64` to an `float32`, precision can be lost.</span></span> <span data-ttu-id="03b79-1792">Если `value` слишком велик для размещения `float32 (F)`, плюс бесконечность (если `value` является положительным) или минус бесконечность (если `value` является отрицательным) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1792">If `value` is too large to fit in a `float32 (F)`, positive infinity (if `value` is positive) or negative infinity (if `value` is negative) is returned.</span></span> <span data-ttu-id="03b79-1793">Если при преобразовании одного целочисленного типа в другой возникает переполнение, старшие разряды, усекаются.</span><span class="sxs-lookup"><span data-stu-id="03b79-1793">If overflow occurs converting one integer type to another, the high order bits are truncated.</span></span> <span data-ttu-id="03b79-1794">Если результат меньше `int32`, значение, расширенному знаком для заполнения области.</span><span class="sxs-lookup"><span data-stu-id="03b79-1794">If the result is smaller than an `int32`, the value is sign-extended to fill the slot.</span></span>  
  
 <span data-ttu-id="03b79-1795">Если переполнение происходит преобразование типа с плавающей запятой в целое число, возвращаемое значение не определено.</span><span class="sxs-lookup"><span data-stu-id="03b79-1795">If overflow occurs converting a floating-point type to an integer the value returned is unspecified.</span></span>  
  
 <span data-ttu-id="03b79-1796">Не создаются исключения при использовании этого поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1796">No exceptions are ever thrown when using this field.</span></span> <span data-ttu-id="03b79-1797">См. в разделе <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> и <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> эквивалентные инструкции, которые будут создавать исключение, когда тип результата не может быть правильно результирующее значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1797">See <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8> and <xref:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un> for equivalent instructions that will throw an exception when the result type can not properly represent the result value.</span></span>  
  
 <span data-ttu-id="03b79-1798">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `conv.u8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1798">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `conv.u8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1799">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1799">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1800">Копирует заданное число байтов из исходного адреса в конечный.</span><span class="sxs-lookup"><span data-stu-id="03b79-1800">Copies a specified number bytes from a source address to a destination address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1801">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1801">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1802">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1802">Format</span></span>|<span data-ttu-id="03b79-1803">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1803">Assembly Format</span></span>|<span data-ttu-id="03b79-1804">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1804">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1805">FE 17</span><span class="sxs-lookup"><span data-stu-id="03b79-1805">FE 17</span></span>|<span data-ttu-id="03b79-1806">cpblk</span><span class="sxs-lookup"><span data-stu-id="03b79-1806">cpblk</span></span>|<span data-ttu-id="03b79-1807">Копирование данных из одного блока памяти в другой.</span><span class="sxs-lookup"><span data-stu-id="03b79-1807">Copy data from one memory block to another.</span></span>|  
  
 <span data-ttu-id="03b79-1808">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1808">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1809">Адрес назначения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1809">The destination address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1810">Исходный адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1810">The source address is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1811">Число байтов для копирования помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1811">The number of bytes to copy is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-1812">Число байтов, адрес источника и целевой адрес извлекаются из стека; указанное число байтов копируются из исходного адреса назначения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1812">The number of bytes, the source address, and the destination address are popped from the stack; the specified number of bytes are copied from the source address to the destination address.</span></span>  
  
 <span data-ttu-id="03b79-1813">`cpblk` Инструкции копирует число (типа `unsigned int32`) байтов из исходного адреса (типа `*`, `native int`, или `&`) к конечному адресу (типа `*`, `native int`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1813">The `cpblk` instruction copies a number (type `unsigned int32`) of bytes from a source address (of type `*`, `native int`, or `&`) to a destination address (of type `*`, `native int`, or `&`).</span></span> <span data-ttu-id="03b79-1814">Поведение `cpblk` не указано, при перекрытии исходной и целевой областей.</span><span class="sxs-lookup"><span data-stu-id="03b79-1814">The behavior of `cpblk` is unspecified if the source and destination areas overlap.</span></span>  
  
 <span data-ttu-id="03b79-1815">`cpblk` предполагается, что исходный и конечный адреса выровнены по естественному размеру машины.</span><span class="sxs-lookup"><span data-stu-id="03b79-1815">`cpblk` assumes that both the source and destination addressed are aligned to the natural size of the machine.</span></span> <span data-ttu-id="03b79-1816">`cpblk` Инструкции непосредственно перед которым `unaligned.<prefix>` инструкции, чтобы указать, что исходный или конечный адрес не выровнен.</span><span class="sxs-lookup"><span data-stu-id="03b79-1816">The `cpblk` instruction can be immediately preceded by the `unaligned.<prefix>` instruction to indicate that either the source or the destination is unaligned.</span></span>  
  
 <span data-ttu-id="03b79-1817">Операция `cpblk` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1817">The operation of the `cpblk` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-1818"><xref:System.NullReferenceException> может быть создано исключение при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-1818"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-1819">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `cpblk` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1819">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpblk` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1820">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1820">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cpobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Cpobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Cpobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Cpobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Cpobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Cpobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1821">Копирует тип значения по адресу объекта (с типом <see langword="&amp;" />, <see langword="*" /> или <see langword="native int" />) и помещает его по адресу конечного объекта (с типом <see langword="&amp;" />, <see langword="*" /> или <see langword="native int" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-1821">Copies the value type located at the address of an object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />) to the address of the destination object (type <see langword="&amp;" />, <see langword="*" /> or <see langword="native int" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1822">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1822">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1823">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1823">Format</span></span>|<span data-ttu-id="03b79-1824">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1824">Assembly Format</span></span>|<span data-ttu-id="03b79-1825">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1825">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1826">70 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-1826">70 < `T` ></span></span>|<span data-ttu-id="03b79-1827">cpobj `classTok`</span><span class="sxs-lookup"><span data-stu-id="03b79-1827">cpobj `classTok`</span></span>|<span data-ttu-id="03b79-1828">Копирует тип значения из исходного объекта в целевой объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-1828">Copies a value type from a source object to a destination object.</span></span>|  
  
 <span data-ttu-id="03b79-1829">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1829">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1830">Ссылка на конечный объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1830">The destination object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1831">Ссылка на исходный объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1831">The source object reference is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1832">Обе ссылки на объекты извлекаются из стека; Тип значения по адресу объекта источника копируется на адрес целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-1832">The two object references are popped from the stack; the value type at the address of the source object is copied to the address of the destination object.</span></span>  
  
 <span data-ttu-id="03b79-1833">Поведение `cpobj` не определено, если исходный и конечный объект ссылки не являются указателями на экземпляры класса, представленного маркером класс `classTok` ( `typeref` или `typedef`), или если `classTok` не представляет Тип значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1833">The behavior of `cpobj` is unspecified if the source and destination object references are not pointers to instances of the class represented by the class token `classTok` (a `typeref` or `typedef`), or if `classTok` does not represent a value type.</span></span>  
  
 <span data-ttu-id="03b79-1834"><xref:System.NullReferenceException> может быть создано исключение при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-1834"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-1835">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `cpobj` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1835">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `cpobj` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1836">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-1836">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1837">Делит одно значение на другое и помещает результат в стек вычислений как число с плавающей запятой (с типом <see langword="F" />) или как частное (с типом <see langword="int32" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-1837">Divides two values and pushes the result as a floating-point (type <see langword="F" />) or quotient (type <see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1838">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1838">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1839">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1839">Format</span></span>|<span data-ttu-id="03b79-1840">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1840">Assembly Format</span></span>|<span data-ttu-id="03b79-1841">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1841">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1842">5B</span><span class="sxs-lookup"><span data-stu-id="03b79-1842">5B</span></span>|<span data-ttu-id="03b79-1843">div</span><span class="sxs-lookup"><span data-stu-id="03b79-1843">div</span></span>|<span data-ttu-id="03b79-1844">Делит одно значение возвращает частное или результат с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="03b79-1844">Divides two values to return a quotient or floating-point result.</span></span>|  
  
 <span data-ttu-id="03b79-1845">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1845">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1846">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1846">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1847">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1847">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1848">`value2` и `value1` извлекаются из стека; `value1` делится `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1848">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-1849">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1849">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1850">`result` = `value1` div value2 удовлетворяет следующим условиям:</span><span class="sxs-lookup"><span data-stu-id="03b79-1850">`result` = `value1` div value2 satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="03b79-1851">&#124;`result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, и:</span><span class="sxs-lookup"><span data-stu-id="03b79-1851">&#124; `result` &#124; = &#124; `value1` &#124; / &#124; `value2` &#124;, and:</span></span>  
  
 <span data-ttu-id="03b79-1852">Sign (`result`) = +, если знак (`value1`) = входа (`value2`), или-, если знак (`value1`) ~ = входа (`value2`)</span><span class="sxs-lookup"><span data-stu-id="03b79-1852">sign(`result`) = +, if sign(`value1`) = sign(`value2`), or -, if sign(`value1`) ~= sign(`value2`)</span></span>  
  
 <span data-ttu-id="03b79-1853">`div` Инструкция вычисляет результат и помещает его в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1853">The `div` instruction computes the result and pushes it on the stack.</span></span>  
  
 <span data-ttu-id="03b79-1854">Целочисленное деление усекает в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="03b79-1854">Integer division truncates towards zero.</span></span>  
  
 <span data-ttu-id="03b79-1855">Деление конечного числа на ноль дает правильно подписанного бесконечное значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1855">Division of a finite number by zero produces the correctly signed infinite value.</span></span>  
  
 <span data-ttu-id="03b79-1856">Деления нуля на нуль или бесконечности на бесконечность возвращает значение NaN (не числовое).</span><span class="sxs-lookup"><span data-stu-id="03b79-1856">Dividing zero by zero or infinity by infinity produces the NaN (Not-A-Number) value.</span></span> <span data-ttu-id="03b79-1857">Любое число, деленное на бесконечность создаст нулевое значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1857">Any number divided by infinity will produce a zero value.</span></span>  
  
 <span data-ttu-id="03b79-1858">Целочисленные операции создают исключение <xref:System.ArithmeticException> Если результат невозможно представить в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-1858">Integral operations throw <xref:System.ArithmeticException> if the result cannot be represented in the result type.</span></span> <span data-ttu-id="03b79-1859">Это может произойти, если `value1` максимальное значение отрицательное, и `value2` равно -1.</span><span class="sxs-lookup"><span data-stu-id="03b79-1859">This can happen if `value1` is the maximum negative value, and `value2` is -1.</span></span>  
  
 <span data-ttu-id="03b79-1860">Целочисленные операции создают исключение <xref:System.DivideByZeroException> Если `value2` равно нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-1860">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="03b79-1861">Обратите внимание, что для платформ на основе Intel <xref:System.OverflowException> возникает при вычислении (minint div -1).</span><span class="sxs-lookup"><span data-stu-id="03b79-1861">Note that on Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint div -1).</span></span> <span data-ttu-id="03b79-1862">Операции с плавающей запятой не генерируют исключений (они возвращают значения NaN или бесконечность).</span><span class="sxs-lookup"><span data-stu-id="03b79-1862">Floating-point operations never throw an exception (they produce NaNs or infinities instead).</span></span>  
  
 <span data-ttu-id="03b79-1863">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `div` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1863">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1864">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1864">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Div_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Div_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Div_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Div_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Div_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Div_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1865">Делит одно целочисленное значение без знака на другое и помещает результат (<see langword="int32" />) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1865">Divides two unsigned integer values and pushes the result (<see langword="int32" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1866">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1866">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1867">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1867">Format</span></span>|<span data-ttu-id="03b79-1868">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1868">Assembly Format</span></span>|<span data-ttu-id="03b79-1869">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1869">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1870">5C</span><span class="sxs-lookup"><span data-stu-id="03b79-1870">5C</span></span>|<span data-ttu-id="03b79-1871">div.un</span><span class="sxs-lookup"><span data-stu-id="03b79-1871">div.un</span></span>|<span data-ttu-id="03b79-1872">Делит два значения, без подписи, возвращая частное.</span><span class="sxs-lookup"><span data-stu-id="03b79-1872">Divides two values, unsigned, returning a quotient.</span></span>|  
  
 <span data-ttu-id="03b79-1873">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1873">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1874">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1874">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1875">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1875">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1876">`value2` и `value1` извлекаются из стека; `value1` делится `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1876">`value2` and `value1` are popped from the stack; `value1` is divided by `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-1877">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1877">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1878">`div.un` Инструкция вычисляет `value1` деления на `value2`, без целых чисел без знака и помещает `result` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1878">The `div.un` instruction computes `value1` divided by `value2`, both taken as unsigned integers, and pushes the `result` on the stack.</span></span>  
  
 <span data-ttu-id="03b79-1879">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `div.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1879">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `div.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1880">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1880">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dup">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Dup;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Dup" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Dup" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Dup As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Dup;" />
      <MemberSignature Language="F#" Value=" staticval mutable Dup : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Dup" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1881">Копирует текущее верхнее значение в стеке вычислений и помещает копию в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1881">Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1882">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1882">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1883">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1883">Format</span></span>|<span data-ttu-id="03b79-1884">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1884">Assembly Format</span></span>|<span data-ttu-id="03b79-1885">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1885">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1886">25</span><span class="sxs-lookup"><span data-stu-id="03b79-1886">25</span></span>|<span data-ttu-id="03b79-1887">Dup</span><span class="sxs-lookup"><span data-stu-id="03b79-1887">dup</span></span>|<span data-ttu-id="03b79-1888">Дублирует значению на вершине стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-1888">Duplicates the value on the top of the stack.</span></span>|  
  
 <span data-ttu-id="03b79-1889">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1889">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1890">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1890">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1891">`value` извлекается из стека для дублирования.</span><span class="sxs-lookup"><span data-stu-id="03b79-1891">`value` is popped off of the stack for duplication.</span></span>  
  
3.  <span data-ttu-id="03b79-1892">`value` помещается обратно в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1892">`value` is pushed back onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-1893">Повторяющееся значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1893">A duplicate value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1894">`dup` Инструкция дублирует верхний элемент стека и оставляет два одинаковых значения на вершине стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-1894">The `dup` instruction duplicates the top element of the stack, and leaves two identical values atop it.</span></span>  
  
 <span data-ttu-id="03b79-1895">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `dup` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1895">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `dup` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1896">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1896">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfilter">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfilter" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfilter As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfilter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfilter : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfilter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1897">Передает управление из предложения <see langword="filter" /> исключения обратно в обработчик исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="03b79-1897">Transfers control from the <see langword="filter" /> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1898">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1898">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1899">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1899">Format</span></span>|<span data-ttu-id="03b79-1900">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1900">Assembly Format</span></span>|<span data-ttu-id="03b79-1901">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1901">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1902">FE 11</span><span class="sxs-lookup"><span data-stu-id="03b79-1902">FE 11</span></span>|<span data-ttu-id="03b79-1903">конечный фильтр</span><span class="sxs-lookup"><span data-stu-id="03b79-1903">endfilter</span></span>|<span data-ttu-id="03b79-1904">Предложение фильтра окончания обработки исключений SEH.</span><span class="sxs-lookup"><span data-stu-id="03b79-1904">End filter clause of SEH exception handling.</span></span>|  
  
 <span data-ttu-id="03b79-1905">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1905">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1906">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1906">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1907">`value` извлекается из стека; `endfilter` выполняется и управление передается обработчику исключений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1907">`value` is popped from the stack; `endfilter` is executed and control is transferred to the exception handler.</span></span>  
  
 <span data-ttu-id="03b79-1908">`Value` (который должен быть типа `int32` и является одним из определенного набора значений) возвращается из предложения фильтра.</span><span class="sxs-lookup"><span data-stu-id="03b79-1908">`Value` (which must be of type `int32` and is one of a specific set of values) is returned from the filter clause.</span></span> <span data-ttu-id="03b79-1909">Она должна быть одна из:</span><span class="sxs-lookup"><span data-stu-id="03b79-1909">It should be one of:</span></span>  
  
-   <span data-ttu-id="03b79-1910">`exception_continue_search` (`value` = 0) для продолжения поиска обработчика исключений</span><span class="sxs-lookup"><span data-stu-id="03b79-1910">`exception_continue_search` (`value` = 0) to continue searching for an exception handler</span></span>  
  
-   <span data-ttu-id="03b79-1911">`exception_execute_handler` (`value` = 1) — начать второй этап обработки исключений, где блоки finally выполняются до обработчика по связанный с данным предложением фильтра находится.</span><span class="sxs-lookup"><span data-stu-id="03b79-1911">`exception_execute_handler` (`value` = 1) to start the second phase of exception handling where finally blocks are run until the handler associated with this filter clause is located.</span></span> <span data-ttu-id="03b79-1912">После обнаружения обработчик выполняется.</span><span class="sxs-lookup"><span data-stu-id="03b79-1912">Upon discovery, the handler is executed.</span></span>  
  
 <span data-ttu-id="03b79-1913">Другие целочисленные значения создаст результаты не определены.</span><span class="sxs-lookup"><span data-stu-id="03b79-1913">Other integer values will produce unspecified results.</span></span>  
  
 <span data-ttu-id="03b79-1914">Точка входа фильтра, как показано в таблице исключений метода, должен быть первой инструкции в блоке кода filter.</span><span class="sxs-lookup"><span data-stu-id="03b79-1914">The entry point of a filter, as shown in the method's exception table, must be the first instruction in the filter's code block.</span></span> <span data-ttu-id="03b79-1915">`endfilter` Инструкция должна быть последней инструкции в блоке кода filter (таким образом может существовать только один `endfilter` для одного блока filter).</span><span class="sxs-lookup"><span data-stu-id="03b79-1915">The `endfilter` instruction must be the last instruction in the filter's code block (hence there can only be one `endfilter` for any single filter block).</span></span> <span data-ttu-id="03b79-1916">После выполнения `endfilter` инструкции, управление логически передается обратно механизм обработки исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="03b79-1916">After executing the `endfilter` instruction, control logically flows back to the CLI exception handling mechanism.</span></span>  
  
 <span data-ttu-id="03b79-1917">Элемент управления может быть передано в блок фильтра только через механизм обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1917">Control cannot be transferred into a filter block except through the exception mechanism.</span></span> <span data-ttu-id="03b79-1918">Элемент управления не могут быть перенесены из блока фильтра, за исключением использования `throw` инструкций или путем выполнения последней `endfilter` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1918">Control cannot be transferred out of a filter block except through the use of a `throw` instruction or by executing the final `endfilter` instruction.</span></span> <span data-ttu-id="03b79-1919">Не удается внедрить `try` блок `filter` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-1919">You cannot embed a `try` block within a `filter` block.</span></span> <span data-ttu-id="03b79-1920">Если исключение возникает в блоке `filter` блока, оно перехватывается и значение 0 (`exception_continue_search`) возвращается.</span><span class="sxs-lookup"><span data-stu-id="03b79-1920">If an exception is thrown inside the `filter` block, it is intercepted and a value of 0 (`exception_continue_search`) is returned.</span></span>  
  
 <span data-ttu-id="03b79-1921">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `endfilter` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1921">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfilter` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1922">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1922">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Endfinally">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Endfinally" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Endfinally As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Endfinally;" />
      <MemberSignature Language="F#" Value=" staticval mutable Endfinally : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Endfinally" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1923">Передает управление из предложения <see langword="fault" /> или <see langword="finally" /> блока исключения обратно обработчику исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="03b79-1923">Transfers control from the <see langword="fault" /> or <see langword="finally" /> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1924">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1924">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1925">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1925">Format</span></span>|<span data-ttu-id="03b79-1926">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1926">Assembly Format</span></span>|<span data-ttu-id="03b79-1927">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1927">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1928">DC</span><span class="sxs-lookup"><span data-stu-id="03b79-1928">DC</span></span>|<span data-ttu-id="03b79-1929">endfinally</span><span class="sxs-lookup"><span data-stu-id="03b79-1929">endfinally</span></span><br /><br /> <span data-ttu-id="03b79-1930">endfault</span><span class="sxs-lookup"><span data-stu-id="03b79-1930">endfault</span></span>|<span data-ttu-id="03b79-1931">Завершает `finally` или `fault` предложение блока исключения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1931">Ends the `finally` or `fault` clause of an exception block.</span></span>|  
  
 <span data-ttu-id="03b79-1932">Существуют стек не вариантов поведения для данной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1932">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-1933">`Endfinally` и `endfault` сигнал об окончании `finally` или `fault` предложение, поэтому раскрутка стека можно продолжить работу, пока не будет вызван обработчик исключений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1933">`Endfinally` and `endfault` signal the end of the `finally` or `fault` clause so that stack unwinding can continue until the exception handler is invoked.</span></span> <span data-ttu-id="03b79-1934">`endfinally` Или `endfault` инструкция передает управление обратно в механизм обработки исключений CLI.</span><span class="sxs-lookup"><span data-stu-id="03b79-1934">The `endfinally` or `endfault` instruction transfers control back to the CLI exception mechanism.</span></span> <span data-ttu-id="03b79-1935">Механизм выполняет поиск следующего `finally` предложение в цепочке, если выход из защищенного блока был выполнен с помощью инструкции leave.</span><span class="sxs-lookup"><span data-stu-id="03b79-1935">The mechanism then searches for the next `finally` clause in the chain if the protected block was exited with a leave instruction.</span></span> <span data-ttu-id="03b79-1936">Если защищенный блок был выполнен выход с исключением, интерфейса командной строки выполняет поиск для следующей `finally` или `fault`, или введите в обработчик, выбранный на первом этапе обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1936">If the protected block was exited with an exception, the CLI will search for the next `finally` or `fault`, or enter the exception handler chosen during the first pass of exception handling.</span></span>  
  
 <span data-ttu-id="03b79-1937">`endfinally` Инструкции могут появляться только лексически в `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-1937">An `endfinally` instruction might only appear lexically within a `finally` block.</span></span> <span data-ttu-id="03b79-1938">В отличие от `endfilter` инструкции, нет необходимости завершение блока с `endfinally` инструкция и может быть столько `endfinally` инструкции в блоке.</span><span class="sxs-lookup"><span data-stu-id="03b79-1938">Unlike the `endfilter` instruction, there is no requirement that the block end with an `endfinally` instruction, and there can be as many `endfinally` instructions within the block as required.</span></span> <span data-ttu-id="03b79-1939">Те же ограничения применяются к `endfault` инструкции и `fault` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-1939">These same restrictions apply to the `endfault` instruction and the `fault` block.</span></span>  
  
 <span data-ttu-id="03b79-1940">Элемент управления может быть передано в `finally` (или `fault`) блокировать за исключением через механизм обработки исключений.</span><span class="sxs-lookup"><span data-stu-id="03b79-1940">Control cannot be transferred into a `finally` (or `fault`) block except through the exception mechanism.</span></span> <span data-ttu-id="03b79-1941">Управление не может быть передано из `finally` (или `fault`) блокировать за исключением случаев использования `throw` инструкции или выполнения `endfinally` (или `endfault`) инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1941">Control cannot be transferred out of a `finally` (or `fault`) block except through the use of a `throw` instruction or executing the `endfinally` (or `endfault`) instruction.</span></span> <span data-ttu-id="03b79-1942">В частности, вы не может «опускаться» из `finally` (или `fault`) блока или для выполнения <xref:System.Reflection.Emit.OpCodes.Ret> или <xref:System.Reflection.Emit.OpCodes.Leave> инструкции в пределах `finally` (или `fault`) блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-1942">In particular, you cannot "fall out" of a `finally` (or `fault`) block or to execute a <xref:System.Reflection.Emit.OpCodes.Ret> or <xref:System.Reflection.Emit.OpCodes.Leave> instruction within a `finally` (or `fault`) block.</span></span>  
  
 <span data-ttu-id="03b79-1943">Обратите внимание, что `endfault` и `endfinally` инструкции являются псевдонимами — они соответствуют одному коду операции.</span><span class="sxs-lookup"><span data-stu-id="03b79-1943">Note that the `endfault` and `endfinally` instructions are aliases - they correspond to the same opcode.</span></span>  
  
 <span data-ttu-id="03b79-1944">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `endfinally` (`endfault`) код операции, а также `ILGenerator` метод <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span><span class="sxs-lookup"><span data-stu-id="03b79-1944">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `endfinally` (`endfault`) opcode, as well as the `ILGenerator` method <xref:System.Reflection.Emit.ILGenerator.EndExceptionBlock%2A>.</span></span>  
  
-   <span data-ttu-id="03b79-1945">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1945">ILGenerator.Emit(OpCode)</span></span>  
  
-   <span data-ttu-id="03b79-1946">ILGenerator.EndExceptionBlock()</span><span class="sxs-lookup"><span data-stu-id="03b79-1946">ILGenerator.EndExceptionBlock()</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initblk">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initblk;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initblk" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initblk" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initblk As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initblk;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initblk : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initblk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1947">Инициализирует блок памяти с определенным адресом, присваивая его начальному значению с заданным размером.</span><span class="sxs-lookup"><span data-stu-id="03b79-1947">Initializes a specified block of memory at a specific address to a given size and initial value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1948">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1948">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1949">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1949">Format</span></span>|<span data-ttu-id="03b79-1950">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1950">Assembly Format</span></span>|<span data-ttu-id="03b79-1951">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1951">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1952">FE 18</span><span class="sxs-lookup"><span data-stu-id="03b79-1952">FE 18</span></span>|<span data-ttu-id="03b79-1953">initblk</span><span class="sxs-lookup"><span data-stu-id="03b79-1953">initblk</span></span>|<span data-ttu-id="03b79-1954">Укажите для каждого расположения в блок памяти, заданное значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-1954">Set each location in a block of memory to a given value.</span></span>|  
  
 <span data-ttu-id="03b79-1955">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1955">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1956">Начальный адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1956">A starting address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1957">Значение инициализации помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1957">An initialization value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-1958">Число байтов для инициализации помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1958">The number of bytes to initialize is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-1959">Число байтов, значение инициализации и начальный адрес извлекаются из стека и инициализация выполняется в соответствии с их значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1959">The number of bytes, the initialization value, and the starting address are popped from the stack, and the initialization is performed as per their values.</span></span>  
  
 <span data-ttu-id="03b79-1960">`initblk` Инструкция задает номер (`unsigned int32`) байтов, начиная с указанного адреса (типа `native int`, `&`, или `*`) для инициализации значение (типа `unsigned int8`).</span><span class="sxs-lookup"><span data-stu-id="03b79-1960">The `initblk` instruction sets the number (`unsigned int32`) of bytes starting at the specified address (of type `native int`, `&`, or `*`) to the initialization value (of type `unsigned int8`).</span></span> <span data-ttu-id="03b79-1961">`initblk` предполагается, что начальный адрес выровнен по естественному размеру машины.</span><span class="sxs-lookup"><span data-stu-id="03b79-1961">`initblk` assumes that the starting address is aligned to the natural size of the machine.</span></span>  
  
 <span data-ttu-id="03b79-1962">Операция `initblk` инструкции может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-1962">The operation of the `initblk` instructions can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-1963"><xref:System.NullReferenceException> может быть создано исключение при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-1963"><xref:System.NullReferenceException> may be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-1964">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `initblk` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1964">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initblk` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1965">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-1965">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Initobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Initobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Initobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Initobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Initobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Initobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Initobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1966">Инициализирует каждое поле типа значения с определенным адресом пустой ссылкой или значением 0 соответствующего простого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1966">Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1967">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1967">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1968">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1968">Format</span></span>|<span data-ttu-id="03b79-1969">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1969">Assembly Format</span></span>|<span data-ttu-id="03b79-1970">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1970">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1971">FE 15 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-1971">FE 15 < `T` ></span></span>|<span data-ttu-id="03b79-1972">`initobj` `typeTok`</span><span class="sxs-lookup"><span data-stu-id="03b79-1972">`initobj` `typeTok`</span></span>|<span data-ttu-id="03b79-1973">Инициализирует тип значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-1973">Initializes a value type.</span></span>|  
  
 <span data-ttu-id="03b79-1974">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1974">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1975">Адрес типа значения для инициализации помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1975">The address of the value type to initialize is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1976">Адрес извлекается из стека; Тип значения по указанному адресу инициализируется в качестве типа `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1976">The address is popped from the stack; the value type at the specified address is initialized as type `typeTok`.</span></span>  
  
 <span data-ttu-id="03b79-1977">`initobj` Инструкция инициализирует каждое поле типа значения, заданные в стек адрес (типа `native int`, `&`, или `*`) пустой ссылкой или значением 0 соответствующего простого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-1977">The `initobj` instruction initializes each field of the value type specified by the pushed address (of type `native int`, `&`, or `*`) to a null reference or a 0 of the appropriate primitive type.</span></span> <span data-ttu-id="03b79-1978">После вызова этого метода экземпляр готов для вызываемый метод-конструктор.</span><span class="sxs-lookup"><span data-stu-id="03b79-1978">After this method is called, the instance is ready for a constructor method to be called.</span></span> <span data-ttu-id="03b79-1979">Если `typeTok` является ссылочным типом, эта инструкция действует так же как `ldnull` следуют `stind.ref`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1979">If `typeTok` is a reference type, this instruction has the same effect as `ldnull` followed by `stind.ref`.</span></span>  
  
 <span data-ttu-id="03b79-1980">В отличие от <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` не вызывает метод-конструктор.</span><span class="sxs-lookup"><span data-stu-id="03b79-1980">Unlike <xref:System.Reflection.Emit.OpCodes.Newobj>, `initobj` does not call the constructor method.</span></span> <span data-ttu-id="03b79-1981">`Initobj` — предназначена для инициализации типов значений, тогда как `newobj` используется для размещения и инициализации объектов.</span><span class="sxs-lookup"><span data-stu-id="03b79-1981">`Initobj` is intended for initializing value types, while `newobj` is used to allocate and initialize objects.</span></span>  
  
 <span data-ttu-id="03b79-1982">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `initobj` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-1982">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `initobj` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-1983">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-1983">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Isinst">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Isinst;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Isinst" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Isinst" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Isinst As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Isinst;" />
      <MemberSignature Language="F#" Value=" staticval mutable Isinst : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Isinst" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-1984">Проверяет, является ли ссылка на объект (с типом <see langword="O" />) экземпляром определенного класса.</span><span class="sxs-lookup"><span data-stu-id="03b79-1984">Tests whether an object reference (type <see langword="O" />) is an instance of a particular class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-1985">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-1985">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-1986">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-1986">Format</span></span>|<span data-ttu-id="03b79-1987">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-1987">Assembly Format</span></span>|<span data-ttu-id="03b79-1988">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-1988">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-1989">75 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-1989">75 < `T` ></span></span>|<span data-ttu-id="03b79-1990">инструкции isinst `class`</span><span class="sxs-lookup"><span data-stu-id="03b79-1990">isinst `class`</span></span>|<span data-ttu-id="03b79-1991">Проверяет, если ссылка на объект является экземпляром класса `class`, возвращая указатель null или экземпляр этого класса или интерфейса.</span><span class="sxs-lookup"><span data-stu-id="03b79-1991">Tests if an object reference is an instance of `class`, returning either a null reference or an instance of that class or interface.</span></span>|  
  
 <span data-ttu-id="03b79-1992">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-1992">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-1993">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1993">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-1994">Ссылка на объект извлекается из стека и проверяется, если он является экземпляром класса, заданного в `class`.</span><span class="sxs-lookup"><span data-stu-id="03b79-1994">The object reference is popped from the stack and tested to see if it is an instance of the class passed in `class`.</span></span>  
  
3.  <span data-ttu-id="03b79-1995">Результат (ссылка на объект или пустая ссылка) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1995">The result (either an object reference or a null reference) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-1996">`Class` токен метаданных, указывающий требуемого класса.</span><span class="sxs-lookup"><span data-stu-id="03b79-1996">`Class` is a metadata token indicating the desired class.</span></span> <span data-ttu-id="03b79-1997">Если класс объекта на вершине стека реализует `class` (если `class` — это интерфейс) или является производным от класса `class` (если `class` — обычный класс) он приводится к типу `class` и результат помещается в стек, точно так, будто <xref:System.Reflection.Emit.OpCodes.Castclass> бы вызывалась.</span><span class="sxs-lookup"><span data-stu-id="03b79-1997">If the class of the object on the top of the stack implements `class` (if `class` is an interface) or is a derived class of `class` (if `class` is a regular class) then it is cast to type `class` and the result is pushed on the stack, exactly as though <xref:System.Reflection.Emit.OpCodes.Castclass> had been called.</span></span> <span data-ttu-id="03b79-1998">В противном случае — пустая ссылка помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-1998">Otherwise, a null reference is pushed on the stack.</span></span> <span data-ttu-id="03b79-1999">Если ссылка на объект является пустой ссылкой, затем `isinst` точно так же возвращает пустую ссылку.</span><span class="sxs-lookup"><span data-stu-id="03b79-1999">If the object reference itself is a null reference, then `isinst` likewise returns a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2000"><xref:System.TypeLoadException> возникает, если не удается найти класс.</span><span class="sxs-lookup"><span data-stu-id="03b79-2000"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="03b79-2001">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2001">This is typically detected when the Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-2002">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `isinst` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2002">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `isinst` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2003">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-2003">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Jmp">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Jmp;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Jmp" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Jmp" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Jmp As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Jmp;" />
      <MemberSignature Language="F#" Value=" staticval mutable Jmp : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Jmp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2004">Прекращает выполнение текущего метода и переходит к заданному методу.</span><span class="sxs-lookup"><span data-stu-id="03b79-2004">Exits current method and jumps to specified method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2005">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2005">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2006">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2006">Format</span></span>|<span data-ttu-id="03b79-2007">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2007">Assembly Format</span></span>|<span data-ttu-id="03b79-2008">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2008">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2009">27 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2009">27 < `T` ></span></span>|<span data-ttu-id="03b79-2010">jmp `method`</span><span class="sxs-lookup"><span data-stu-id="03b79-2010">jmp `method`</span></span>|<span data-ttu-id="03b79-2011">Выход из текущего метода и переходит к заданному методу.</span><span class="sxs-lookup"><span data-stu-id="03b79-2011">Exit current method and jump to specified method.</span></span>|  
  
 <span data-ttu-id="03b79-2012">Существуют стек не вариантов поведения для данной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-2012">There are no stack transition behaviors for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-2013">`jmp` (Переход) инструкция передает управление методу, заданному параметром `method`, который является маркером метаданных для ссылки на метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-2013">The `jmp` (jump) instruction transfers control to the method specified by `method`, which is a metadata token for a method reference.</span></span> <span data-ttu-id="03b79-2014">Текущие аргументы передаются в метод назначения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2014">The current arguments are transferred to the destination method.</span></span>  
  
 <span data-ttu-id="03b79-2015">При выполнении этой команды, в стек должен быть пустым.</span><span class="sxs-lookup"><span data-stu-id="03b79-2015">The evaluation stack must be empty when this instruction is executed.</span></span> <span data-ttu-id="03b79-2016">Вызывающий соглашение, номер и тип аргументов по адресу назначения должны совпадать, текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2016">The calling convention, number and type of arguments at the destination address must match that of the current method.</span></span>  
  
 <span data-ttu-id="03b79-2017">`jmp` Инструкция не может использоваться для передачи управления из `try`, `filter`, `catch`, или `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-2017">The `jmp` instruction cannot be used to transferred control out of a `try`, `filter`, `catch`, or `finally` block.</span></span>  
  
 <span data-ttu-id="03b79-2018">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `jmp` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2018">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `jmp` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2019">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-2019">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2020">Загружает аргумент (на который ссылается указанное значение индекса) в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2020">Loads an argument (referenced by a specified index value) onto the stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2021">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2021">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2022">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2022">Format</span></span>|<span data-ttu-id="03b79-2023">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2023">Assembly Format</span></span>|<span data-ttu-id="03b79-2024">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2024">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2025">FE 09 < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2025">FE 09 < `unsigned int16` ></span></span>|<span data-ttu-id="03b79-2026">ldarg `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-2026">ldarg `index`</span></span>|<span data-ttu-id="03b79-2027">Загружает аргумент с `index` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2027">Load argument at `index` onto stack.</span></span>|  
  
 <span data-ttu-id="03b79-2028">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2028">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2029">Значение аргумента с `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2029">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2030">`ldarg` Инструкция помещает аргумент с индексом `index`, где аргументы индексируются, начиная с 0 и выше, в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2030">The `ldarg` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2031">`ldarg` Инструкция может использоваться для загрузки типом значения или значение-примитив в стек, копируя его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="03b79-2031">The `ldarg` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="03b79-2032">Тип значения аргумента — совпадал с типом аргумента, в соответствии с сигнатуры текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2032">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-2033">Для процедуры, которые принимают список аргументов переменной длины `ldarg` инструкция может использоваться только для исходных фиксированных аргументов, не указанные в переменной частью сигнатуры (см. в разделе <xref:System.Reflection.Emit.OpCodes.Arglist> инструкции для получения дополнительных сведений).</span><span class="sxs-lookup"><span data-stu-id="03b79-2033">For procedures that take a variable-length argument list, the `ldarg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="03b79-2034">Аргументы, которые содержат целочисленное значение меньше 4 байтов расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2034">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-2035">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2035">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-2036">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarg` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2036">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2037">ILGenerator.Emit (OpCode, короткое)</span><span class="sxs-lookup"><span data-stu-id="03b79-2037">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2038">Загружает аргумент с индексом 0 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2038">Loads the argument at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2039">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2039">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2040">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2040">Format</span></span>|<span data-ttu-id="03b79-2041">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2041">Assembly Format</span></span>|<span data-ttu-id="03b79-2042">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2042">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2043">02</span><span class="sxs-lookup"><span data-stu-id="03b79-2043">02</span></span>|<span data-ttu-id="03b79-2044">ldarg.0</span><span class="sxs-lookup"><span data-stu-id="03b79-2044">ldarg.0</span></span>|<span data-ttu-id="03b79-2045">Загружает аргумент 0 в стек</span><span class="sxs-lookup"><span data-stu-id="03b79-2045">Load argument 0 onto stack</span></span>|  
  
 <span data-ttu-id="03b79-2046">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2046">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2047">Значение аргумента с индексом 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2047">The argument value at index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2048">`ldarg.0` Инструкция представляет собой эффективную кодировку для загрузки значения аргумента с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2048">The `ldarg.0` instruction is an efficient encoding for loading the argument value at index 0.</span></span>  
  
 <span data-ttu-id="03b79-2049">`ldarg.0` Инструкция помещает аргумент с индексом 0 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2049">The `ldarg.0` instruction pushes the argument indexed at 0 onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2050">`ldarg.0` Инструкция может использоваться для загрузки типом значения или значение-примитив в стек, копируя его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="03b79-2050">The `ldarg.0` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="03b79-2051">Тип значения аргумента — совпадал с типом аргумента, в соответствии с сигнатуры текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2051">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-2052">Аргументы, которые содержат целочисленное значение меньше 4 байтов расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2052">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-2053">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2053">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-2054">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarg.0` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2054">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.0` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2055">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2055">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2056">Загружает аргумент с индексом 1 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2056">Loads the argument at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2057">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2057">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2058">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2058">Format</span></span>|<span data-ttu-id="03b79-2059">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2059">Assembly Format</span></span>|<span data-ttu-id="03b79-2060">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2060">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2061">03</span><span class="sxs-lookup"><span data-stu-id="03b79-2061">03</span></span>|<span data-ttu-id="03b79-2062">ldarg.1</span><span class="sxs-lookup"><span data-stu-id="03b79-2062">ldarg.1</span></span>|<span data-ttu-id="03b79-2063">Загружает аргумент 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2063">Load argument 1 onto stack.</span></span>|  
  
 <span data-ttu-id="03b79-2064">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2064">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2065">Значение аргумента с индексом 1 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2065">The argument value at index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2066">`ldarg.1` Инструкция представляет собой эффективную кодировку для загрузки значения аргумента с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-2066">The `ldarg.1` instruction is an efficient encoding for loading the argument value at index 1.</span></span>  
  
 <span data-ttu-id="03b79-2067">`ldarg.1` Инструкция помещает аргумент с индексом 1 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2067">The `ldarg.1` instruction pushes the argument indexed at 1 onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2068">`ldarg.1` Инструкция может использоваться для загрузки типом значения или значение-примитив в стек, копируя его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="03b79-2068">The `ldarg.1` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="03b79-2069">Тип значения аргумента — совпадал с типом аргумента, в соответствии с сигнатуры текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2069">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-2070">Аргументы, которые содержат целочисленное значение меньше 4 байтов расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2070">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-2071">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2071">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-2072">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarg.1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2072">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2073">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2073">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2074">Загружает аргумент с индексом 2 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2074">Loads the argument at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2075">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2075">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2076">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2076">Format</span></span>|<span data-ttu-id="03b79-2077">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2077">Assembly Format</span></span>|<span data-ttu-id="03b79-2078">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2078">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2079">04</span><span class="sxs-lookup"><span data-stu-id="03b79-2079">04</span></span>|<span data-ttu-id="03b79-2080">ldarg.2</span><span class="sxs-lookup"><span data-stu-id="03b79-2080">ldarg.2</span></span>|<span data-ttu-id="03b79-2081">Загружает аргумент 2 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2081">Load argument 2 onto stack.</span></span>|  
  
 <span data-ttu-id="03b79-2082">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2082">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2083">Значение аргумента с индексом 2 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2083">The argument value at index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2084">`ldarg.2` Инструкция представляет собой эффективную кодировку для загрузки значения аргумента с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-2084">The `ldarg.2` instruction is an efficient encoding for loading the argument value at index 2.</span></span>  
  
 <span data-ttu-id="03b79-2085">`ldarg.2` Инструкция помещает аргумент с индексом 2 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2085">The `ldarg.2` instruction pushes the argument indexed at 2 onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2086">`ldarg.2` Инструкция может использоваться для загрузки типом значения или значение-примитив в стек, копируя его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="03b79-2086">The `ldarg.2` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="03b79-2087">Тип значения аргумента — совпадал с типом аргумента, в соответствии с сигнатуры текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2087">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-2088">Аргументы, которые содержат целочисленное значение меньше 4 байтов расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2088">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-2089">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2089">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-2090">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarg.2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2090">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2091">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2091">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2092">Загружает аргумент с индексом 3 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2092">Loads the argument at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2093">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2093">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2094">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2094">Format</span></span>|<span data-ttu-id="03b79-2095">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2095">Assembly Format</span></span>|<span data-ttu-id="03b79-2096">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2096">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2097">05</span><span class="sxs-lookup"><span data-stu-id="03b79-2097">05</span></span>|<span data-ttu-id="03b79-2098">ldarg.3</span><span class="sxs-lookup"><span data-stu-id="03b79-2098">ldarg.3</span></span>|<span data-ttu-id="03b79-2099">Загружает аргумент 3 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2099">Load argument 3 onto stack.</span></span>|  
  
 <span data-ttu-id="03b79-2100">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2100">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2101">Значение аргумента с индексом 3 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2101">The argument value at index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2102">`ldarg.3` Инструкция представляет собой эффективную кодировку для загрузки значения аргумента с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-2102">The `ldarg.3` instruction is an efficient encoding for loading the argument value at index 3.</span></span>  
  
 <span data-ttu-id="03b79-2103">`ldarg.3` Инструкция помещает аргумент с индексом 3 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2103">The `ldarg.3` instruction pushes the argument indexed at 3 onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2104">`ldarg.3` Инструкция может использоваться для загрузки типом значения или значение-примитив в стек, копируя его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="03b79-2104">The `ldarg.3` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="03b79-2105">Тип значения аргумента — совпадал с типом аргумента, в соответствии с сигнатуры текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2105">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-2106">Аргументы, которые содержат целочисленное значение меньше 4 байтов расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2106">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-2107">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2107">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-2108">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarg.3` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2108">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.3` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2109">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2109">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2110">Загружает аргумент (на который ссылается указанное короткое значение индекса) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2110">Loads the argument (referenced by a specified short form index) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2111">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2112">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2112">Format</span></span>|<span data-ttu-id="03b79-2113">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2113">Assembly Format</span></span>|<span data-ttu-id="03b79-2114">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2115">0E &LT; `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2115">0E < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-2116">ldarg.s `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-2116">ldarg.s `index`</span></span>|<span data-ttu-id="03b79-2117">Загружает аргумент с `index` в стек, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-2117">Load argument at `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="03b79-2118">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2119">Значение аргумента с `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2119">The argument value at `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2120">`ldarg.s` Инструкция представляет собой эффективную кодировку для загрузки аргументов с индексом от 4 до 255.</span><span class="sxs-lookup"><span data-stu-id="03b79-2120">The `ldarg.s` instruction is an efficient encoding for loading arguments indexed from 4 through 255.</span></span>  
  
 <span data-ttu-id="03b79-2121">`ldarg.s` Инструкция помещает аргумент с индексом `index`, где аргументы индексируются, начиная с 0 и выше, в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2121">The `ldarg.s` instruction pushes the argument indexed at `index`, where arguments are indexed from 0 onwards, onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2122">`ldarg.s` Инструкция может использоваться для загрузки типом значения или значение-примитив в стек, копируя его из входящего аргумента.</span><span class="sxs-lookup"><span data-stu-id="03b79-2122">The `ldarg.s` instruction can be used to load a value type or a primitive value onto the stack by copying it from an incoming argument.</span></span> <span data-ttu-id="03b79-2123">Тип значения аргумента — совпадал с типом аргумента, в соответствии с сигнатуры текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-2123">The type of the argument value is the same as the type of the argument, as specified by the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-2124">Для процедуры, которые принимают список аргументов переменной длины `ldarg.s` инструкция может использоваться только для исходных фиксированных аргументов, не указанные в переменной частью сигнатуры (см. в разделе <xref:System.Reflection.Emit.OpCodes.Arglist> инструкции для получения дополнительных сведений).</span><span class="sxs-lookup"><span data-stu-id="03b79-2124">For procedures that take a variable-length argument list, the `ldarg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature (see the <xref:System.Reflection.Emit.OpCodes.Arglist> instruction for more details).</span></span>  
  
 <span data-ttu-id="03b79-2125">Аргументы, которые содержат целочисленное значение меньше 4 байтов расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2125">Arguments that hold an integer value smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-2126">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2126">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-2127">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarg.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarg.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2128">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-2128">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2129">Загружает адрес аргумента в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2129">Load an argument address onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2130">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2131">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2131">Format</span></span>|<span data-ttu-id="03b79-2132">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2132">Assembly Format</span></span>|<span data-ttu-id="03b79-2133">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2134">FE 0A &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2134">FE 0A < `unsigned int16` ></span></span>|<span data-ttu-id="03b79-2135">ldarga `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-2135">ldarga `index`</span></span>|<span data-ttu-id="03b79-2136">Извлекает адрес аргумента с индексом `index`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2136">Fetch the address of argument indexed by `index`.</span></span>|  
  
 <span data-ttu-id="03b79-2137">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2138">Адрес `addr` аргумента, с индексом `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2138">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2139">`ldarga` Инструкция извлекает адрес (типа `*`) аргумента, с индексом `index`, где аргументы индексируются, начиная с 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-2139">The `ldarga` instruction fetches the address (of type `*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="03b79-2140">Адрес `addr` всегда выравнивается по границам на целевом компьютере.</span><span class="sxs-lookup"><span data-stu-id="03b79-2140">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="03b79-2141">Для процедуры, которые принимают список аргументов переменной длины `ldarga` инструкция может использоваться только для исходных фиксированных аргументов, не указанные в переменной частью сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="03b79-2141">For procedures that take a variable-length argument list, the `ldarga` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="03b79-2142">`ldarga` используется для передачи параметров по ссылке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2142">`ldarga` is used for by-ref parameter passing.</span></span> <span data-ttu-id="03b79-2143">В остальных случаях <xref:System.Reflection.Emit.OpCodes.Ldarg> и <xref:System.Reflection.Emit.OpCodes.Starg> следует использовать.</span><span class="sxs-lookup"><span data-stu-id="03b79-2143">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg> and <xref:System.Reflection.Emit.OpCodes.Starg> should be used.</span></span>  
  
 <span data-ttu-id="03b79-2144">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarga` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2144">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2145">ILGenerator.Emit (OpCode, короткое)</span><span class="sxs-lookup"><span data-stu-id="03b79-2145">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldarga_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldarga_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldarga_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldarga_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldarga_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldarga_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2146">Загружает адрес аргумента (короткая форма) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2146">Load an argument address, in short form, onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2147">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2147">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2148">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2148">Format</span></span>|<span data-ttu-id="03b79-2149">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2149">Assembly Format</span></span>|<span data-ttu-id="03b79-2150">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2150">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2151">0F &LT; `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2151">0F < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-2152">ldarga.s `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-2152">ldarga.s `index`</span></span>|<span data-ttu-id="03b79-2153">Извлекает адрес аргумента с индексом `index`, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-2153">Fetch the address of argument indexed by `index`, short form.</span></span>|  
  
 <span data-ttu-id="03b79-2154">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2154">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2155">Адрес `addr` аргумента, с индексом `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2155">The address `addr` of the argument indexed by `index` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2156">`ldarga.s` (Краткая форма `ldarga`) следует использовать для аргумента цифры от 0 до 255, а также обеспечивает более эффективную кодировку.</span><span class="sxs-lookup"><span data-stu-id="03b79-2156">`ldarga.s` (the short form of `ldarga`) should be used for argument numbers 0 through 255, and is a more efficient encoding.</span></span>  
  
 <span data-ttu-id="03b79-2157">`ldarga.s` Инструкция извлекает адрес (типа`*`) аргумента, с индексом `index`, где аргументы индексируются, начиная с 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-2157">The `ldarga.s` instruction fetches the address (of type`*`) of the argument indexed by `index`, where arguments are indexed from 0 onwards.</span></span> <span data-ttu-id="03b79-2158">Адрес `addr` всегда выравнивается по границам на целевом компьютере.</span><span class="sxs-lookup"><span data-stu-id="03b79-2158">The address `addr` is always aligned to a natural boundary on the target machine.</span></span>  
  
 <span data-ttu-id="03b79-2159">Для процедуры, которые принимают список аргументов переменной длины `ldarga.s` инструкция может использоваться только для исходных фиксированных аргументов, не указанные в переменной частью сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="03b79-2159">For procedures that take a variable-length argument list, the `ldarga.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="03b79-2160">`ldarga.s` используется для передачи параметров по ссылке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2160">`ldarga.s` is used for by-ref parameter passing.</span></span> <span data-ttu-id="03b79-2161">В остальных случаях <xref:System.Reflection.Emit.OpCodes.Ldarg_S> и <xref:System.Reflection.Emit.OpCodes.Starg_S> следует использовать.</span><span class="sxs-lookup"><span data-stu-id="03b79-2161">For other cases, <xref:System.Reflection.Emit.OpCodes.Ldarg_S> and <xref:System.Reflection.Emit.OpCodes.Starg_S> should be used.</span></span>  
  
 <span data-ttu-id="03b79-2162">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldarga.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2162">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldarga.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2163">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-2163">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2164">Помещает переданное значение с типом <see langword="int32" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2164">Pushes a supplied value of type <see langword="int32" /> onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2165">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2165">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2166">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2166">Format</span></span>|<span data-ttu-id="03b79-2167">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2167">Assembly Format</span></span>|<span data-ttu-id="03b79-2168">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2168">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2169">20 < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2169">20 < `int32` ></span></span>|<span data-ttu-id="03b79-2170">ldc.i4 `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-2170">ldc.i4 `num`</span></span>|<span data-ttu-id="03b79-2171">Помещает значение `num` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2171">Pushes the value `num` onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2172">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2172">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2173">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2173">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2174">Обратите внимание на то, что существуют специальные короткие (и, следовательно, более эффективные) кодировки для целых чисел от -128 до 127 и особенно короткие коды на -1 до 8.</span><span class="sxs-lookup"><span data-stu-id="03b79-2174">Note that there are special short (and hence more efficient) encodings for the integers -128 through 127, and especially short encodings for -1 through 8.</span></span> <span data-ttu-id="03b79-2175">Все короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2175">All short encodings push 4 byte integers on the stack.</span></span> <span data-ttu-id="03b79-2176">Больше кодировки используются для 8-байтовые целые числа и 4 и 8 байтовые числа с плавающей запятой, а также 4-байтовых значений, которые не помещаются в краткие формы.</span><span class="sxs-lookup"><span data-stu-id="03b79-2176">Longer encodings are used for 8 byte integers and 4 and 8 byte floating-point numbers, as well as 4-byte values that do not fit in the short forms.</span></span> <span data-ttu-id="03b79-2177">Существует три способа для принудительной отправки 8-байтовую целая константа в стек</span><span class="sxs-lookup"><span data-stu-id="03b79-2177">There are three ways to push an 8 byte integer constant onto the stack</span></span>  
  
 1. <span data-ttu-id="03b79-2178">Используйте <xref:System.Reflection.Emit.OpCodes.Ldc_I8> инструкции для константы, которые должны быть выражены в более чем 32 бита.</span><span class="sxs-lookup"><span data-stu-id="03b79-2178">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I8> instruction for constants that must be expressed in more than 32 bits.</span></span>  
  
 2. <span data-ttu-id="03b79-2179">Используйте <xref:System.Reflection.Emit.OpCodes.Ldc_I4> инструкции, за которым следует <xref:System.Reflection.Emit.OpCodes.Conv_I8> для константы требуется от 9 до 32 бит.</span><span class="sxs-lookup"><span data-stu-id="03b79-2179">Use the <xref:System.Reflection.Emit.OpCodes.Ldc_I4> instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that require 9 to 32 bits.</span></span>  
  
 3. <span data-ttu-id="03b79-2180">Используйте краткие инструкции, за которым следует <xref:System.Reflection.Emit.OpCodes.Conv_I8> для константы, которые могут быть выражены в 8 или менее бит.</span><span class="sxs-lookup"><span data-stu-id="03b79-2180">Use a short form instruction followed by a <xref:System.Reflection.Emit.OpCodes.Conv_I8> for constants that can be expressed in 8 or fewer bits.</span></span>  
  
 <span data-ttu-id="03b79-2181">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2181">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2182">ILGenerator.Emit (OpCode, int)</span><span class="sxs-lookup"><span data-stu-id="03b79-2182">ILGenerator.Emit(OpCode, int)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2183">Помещает целочисленное значение 0 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2183">Pushes the integer value of 0 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2184">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2184">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2185">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2185">Format</span></span>|<span data-ttu-id="03b79-2186">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2186">Assembly Format</span></span>|<span data-ttu-id="03b79-2187">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2187">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2188">16</span><span class="sxs-lookup"><span data-stu-id="03b79-2188">16</span></span>|<span data-ttu-id="03b79-2189">ldc.i4.0</span><span class="sxs-lookup"><span data-stu-id="03b79-2189">ldc.i4.0</span></span>|<span data-ttu-id="03b79-2190">Помещает 0 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2190">Pushes 0 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2191">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2191">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2192">Значение 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2192">The value 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2193">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2193">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2194">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2194">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2195">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.0` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2195">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.0` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2196">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2196">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2197">Помещает целочисленное значение 1 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2197">Pushes the integer value of 1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2198">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2198">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2199">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2199">Format</span></span>|<span data-ttu-id="03b79-2200">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2200">Assembly Format</span></span>|<span data-ttu-id="03b79-2201">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2201">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2202">17</span><span class="sxs-lookup"><span data-stu-id="03b79-2202">17</span></span>|<span data-ttu-id="03b79-2203">ldc.i4.1</span><span class="sxs-lookup"><span data-stu-id="03b79-2203">ldc.i4.1</span></span>|<span data-ttu-id="03b79-2204">Помещает 1 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2204">Pushes 1 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2205">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2205">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2206">Значение 1, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2206">The value 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2207">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2207">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2208">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2208">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2209">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2209">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2210">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2210">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2211">Помещает целочисленное значение 2 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2211">Pushes the integer value of 2 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2212">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2212">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2213">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2213">Format</span></span>|<span data-ttu-id="03b79-2214">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2214">Assembly Format</span></span>|<span data-ttu-id="03b79-2215">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2215">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2216">18</span><span class="sxs-lookup"><span data-stu-id="03b79-2216">18</span></span>|<span data-ttu-id="03b79-2217">ldc.i4.2</span><span class="sxs-lookup"><span data-stu-id="03b79-2217">ldc.i4.2</span></span>|<span data-ttu-id="03b79-2218">Помещает 2 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2218">Pushes 2 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2219">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2219">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2220">Значение 2 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2220">The value 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2221">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2221">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2222">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2222">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2223">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2223">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2224">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2224">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2225">Помещает целочисленное значение 3 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2225">Pushes the integer value of 3 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2226">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2226">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2227">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2227">Format</span></span>|<span data-ttu-id="03b79-2228">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2228">Assembly Format</span></span>|<span data-ttu-id="03b79-2229">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2229">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2230">19</span><span class="sxs-lookup"><span data-stu-id="03b79-2230">19</span></span>|<span data-ttu-id="03b79-2231">ldc.i4.3</span><span class="sxs-lookup"><span data-stu-id="03b79-2231">ldc.i4.3</span></span>|<span data-ttu-id="03b79-2232">Помещает 3 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2232">Pushes 3 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2233">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2233">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2234">Значение 3 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2234">The value 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2235">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2235">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2236">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2236">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2237">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.3` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2237">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.3` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2238">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2238">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2239">Помещает целочисленное значение 4 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2239">Pushes the integer value of 4 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2240">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2240">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2241">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2241">Format</span></span>|<span data-ttu-id="03b79-2242">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2242">Assembly Format</span></span>|<span data-ttu-id="03b79-2243">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2243">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2244">1A</span><span class="sxs-lookup"><span data-stu-id="03b79-2244">1A</span></span>|<span data-ttu-id="03b79-2245">ldc.i4.4</span><span class="sxs-lookup"><span data-stu-id="03b79-2245">ldc.i4.4</span></span>|<span data-ttu-id="03b79-2246">Помещает 4 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2246">Pushes 4 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2247">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2247">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2248">Значение 4 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2248">The value 4 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2249">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2249">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2250">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2250">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2251">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2252">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2252">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2253">Помещает целочисленное значение 5 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2253">Pushes the integer value of 5 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2254">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2254">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2255">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2255">Format</span></span>|<span data-ttu-id="03b79-2256">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2256">Assembly Format</span></span>|<span data-ttu-id="03b79-2257">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2257">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2258">1B</span><span class="sxs-lookup"><span data-stu-id="03b79-2258">1B</span></span>|<span data-ttu-id="03b79-2259">ldc.i4.5</span><span class="sxs-lookup"><span data-stu-id="03b79-2259">ldc.i4.5</span></span>|<span data-ttu-id="03b79-2260">Помещает 5 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2260">Pushes 5 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2261">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2261">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2262">Значение 5 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2262">The value 5 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2263">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2263">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2264">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2264">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2265">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.5` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2265">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.5` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2266">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2266">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2267">Помещает целочисленное значение 6 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2267">Pushes the integer value of 6 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2268">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2268">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2269">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2269">Format</span></span>|<span data-ttu-id="03b79-2270">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2270">Assembly Format</span></span>|<span data-ttu-id="03b79-2271">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2271">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2272">1C</span><span class="sxs-lookup"><span data-stu-id="03b79-2272">1C</span></span>|<span data-ttu-id="03b79-2273">ldc.i4.6</span><span class="sxs-lookup"><span data-stu-id="03b79-2273">ldc.i4.6</span></span>|<span data-ttu-id="03b79-2274">Помещает 6 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2274">Pushes 6 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2275">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2275">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2276">Значение 6, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2276">The value 6 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2277">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2277">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2278">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2278">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2279">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.6` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2279">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.6` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2280">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2280">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2281">Помещает целочисленное значение 7 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2281">Pushes the integer value of 7 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2282">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2282">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2283">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2283">Format</span></span>|<span data-ttu-id="03b79-2284">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2284">Assembly Format</span></span>|<span data-ttu-id="03b79-2285">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2285">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2286">1D</span><span class="sxs-lookup"><span data-stu-id="03b79-2286">1D</span></span>|<span data-ttu-id="03b79-2287">ldc.i4.7</span><span class="sxs-lookup"><span data-stu-id="03b79-2287">ldc.i4.7</span></span>|<span data-ttu-id="03b79-2288">Помещает 7 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2288">Pushes 7 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2289">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2289">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2290">Значение 7 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2290">The value 7 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2291">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2291">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2292">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2292">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2293">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.7` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2293">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.7` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2294">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2294">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2295">Помещает целочисленное значение 8 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2295">Pushes the integer value of 8 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2296">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2296">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2297">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2297">Format</span></span>|<span data-ttu-id="03b79-2298">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2298">Assembly Format</span></span>|<span data-ttu-id="03b79-2299">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2299">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2300">1E</span><span class="sxs-lookup"><span data-stu-id="03b79-2300">1E</span></span>|<span data-ttu-id="03b79-2301">ldc.i4.8</span><span class="sxs-lookup"><span data-stu-id="03b79-2301">ldc.i4.8</span></span>|<span data-ttu-id="03b79-2302">Помещает 8 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2302">Pushes 8 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2303">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2303">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2304">Значение 8 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2304">The value 8 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2305">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2305">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2306">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2306">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2307">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2307">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2308">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2308">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_M1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_M1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_M1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_M1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_M1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_M1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2309">Помещает целочисленное значение –1 в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2309">Pushes the integer value of -1 onto the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2310">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2310">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2311">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2311">Format</span></span>|<span data-ttu-id="03b79-2312">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2312">Assembly Format</span></span>|<span data-ttu-id="03b79-2313">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2313">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2314">15</span><span class="sxs-lookup"><span data-stu-id="03b79-2314">15</span></span>|<span data-ttu-id="03b79-2315">ldc.i4.M1</span><span class="sxs-lookup"><span data-stu-id="03b79-2315">ldc.i4.m1</span></span>|<span data-ttu-id="03b79-2316">Помещает значение -1 в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2316">Pushes -1 onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2317">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2317">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2318">Значение -1, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2318">The value -1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2319">Это специальная короткая кодировка для принудительной отправки целочисленное значение 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-2319">This is a special short encoding for the push of the integer value 0.</span></span> <span data-ttu-id="03b79-2320">Все специальные короткие коды Push-4-байтовые целые числа в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2320">All special short encodings push 4 byte integers on the stack.</span></span>  
  
 <span data-ttu-id="03b79-2321">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.m1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2321">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.m1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2322">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2322">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I4_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I4_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I4_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I4_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I4_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I4_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2323">Помещает переданное значение с типом <see langword="int8" /> в стек вычислений как <see langword="int32" /> (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-2323">Pushes the supplied <see langword="int8" /> value onto the evaluation stack as an <see langword="int32" />, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2324">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2324">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2325">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2325">Format</span></span>|<span data-ttu-id="03b79-2326">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2326">Assembly Format</span></span>|<span data-ttu-id="03b79-2327">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2327">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2328">1F < `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2328">1F < `int8` ></span></span>|<span data-ttu-id="03b79-2329">ldc.i4.s `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-2329">ldc.i4.s `num`</span></span>|<span data-ttu-id="03b79-2330">Помещает `num` в стек как `int32`, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-2330">Pushes `num` onto the stack as `int32`, short form.</span></span>|  
  
 <span data-ttu-id="03b79-2331">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2331">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2332">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2332">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2333">`ldc.i4.s` является более эффективную кодировку для помещения целых чисел от -128 до 127 в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2333">`ldc.i4.s` is a more efficient encoding for pushing the integers from -128 to 127 onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2334">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i4.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2334">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i4.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2335">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-2335">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2336">Помещает переданное значение с типом <see langword="int64" /> в стек вычислений как <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2336">Pushes a supplied value of type <see langword="int64" /> onto the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2337">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2337">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2338">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2338">Format</span></span>|<span data-ttu-id="03b79-2339">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2339">Assembly Format</span></span>|<span data-ttu-id="03b79-2340">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2340">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2341">21 < `int64` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2341">21 < `int64` ></span></span>|<span data-ttu-id="03b79-2342">ldc.I8 `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-2342">ldc.i8 `num`</span></span>|<span data-ttu-id="03b79-2343">Помещает `num` в стек как `int64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2343">Pushes `num` onto the stack as `int64`.</span></span>|  
  
 <span data-ttu-id="03b79-2344">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2344">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2345">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2345">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2346">Эта кодировка помещает `int64` значение в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2346">This encoding pushes an `int64` value onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2347">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2347">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2348">ILGenerator.Emit (OpCode, long)</span><span class="sxs-lookup"><span data-stu-id="03b79-2348">ILGenerator.Emit(OpCode, long)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2349">Помещает переданное значение с типом <see langword="float32" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-2349">Pushes a supplied value of type <see langword="float32" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2350">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2350">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2351">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2351">Format</span></span>|<span data-ttu-id="03b79-2352">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2352">Assembly Format</span></span>|<span data-ttu-id="03b79-2353">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2353">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2354">22 < `float32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2354">22 < `float32` ></span></span>|<span data-ttu-id="03b79-2355">ldc.R4 `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-2355">ldc.r4 `num`</span></span>|<span data-ttu-id="03b79-2356">Помещает `num` в стек как `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2356">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="03b79-2357">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2357">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2358">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2358">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2359">Эта кодировка помещает `float32` значение в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2359">This encoding pushes a `float32` value onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2360">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.r4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2360">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2361">ILGenerator.Emit (OpCode, один)</span><span class="sxs-lookup"><span data-stu-id="03b79-2361">ILGenerator.Emit(OpCode, single)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldc_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldc_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldc_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldc_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldc_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldc_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2362">Помещает переданное значение с типом <see langword="float64" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-2362">Pushes a supplied value of type <see langword="float64" /> onto the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2363">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2363">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2364">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2364">Format</span></span>|<span data-ttu-id="03b79-2365">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2365">Assembly Format</span></span>|<span data-ttu-id="03b79-2366">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2366">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2367">23 < `float64` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2367">23 < `float64` ></span></span>|<span data-ttu-id="03b79-2368">ldc.R8 `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-2368">ldc.r8 `num`</span></span>|<span data-ttu-id="03b79-2369">Помещает `num` в стек как `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2369">Pushes `num` onto the stack as `F`.</span></span>|  
  
 <span data-ttu-id="03b79-2370">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2370">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2371">Значение `num` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2371">The value `num` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2372">Эта кодировка помещает `float64` значение в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2372">This encoding pushes a `float64` value onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2373">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldc.r8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2373">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldc.r8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2374">ILGenerator.Emit (OpCode, double)</span><span class="sxs-lookup"><span data-stu-id="03b79-2374">ILGenerator.Emit(OpCode, double)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2375">Загружает элемент с заданным индексом массива на вершину стека вычислений в качестве типа, указанного в инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-2375">Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2376">В следующей таблице перечислены инструкции по шестнадцатеричном формате и формате сборки промежуточного языка MSIL, Microsoft, а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2376">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2377">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2377">Format</span></span>|<span data-ttu-id="03b79-2378">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2378">Assembly Format</span></span>|<span data-ttu-id="03b79-2379">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2379">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2380">A3 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2380">A3 < `T` ></span></span>|<span data-ttu-id="03b79-2381">ldelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="03b79-2381">ldelem `typeTok`</span></span>|<span data-ttu-id="03b79-2382">Загружает элемент с `index` на вершину стека вычислений как тип `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2382">Loads the element at `index` onto the top of the stack as type `typeTok`.</span></span>|  
  
 <span data-ttu-id="03b79-2383">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2383">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2384">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2384">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2385">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2385">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2386">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2386">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2387">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2387">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2388">`ldelem` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2388">The `ldelem` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2389">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2389">Arrays are objects, and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2390">Тип возвращаемого значения указан маркером `typeTok` в инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-2390">The type of the return value is specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="03b79-2391"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2391"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2392"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем значение верхней границы количества `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2392"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the upper bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2393">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2393">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2394">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-2394">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2395">Загружает элемент массива с заданным индексом, имеющий тип <see langword="native int" />, на вершину стека вычислений как <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2395">Loads the element with type <see langword="native int" /> at a specified array index onto the top of the evaluation stack as a <see langword="native int" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2396">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2396">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2397">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2397">Format</span></span>|<span data-ttu-id="03b79-2398">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2398">Assembly Format</span></span>|<span data-ttu-id="03b79-2399">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2399">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2400">97</span><span class="sxs-lookup"><span data-stu-id="03b79-2400">97</span></span>|<span data-ttu-id="03b79-2401">ldelem.i</span><span class="sxs-lookup"><span data-stu-id="03b79-2401">ldelem.i</span></span>|<span data-ttu-id="03b79-2402">Загружает элемент типа `native int` в `index` на вершину стека вычислений как `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2402">Loads the element with type `native int` at `index` onto the top of the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="03b79-2403">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2403">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2404">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2404">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2405">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2405">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2406">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2406">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2407">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2407">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2408">`ldelem.i` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2408">The `ldelem.i` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2409">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2409">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2410">Возвращаемое значение для `ldelem.i` является `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2410">The return value for `ldelem.i` is `native int`.</span></span>  
  
 <span data-ttu-id="03b79-2411">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2411">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2412"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2412"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2413"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2413"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2414"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2414"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2415">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.i` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2415">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2416">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2416">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2417">Загружает элемент типа <see langword="int8" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2417">Loads the element with type <see langword="int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2418">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2418">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2419">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2419">Format</span></span>|<span data-ttu-id="03b79-2420">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2420">Assembly Format</span></span>|<span data-ttu-id="03b79-2421">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2421">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2422">90</span><span class="sxs-lookup"><span data-stu-id="03b79-2422">90</span></span>|<span data-ttu-id="03b79-2423">ldelem.i1</span><span class="sxs-lookup"><span data-stu-id="03b79-2423">ldelem.i1</span></span>|<span data-ttu-id="03b79-2424">Загружает элемент типа `int8` в `index` на вершину стека вычислений как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2424">Loads the element with type `int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2425">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2425">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2426">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2426">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2427">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2427">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2428">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2428">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2429">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2429">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2430">`ldelem.i1` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2430">The `ldelem.i1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2431">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2431">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2432">Возвращаемое значение для `ldelem.i1` является `int8`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2432">The return value for `ldelem.i1` is `int8`.</span></span>  
  
 <span data-ttu-id="03b79-2433">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2433">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2434"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2434"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2435"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2435"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2436"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2436"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2437">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.i1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2437">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2438">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2438">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2439">Загружает элемент типа <see langword="int16" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2439">Loads the element with type <see langword="int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2440">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2440">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2441">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2441">Format</span></span>|<span data-ttu-id="03b79-2442">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2442">Assembly Format</span></span>|<span data-ttu-id="03b79-2443">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2443">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2444">92</span><span class="sxs-lookup"><span data-stu-id="03b79-2444">92</span></span>|<span data-ttu-id="03b79-2445">ldelem.i2</span><span class="sxs-lookup"><span data-stu-id="03b79-2445">ldelem.i2</span></span>|<span data-ttu-id="03b79-2446">Загружает элемент типа `int16` в `index` на вершину стека вычислений как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2446">Loads the element with type `int16` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2447">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2447">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2448">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2448">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2449">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2449">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2450">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2450">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2451">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2451">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2452">`ldelem.i2` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2452">The `ldelem.i2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2453">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2453">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2454">Возвращаемое значение для `ldelem.i2` является `int16`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2454">The return value for `ldelem.i2` is `int16`.</span></span>  
  
 <span data-ttu-id="03b79-2455">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2455">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2456"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2456"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2457"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2457"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2458"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2458"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2459">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.i2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2460">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2460">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2461">Загружает элемент типа <see langword="int32" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2461">Loads the element with type <see langword="int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2462">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2462">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2463">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2463">Format</span></span>|<span data-ttu-id="03b79-2464">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2464">Assembly Format</span></span>|<span data-ttu-id="03b79-2465">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2466">94</span><span class="sxs-lookup"><span data-stu-id="03b79-2466">94</span></span>|<span data-ttu-id="03b79-2467">ldelem.i4</span><span class="sxs-lookup"><span data-stu-id="03b79-2467">ldelem.i4</span></span>|<span data-ttu-id="03b79-2468">Загружает элемент типа `int32` в `index` на вершину стека вычислений как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2468">Loads the element with type `int32` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2469">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2470">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2470">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2471">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2471">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2472">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2472">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2473">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2473">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2474">`ldelem.i4` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2474">The `ldelem.i4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2475">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2475">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2476">Возвращаемое значение для `ldelem.i4` является `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2476">The return value for `ldelem.i4` is `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2477">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2477">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2478"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2478"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2479"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2479"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2480"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2480"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2481">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2481">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2482">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2482">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2483">Загружает элемент типа <see langword="int64" /> с заданным индексом массива на вершину стека вычислений как <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2483">Loads the element with type <see langword="int64" /> at a specified array index onto the top of the evaluation stack as an <see langword="int64" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2484">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2484">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2485">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2485">Format</span></span>|<span data-ttu-id="03b79-2486">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2486">Assembly Format</span></span>|<span data-ttu-id="03b79-2487">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2487">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2488">96</span><span class="sxs-lookup"><span data-stu-id="03b79-2488">96</span></span>|<span data-ttu-id="03b79-2489">ldelem.i8</span><span class="sxs-lookup"><span data-stu-id="03b79-2489">ldelem.i8</span></span>|<span data-ttu-id="03b79-2490">Загружает элемент типа `int64` в `index` на вершину стека вычислений как `int64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2490">Loads the element with type `int64` at `index` onto the top of the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="03b79-2491">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2491">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2492">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2492">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2493">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2493">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2494">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2494">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2495">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2495">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2496">`ldelem.i8` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2496">The `ldelem.i8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2497">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2497">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2498">Возвращаемое значение для `ldelem.i8` является `int64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2498">The return value for `ldelem.i8` is `int64`.</span></span>  
  
 <span data-ttu-id="03b79-2499">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2499">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2500"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2500"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2501"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2501"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2502"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2502"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2503">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2503">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2504">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2504">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2505">Загружает элемент массива с заданным индексом, имеющий тип <see langword="float32" />, на вершину стека вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-2505">Loads the element with type <see langword="float32" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2506">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2506">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2507">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2507">Format</span></span>|<span data-ttu-id="03b79-2508">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2508">Assembly Format</span></span>|<span data-ttu-id="03b79-2509">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2509">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2510">98</span><span class="sxs-lookup"><span data-stu-id="03b79-2510">98</span></span>|<span data-ttu-id="03b79-2511">ldelem.r4</span><span class="sxs-lookup"><span data-stu-id="03b79-2511">ldelem.r4</span></span>|<span data-ttu-id="03b79-2512">Загружает элемент типа `float32` в `index` на вершину стека вычислений как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2512">Loads the element with type `float32` at `index` onto the top of the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="03b79-2513">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2513">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2514">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2514">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2515">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2515">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2516">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2516">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2517">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2517">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2518">`ldelem.r4` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2518">The `ldelem.r4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2519">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2519">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2520">Возвращаемое значение для `ldelem.r4` является `float32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2520">The return value for `ldelem.r4` is `float32`.</span></span>  
  
 <span data-ttu-id="03b79-2521">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2521">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2522"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2522"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2523"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2523"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2524"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2524"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2525">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.r4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2525">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2526">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2526">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2527">Загружает элемент массива с заданным индексом, имеющий тип <see langword="float64" />, на вершину стека вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-2527">Loads the element with type <see langword="float64" /> at a specified array index onto the top of the evaluation stack as type <see langword="F" /> (float).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2528">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2528">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2529">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2529">Format</span></span>|<span data-ttu-id="03b79-2530">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2530">Assembly Format</span></span>|<span data-ttu-id="03b79-2531">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2531">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2532">99</span><span class="sxs-lookup"><span data-stu-id="03b79-2532">99</span></span>|<span data-ttu-id="03b79-2533">ldelem.r8</span><span class="sxs-lookup"><span data-stu-id="03b79-2533">ldelem.r8</span></span>|<span data-ttu-id="03b79-2534">Загружает элемент типа `float64` в `index` на вершину стека вычислений как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2534">Loads the element with type `float64` at `index` onto the top of the stack as type `F`.</span></span>|  
  
 <span data-ttu-id="03b79-2535">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2535">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2536">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2536">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2537">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2537">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2538">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2538">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2539">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2539">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2540">`ldelem.r8` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2540">The `ldelem.r8` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2541">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2541">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2542">Возвращаемое значение для `ldelem.r8` является `float64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2542">The return value for `ldelem.r8` is `float64`.</span></span>  
  
 <span data-ttu-id="03b79-2543">Значения с плавающей запятой преобразуются в тип `F` при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2543">Floating-point values are converted to type `F` when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2544"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2544"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2545"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2545"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2546"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2546"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2547">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.r8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2547">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2548">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2548">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2549">Загружает элемент массива с заданным индексом, содержащий ссылку на объект, на вершину стека вычислений как <see langword="O" /> (ссылка на объект).</span><span class="sxs-lookup"><span data-stu-id="03b79-2549">Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <see langword="O" /> (object reference).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2550">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2550">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2551">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2551">Format</span></span>|<span data-ttu-id="03b79-2552">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2552">Assembly Format</span></span>|<span data-ttu-id="03b79-2553">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2553">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2554">9A</span><span class="sxs-lookup"><span data-stu-id="03b79-2554">9A</span></span>|<span data-ttu-id="03b79-2555">ldelem.ref</span><span class="sxs-lookup"><span data-stu-id="03b79-2555">ldelem.ref</span></span>|<span data-ttu-id="03b79-2556">Загружает элемент ссылку на `index` на вершину стека вычислений как тип `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2556">Loads the element with an object reference at `index` onto the top of the stack as type `O`.</span></span>|  
  
 <span data-ttu-id="03b79-2557">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2557">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2558">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2558">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2559">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2559">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2560">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2560">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2561">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2561">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2562">`ldelem.ref` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2562">The `ldelem.ref` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2563">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2563">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2564">Возвращаемое значение для `ldelem.ref` является типом `O` (ссылка на объект).</span><span class="sxs-lookup"><span data-stu-id="03b79-2564">The return value for `ldelem.ref` is type `O` (object reference).</span></span>  
  
 <span data-ttu-id="03b79-2565"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2565"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2566"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2566"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2567"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2567"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2568">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.ref` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2568">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2569">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2569">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2570">Загружает элемент типа <see langword="unsigned int8" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2570">Loads the element with type <see langword="unsigned int8" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2571">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2571">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2572">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2572">Format</span></span>|<span data-ttu-id="03b79-2573">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2573">Assembly Format</span></span>|<span data-ttu-id="03b79-2574">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2574">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2575">91</span><span class="sxs-lookup"><span data-stu-id="03b79-2575">91</span></span>|<span data-ttu-id="03b79-2576">ldelem.u1</span><span class="sxs-lookup"><span data-stu-id="03b79-2576">ldelem.u1</span></span>|<span data-ttu-id="03b79-2577">Загружает элемент типа `unsigned int8` в `index` на вершину стека вычислений как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2577">Loads the element with type `unsigned int8` at `index` onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2578">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2578">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2579">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2579">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2580">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2580">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2581">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2581">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2582">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2582">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2583">`ldelem.u1` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2583">The `ldelem.u1` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2584">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2584">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2585">Возвращаемое значение для `ldelem.u1` является `int8`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2585">The return value for `ldelem.u1` is `int8`.</span></span>  
  
 <span data-ttu-id="03b79-2586">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2586">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2587"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2587"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2588"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2588"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2589"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2589"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2590">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.u1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2590">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2591">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2591">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2592">Загружает элемент типа <see langword="unsigned int16" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2592">Loads the element with type <see langword="unsigned int16" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2593">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2593">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2594">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2594">Format</span></span>|<span data-ttu-id="03b79-2595">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2595">Assembly Format</span></span>|<span data-ttu-id="03b79-2596">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2596">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2597">93</span><span class="sxs-lookup"><span data-stu-id="03b79-2597">93</span></span>|<span data-ttu-id="03b79-2598">ldelem.u2</span><span class="sxs-lookup"><span data-stu-id="03b79-2598">ldelem.u2</span></span>|<span data-ttu-id="03b79-2599">Загружает элемент типа `unsigned int16` с индексом на вершину стека вычислений как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2599">Loads the element with type `unsigned int16` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2600">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2600">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2601">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2601">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2602">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2602">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2603">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2603">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2604">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2604">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2605">`ldelem.u2` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2605">The `ldelem.u2` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2606">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2606">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2607">Возвращаемое значение для `ldelem.u2` является `int16`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2607">The return value for `ldelem.u2` is `int16`.</span></span>  
  
 <span data-ttu-id="03b79-2608">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2608">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2609"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2609"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2610"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2610"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2611"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2611"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2612">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.u2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2612">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2613">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2613">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelem_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelem_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelem_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelem_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelem_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelem_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2614">Загружает элемент типа <see langword="unsigned int32" /> с заданным индексом массива на вершину стека вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2614">Loads the element with type <see langword="unsigned int32" /> at a specified array index onto the top of the evaluation stack as an <see langword="int32" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2615">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2615">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2616">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2616">Format</span></span>|<span data-ttu-id="03b79-2617">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2617">Assembly Format</span></span>|<span data-ttu-id="03b79-2618">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2618">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2619">95</span><span class="sxs-lookup"><span data-stu-id="03b79-2619">95</span></span>|<span data-ttu-id="03b79-2620">ldelem.u4</span><span class="sxs-lookup"><span data-stu-id="03b79-2620">ldelem.u4</span></span>|<span data-ttu-id="03b79-2621">Загружает элемент типа `unsigned int32` с индексом на вершину стека вычислений как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2621">Loads the element with type `unsigned int32` at index onto the top of the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2622">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2622">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2623">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2623">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2624">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2624">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2625">`index` и `array` извлекаются из стека; значение, хранящееся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2625">`index` and `array` are popped from the stack; the value stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2626">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2626">The value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2627">`ldelem.u4` Инструкция загружает значение элемента с индексом `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2627">The `ldelem.u4` instruction loads the value of the element with index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2628">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2628">Arrays are objects and hence represented by a value of type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2629">Возвращаемое значение для `ldelem.u4` является `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2629">The return value for `ldelem.u4` is `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2630">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2630">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2631"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2631"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2632"><xref:System.ArrayTypeMismatchException> возникает, если массив не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2632"><xref:System.ArrayTypeMismatchException> is thrown if array does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2633"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2633"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2634">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelem.u4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2634">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelem.u4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2635">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2635">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldelema">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldelema" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldelema As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldelema;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldelema : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldelema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2636">Загружает адрес элемента массива с заданным индексом на вершину стека вычислений как <see langword="&amp;" /> (управляемый указатель).</span><span class="sxs-lookup"><span data-stu-id="03b79-2636">Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <see langword="&amp;" /> (managed pointer).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2637">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2637">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2638">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2638">Format</span></span>|<span data-ttu-id="03b79-2639">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2639">Assembly Format</span></span>|<span data-ttu-id="03b79-2640">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2640">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2641">8F < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2641">8F < `T` ></span></span>|<span data-ttu-id="03b79-2642">ldelema `class`</span><span class="sxs-lookup"><span data-stu-id="03b79-2642">ldelema `class`</span></span>|<span data-ttu-id="03b79-2643">Загружает адрес элемента массива с `index` на вершину стека вычислений как `&` (управляемый указатель).</span><span class="sxs-lookup"><span data-stu-id="03b79-2643">Loads the address of the array element at `index` onto the top of the evaluation stack as type `&` (managed pointer).</span></span>|  
  
 <span data-ttu-id="03b79-2644">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2644">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2645">Ссылка на объект `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2645">An object reference `array` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2646">Значение индекса `index` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2646">An index value `index` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-2647">`index` и `array` извлекаются из стека; адрес, хранящийся в позиции `index` в `array` выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-2647">`index` and `array` are popped from the stack; the address stored at position `index` in `array` is looked up.</span></span>  
  
4.  <span data-ttu-id="03b79-2648">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2648">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2649">`ldelema` Используется для получения адреса объекта с определенного индекса в массиве объектов (типа `class`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2649">The `ldelema` is used to retrieve the address of an object at a particular index in an array of objects (of type `class`).</span></span> <span data-ttu-id="03b79-2650">`ldelema` Инструкция загружает адрес значения по индексу `index` (тип `native int`) в отсчитываемый от нуля одномерный массив `array` и помещает его в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-2650">The `ldelema` instruction loads the address of the value at index `index` (type `native int`) in the zero-based one-dimensional array `array` and places it on the top of the stack.</span></span> <span data-ttu-id="03b79-2651">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2651">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-2652">Значение должно быть типа `class` переданный с инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-2652">The value must be of type `class` passed with the instruction.</span></span>  
  
 <span data-ttu-id="03b79-2653">Возвращаемое значение для `ldelema` является управляемым указателем (тип `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2653">The return value for `ldelema` is a managed pointer (type `&`).</span></span>  
  
 <span data-ttu-id="03b79-2654">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2654">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2655"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-2655"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-2656"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-2656"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-2657"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2657"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-2658">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldelema` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2658">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldelema` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2659">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-2659">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2660">Выполняет поиск значения поля в объекте, ссылка на который находится в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2660">Finds the value of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2661">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2661">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2662">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2662">Format</span></span>|<span data-ttu-id="03b79-2663">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2663">Assembly Format</span></span>|<span data-ttu-id="03b79-2664">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2664">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2665">7B < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2665">7B < `T` ></span></span>|<span data-ttu-id="03b79-2666">ldfld `field`</span><span class="sxs-lookup"><span data-stu-id="03b79-2666">ldfld `field`</span></span>|<span data-ttu-id="03b79-2667">Помещает значение поля в указанный объект в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2667">Pushes the value of a field in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2668">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2668">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2669">Ссылка на объект (или указатель) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2669">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2670">Ссылка на объект (или указатель) извлекается из стека; найти значение указанного поля в объекте.</span><span class="sxs-lookup"><span data-stu-id="03b79-2670">The object reference (or pointer) is popped from the stack; the value of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="03b79-2671">Значение, хранящееся в поле помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2671">The value stored in the field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2672">`ldfld` Инструкция помещает значение поля в объекте в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2672">The `ldfld` instruction pushes the value of a field located in an object onto the stack.</span></span> <span data-ttu-id="03b79-2673">Объект должен находиться в стеке как ссылка на объект (тип `O`), управляемый указатель (типа `&`), неуправляемый указатель (типа `native int`), временный указатель (типа `*`), или экземпляр типа значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2673">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="03b79-2674">Использование неуправляемого указателя не разрешено в проверяемом коде.</span><span class="sxs-lookup"><span data-stu-id="03b79-2674">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="03b79-2675">Поле объекта задано токеном метаданных, который должен ссылаться элемент поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-2675">The object's field is specified by a metadata token that must refer to a field member.</span></span> <span data-ttu-id="03b79-2676">Возвращаемый тип является таким же, как связанные с этим полем.</span><span class="sxs-lookup"><span data-stu-id="03b79-2676">The return type is the same as the one associated with the field.</span></span> <span data-ttu-id="03b79-2677">Поле может быть статическое поле или поля экземпляра (в этом случае объект не должен быть ссылкой на null).</span><span class="sxs-lookup"><span data-stu-id="03b79-2677">The field may be either an instance field (in which case the object must not be a null reference) or a static field.</span></span>  
  
 <span data-ttu-id="03b79-2678">`ldfld` Инструкция может предшествовать одно или оба указанных <xref:System.Reflection.Emit.OpCodes.Unaligned> и <xref:System.Reflection.Emit.OpCodes.Volatile> префиксы.</span><span class="sxs-lookup"><span data-stu-id="03b79-2678">The `ldfld` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="03b79-2679"><xref:System.NullReferenceException> возникает, если объект имеет значение null, и поле не является статическим.</span><span class="sxs-lookup"><span data-stu-id="03b79-2679"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="03b79-2680"><xref:System.MissingFieldException> возникает, если указанное поле не найден в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-2680"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="03b79-2681">Обычно это проверяется инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинном коде, не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2681">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="03b79-2682">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldfld` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2682">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldfld` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2683">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-2683">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2684">Ищет адрес поля в объекте, ссылка на который находится в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2684">Finds the address of a field in the object whose reference is currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2685">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2685">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2686">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2686">Format</span></span>|<span data-ttu-id="03b79-2687">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2687">Assembly Format</span></span>|<span data-ttu-id="03b79-2688">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2688">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2689">7C < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2689">7C < `T` ></span></span>|<span data-ttu-id="03b79-2690">ldflda `field`</span><span class="sxs-lookup"><span data-stu-id="03b79-2690">ldflda `field`</span></span>|<span data-ttu-id="03b79-2691">Помещает адрес `field` в указанный объект в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2691">Pushes the address of `field` in a specified object onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2692">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2692">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2693">Ссылка на объект (или указатель) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2693">An object reference (or pointer) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2694">Ссылка на объект (или указатель) извлекается из стека; найти адрес указанного поля в объекте.</span><span class="sxs-lookup"><span data-stu-id="03b79-2694">The object reference (or pointer) is popped from the stack; the address of the specified field in the object is found.</span></span>  
  
3.  <span data-ttu-id="03b79-2695">Адрес указанного поля помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2695">The address of the specified field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2696">`ldflda` Инструкция помещает адрес поля в объекте в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2696">The `ldflda` instruction pushes the address of a field located in an object onto the stack.</span></span> <span data-ttu-id="03b79-2697">Объект должен находиться в стеке как ссылка на объект (тип `O`), управляемый указатель (типа `&`), неуправляемый указатель (типа `native int`), временный указатель (типа `*`), или экземпляр типа значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2697">The object must be on the stack as an object reference (type `O`), a managed pointer (type `&`), an unmanaged pointer (type `native int`), a transient pointer (type `*`), or an instance of a value type.</span></span> <span data-ttu-id="03b79-2698">Использование неуправляемого указателя не разрешено в проверяемом коде.</span><span class="sxs-lookup"><span data-stu-id="03b79-2698">The use of an unmanaged pointer is not permitted in verifiable code.</span></span> <span data-ttu-id="03b79-2699">Поле объекта задано токеном метаданных, который должен ссылаться элемент поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-2699">The object's field is specified by a metadata token that must refer to a field member.</span></span>  
  
 <span data-ttu-id="03b79-2700">Значение, возвращенное `ldflda` является управляемым указателем (тип `&`) Если объект не помещается в стек как неуправляемый указатель, в этом случае обратный адрес является также неуправляемый указатель (типа `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-2700">The value returned by `ldflda` is a managed pointer (type `&`) unless the object is pushed onto the stack as an unmanaged pointer, in which case the return address is also an unmanaged pointer (type `native int`).</span></span>  
  
 <span data-ttu-id="03b79-2701">`ldflda` Инструкция может предшествовать одно или оба указанных <xref:System.Reflection.Emit.OpCodes.Unaligned> и <xref:System.Reflection.Emit.OpCodes.Volatile> префиксы.</span><span class="sxs-lookup"><span data-stu-id="03b79-2701">The `ldflda` instruction can be preceded by either or both of the <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile> prefixes.</span></span>  
  
 <span data-ttu-id="03b79-2702"><xref:System.InvalidOperationException> возникает, если объект не находится в домене приложения, при одновременном.</span><span class="sxs-lookup"><span data-stu-id="03b79-2702"><xref:System.InvalidOperationException> is thrown if the object is not within the application domain from which it is being accessed.</span></span> <span data-ttu-id="03b79-2703">Не удалось загрузить адрес поле, которое не находится внутри доступ к домену приложения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2703">The address of a field that is not inside the accessing application domain cannot be loaded.</span></span>  
  
 <span data-ttu-id="03b79-2704"><xref:System.NullReferenceException> возникает, если объект имеет значение null, и поле не является статическим.</span><span class="sxs-lookup"><span data-stu-id="03b79-2704"><xref:System.NullReferenceException> is thrown if the object is null and the field is not static.</span></span>  
  
 <span data-ttu-id="03b79-2705"><xref:System.MissingFieldException> возникает, если указанное поле не найден в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-2705"><xref:System.MissingFieldException> is thrown if the specified field is not found in the metadata.</span></span> <span data-ttu-id="03b79-2706">Обычно это проверяется инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинном коде, не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-2706">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="03b79-2707">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldflda` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2707">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldflda` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2708">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-2708">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2709">Помещает в стек вычислений неуправляемый указатель (с типом <see langword="native int" />) на машинный код, реализующий заданный метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-2709">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a specific method onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2710">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2710">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2711">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2711">Format</span></span>|<span data-ttu-id="03b79-2712">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2712">Assembly Format</span></span>|<span data-ttu-id="03b79-2713">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2713">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2714">FE 06 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-2714">FE 06 < `T` ></span></span>|<span data-ttu-id="03b79-2715">выполнить операцию LDFTN над `method`</span><span class="sxs-lookup"><span data-stu-id="03b79-2715">ldftn `method`</span></span>|<span data-ttu-id="03b79-2716">Помещает указатель на метод, заданный параметром `method` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2716">Pushes a pointer to a method referenced by `method` on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2717">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2717">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2718">Неуправляемый указатель на конкретный метод помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2718">The unmanaged pointer to a specific method is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2719">Конкретный метод (`method`) могут вызываться с помощью <xref:System.Reflection.Emit.OpCodes.Calli> инструкции, если он ссылается на управляемый метод (или заглушка, которая переходит из управляемого в неуправляемый код).</span><span class="sxs-lookup"><span data-stu-id="03b79-2719">The specific method (`method`) can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="03b79-2720">Возвращаемое значение ссылается на машинный код с использованием среды CLR, соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2720">The value returned points to native code using the CLR calling convention.</span></span> <span data-ttu-id="03b79-2721">Указатель this метод не должен быть передан в неуправляемый машинный код как процедура обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="03b79-2721">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="03b79-2722">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldftn` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2722">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldftn` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2723">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-2723">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2724">Выполняет косвенную загрузку значения с типом <see langword="native int" /> в стек вычислений как <see langword="native int" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2724">Loads a value of type <see langword="native int" /> as a <see langword="native int" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2725">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2725">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2726">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2726">Format</span></span>|<span data-ttu-id="03b79-2727">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2727">Assembly Format</span></span>|<span data-ttu-id="03b79-2728">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2728">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2729">4D</span><span class="sxs-lookup"><span data-stu-id="03b79-2729">4D</span></span>|<span data-ttu-id="03b79-2730">ldind.i</span><span class="sxs-lookup"><span data-stu-id="03b79-2730">ldind.i</span></span>|<span data-ttu-id="03b79-2731">Загружает `native int` по адресу `addr` в стек как `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2731">Loads the `native int` value at address `addr` onto the stack as a `native int`.</span></span>|  
  
 <span data-ttu-id="03b79-2732">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2732">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2733">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2733">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2734">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2734">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2735">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2735">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2736">`ldind.i` Инструкция `native int` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2736">The `ldind.i` instruction indirectly loads a `native int` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `native int`.</span></span>  
  
 <span data-ttu-id="03b79-2737">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2737">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2738">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2738">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2739">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2739">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2740">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2740">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2741">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2741">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2742">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2742">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2743">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2743">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2744">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2744">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2745"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2745"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2746">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.i` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2746">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2747">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2747">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2748">Выполняет косвенную загрузку значения с типом <see langword="int8" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2748">Loads a value of type <see langword="int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2749">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2749">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2750">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2750">Format</span></span>|<span data-ttu-id="03b79-2751">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2751">Assembly Format</span></span>|<span data-ttu-id="03b79-2752">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2752">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2753">46</span><span class="sxs-lookup"><span data-stu-id="03b79-2753">46</span></span>|<span data-ttu-id="03b79-2754">ldind.i1</span><span class="sxs-lookup"><span data-stu-id="03b79-2754">ldind.i1</span></span>|<span data-ttu-id="03b79-2755">Загружает `int8` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2755">Loads the `int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2756">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2756">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2757">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2757">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2758">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2758">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2759">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2759">The fetched value is pushed onto the stack.</span></span> 
  
 <span data-ttu-id="03b79-2760">`ldind.i1` Инструкция `int8` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2760">The `ldind.i1` instruction indirectly loads an `int8` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2761">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2761">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2762">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2762">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2763">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2763">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2764">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2764">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2765">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2765">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2766">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2766">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2767">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2767">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2768">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2768">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2769"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2769"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2770">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.i1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2770">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2771">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2771">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2772">Выполняет косвенную загрузку значения с типом <see langword="int16" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2772">Loads a value of type <see langword="int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2773">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2773">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2774">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2774">Format</span></span>|<span data-ttu-id="03b79-2775">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2775">Assembly Format</span></span>|<span data-ttu-id="03b79-2776">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2776">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2777">48</span><span class="sxs-lookup"><span data-stu-id="03b79-2777">48</span></span>|<span data-ttu-id="03b79-2778">ldind.I2</span><span class="sxs-lookup"><span data-stu-id="03b79-2778">ldind.i2</span></span>|<span data-ttu-id="03b79-2779">Загружает `int16` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2779">Loads the `int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2780">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2780">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2781">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2781">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2782">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2782">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2783">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2783">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2784">`ldind.i2` Инструкция `int16` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2784">The `ldind.i2` instruction indirectly loads an `int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2785">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2785">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2786">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2786">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2787">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2787">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2788">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2788">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2789">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2789">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2790">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2790">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2791">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2791">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2792">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2792">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2793"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2793"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2794">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.i2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2794">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2795">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2795">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2796">Выполняет косвенную загрузку значения с типом <see langword="int32" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2796">Loads a value of type <see langword="int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2797">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2797">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2798">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2798">Format</span></span>|<span data-ttu-id="03b79-2799">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2799">Assembly Format</span></span>|<span data-ttu-id="03b79-2800">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2800">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2801">4A</span><span class="sxs-lookup"><span data-stu-id="03b79-2801">4A</span></span>|<span data-ttu-id="03b79-2802">ldind.i4</span><span class="sxs-lookup"><span data-stu-id="03b79-2802">ldind.i4</span></span>|<span data-ttu-id="03b79-2803">Загружает `int32` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2803">Loads the `int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2804">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2804">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2805">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2805">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2806">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2806">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2807">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2807">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2808">`ldind.i4` Инструкция `int32` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2808">The `ldind.i4` instruction indirectly loads an `int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2809">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2809">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2810">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2810">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2811">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2811">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2812">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2812">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2813">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2813">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2814">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2814">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2815">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2815">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2816">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2816">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2817"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2817"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2818">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2818">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2819">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2819">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2820">Выполняет косвенную загрузку значения с типом <see langword="int64" /> в стек вычислений как <see langword="int64" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2820">Loads a value of type <see langword="int64" /> as an <see langword="int64" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2821">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2821">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2822">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2822">Format</span></span>|<span data-ttu-id="03b79-2823">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2823">Assembly Format</span></span>|<span data-ttu-id="03b79-2824">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2824">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2825">4C</span><span class="sxs-lookup"><span data-stu-id="03b79-2825">4C</span></span>|<span data-ttu-id="03b79-2826">ldind.I8</span><span class="sxs-lookup"><span data-stu-id="03b79-2826">ldind.i8</span></span>|<span data-ttu-id="03b79-2827">Загружает `int64` по адресу `addr` в стек как `int64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2827">Loads the `int64` value at address `addr` onto the stack as an `int64`.</span></span>|  
  
 <span data-ttu-id="03b79-2828">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2828">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2829">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2829">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2830">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2830">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2831">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2831">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2832">`ldind.i8` Инструкция `int64` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `int64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2832">The `ldind.i8` instruction indirectly loads an `int64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int64`.</span></span>  
  
 <span data-ttu-id="03b79-2833">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2833">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2834">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2834">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2835">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2835">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2836">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2836">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2837">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2837">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2838">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2838">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2839">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2839">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2840">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2840">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2841"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2841"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2842">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2842">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2843">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2843">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2844">Выполняет косвенную загрузку значения с типом <see langword="float32" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-2844">Loads a value of type <see langword="float32" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2845">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2845">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2846">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2846">Format</span></span>|<span data-ttu-id="03b79-2847">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2847">Assembly Format</span></span>|<span data-ttu-id="03b79-2848">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2848">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2849">4E</span><span class="sxs-lookup"><span data-stu-id="03b79-2849">4E</span></span>|<span data-ttu-id="03b79-2850">ldind.R4</span><span class="sxs-lookup"><span data-stu-id="03b79-2850">ldind.r4</span></span>|<span data-ttu-id="03b79-2851">Загружает `float32` по адресу `addr` стек как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2851">Loads the `float32` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="03b79-2852">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2852">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2853">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2853">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2854">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2854">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2855">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2855">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2856">`ldind.r4` Инструкция `float32` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2856">The `ldind.r4` instruction indirectly loads a `float32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a type `F`.</span></span>  
  
 <span data-ttu-id="03b79-2857">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2857">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2858">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2858">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2859">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2859">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2860">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2860">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2861">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2861">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2862">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2862">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2863">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2863">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2864">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2864">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2865"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2865"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2866">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.r4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2866">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2867">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2867">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2868">Выполняет косвенную загрузку значения с типом <see langword="float64" /> в стек вычислений как <see langword="F" /> (число с плавающей запятой).</span><span class="sxs-lookup"><span data-stu-id="03b79-2868">Loads a value of type <see langword="float64" /> as a type <see langword="F" /> (float) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2869">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2869">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2870">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2870">Format</span></span>|<span data-ttu-id="03b79-2871">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2871">Assembly Format</span></span>|<span data-ttu-id="03b79-2872">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2872">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2873">4F</span><span class="sxs-lookup"><span data-stu-id="03b79-2873">4F</span></span>|<span data-ttu-id="03b79-2874">ldind.R8</span><span class="sxs-lookup"><span data-stu-id="03b79-2874">ldind.r8</span></span>|<span data-ttu-id="03b79-2875">Загружает `float64` по адресу `addr` стек как тип `F`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2875">Loads the `float64` value at address `addr` onto the stack as a type `F`.</span></span>|  
  
 <span data-ttu-id="03b79-2876">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2876">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2877">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2877">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2878">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2878">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2879">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2879">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2880">`ldind.r8` Инструкция `float64` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `float64`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2880">The `ldind.r8` instruction indirectly loads a `float64` value from the specified address (of type `native int`, `&`, or \*) onto the stack as a `float64`.</span></span>  
  
 <span data-ttu-id="03b79-2881">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2881">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2882">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2882">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2883">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2883">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2884">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2884">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2885">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2885">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2886">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2886">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2887">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2887">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2888">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2888">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2889"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2889"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2890">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.r8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2890">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2891">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2891">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2892">Выполняет косвенную загрузку в стек вычислений ссылки на объект как <see langword="O" /> (ссылка на объект).</span><span class="sxs-lookup"><span data-stu-id="03b79-2892">Loads an object reference as a type <see langword="O" /> (object reference) onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2893">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2893">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2894">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2894">Format</span></span>|<span data-ttu-id="03b79-2895">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2895">Assembly Format</span></span>|<span data-ttu-id="03b79-2896">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2896">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2897">50</span><span class="sxs-lookup"><span data-stu-id="03b79-2897">50</span></span>|<span data-ttu-id="03b79-2898">ldind.ref</span><span class="sxs-lookup"><span data-stu-id="03b79-2898">ldind.ref</span></span>|<span data-ttu-id="03b79-2899">Загружает ссылку на объект по адресу `addr` стек как тип `O`</span><span class="sxs-lookup"><span data-stu-id="03b79-2899">Loads the object reference at address `addr` onto the stack as a type `O`</span></span>|  
  
 <span data-ttu-id="03b79-2900">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2900">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2901">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2901">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2902">Адрес извлекается из стека; извлекается ссылка на объект, расположенный по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-2902">The address is popped from the stack; the object reference located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2903">Извлеченная ссылка помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2903">The fetched reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2904">`ldind.ref` Инструкция косвенно загружает ссылку на объект по указанному адресу (типа `native int`, `&`, или \*) в стек как тип `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2904">The `ldind.ref` instruction indirectly loads the object reference the specified address (of type `native int`, `&`, or \*) onto the stack as type `O`.</span></span>  
  
 <span data-ttu-id="03b79-2905">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2905">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2906">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2906">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2907">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2907">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2908">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2908">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2909">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2909">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2910">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2910">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2911">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2911">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2912">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2912">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2913"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2913"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2914">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.ref` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2916">Выполняет косвенную загрузку значения с типом <see langword="unsigned int8" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2916">Loads a value of type <see langword="unsigned int8" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2917">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2918">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2918">Format</span></span>|<span data-ttu-id="03b79-2919">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2919">Assembly Format</span></span>|<span data-ttu-id="03b79-2920">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2921">47</span><span class="sxs-lookup"><span data-stu-id="03b79-2921">47</span></span>|<span data-ttu-id="03b79-2922">ldind.U1</span><span class="sxs-lookup"><span data-stu-id="03b79-2922">ldind.u1</span></span>|<span data-ttu-id="03b79-2923">Загружает `unsigned int8` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2923">Loads the `unsigned int8` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2924">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2925">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2925">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2926">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2926">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2927">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2927">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2928">`ldind.u1` Инструкция `unsigned int8` значение из указанного адреса (типа`native int`, `&`, или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2928">The `ldind.u1` instruction indirectly loads an `unsigned int8` value from the specified address (of type`native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2929">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2929">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2930">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2930">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2931">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2931">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2932">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2932">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2933">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2933">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2934">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2934">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2935">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2935">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2936">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2936">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2937"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2937"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2938">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.u1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2938">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2939">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2939">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2940">Выполняет косвенную загрузку значения с типом <see langword="unsigned int16" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2940">Loads a value of type <see langword="unsigned int16" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2941">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2941">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2942">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2942">Format</span></span>|<span data-ttu-id="03b79-2943">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2943">Assembly Format</span></span>|<span data-ttu-id="03b79-2944">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2944">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2945">49</span><span class="sxs-lookup"><span data-stu-id="03b79-2945">49</span></span>|<span data-ttu-id="03b79-2946">ldind.U2</span><span class="sxs-lookup"><span data-stu-id="03b79-2946">ldind.u2</span></span>|<span data-ttu-id="03b79-2947">Загружает `unsigned int16` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2947">Loads the `unsigned int16` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2948">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2948">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2949">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2949">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2950">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2950">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2951">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2951">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2952">`ldind.u2` Инструкция `unsigned int16` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2952">The `ldind.u2` instruction indirectly loads an `unsigned int16` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2953">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2953">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2954">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2954">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2955">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2955">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2956">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2956">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2957">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2957">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2958">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2958">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2959">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2959">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2960">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2960">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2961"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2961"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2962">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.u2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2962">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2963">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2963">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldind_U4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldind_U4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldind_U4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldind_U4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldind_U4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldind_U4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2964">Выполняет косвенную загрузку значения с типом <see langword="unsigned int32" /> в стек вычислений как <see langword="int32" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-2964">Loads a value of type <see langword="unsigned int32" /> as an <see langword="int32" /> onto the evaluation stack indirectly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2965">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2965">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2966">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2966">Format</span></span>|<span data-ttu-id="03b79-2967">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2967">Assembly Format</span></span>|<span data-ttu-id="03b79-2968">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2968">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2969">4B</span><span class="sxs-lookup"><span data-stu-id="03b79-2969">4B</span></span>|<span data-ttu-id="03b79-2970">ldind.U4</span><span class="sxs-lookup"><span data-stu-id="03b79-2970">ldind.u4</span></span>|<span data-ttu-id="03b79-2971">Загружает `unsigned int32` по адресу `addr` в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2971">Loads the `unsigned int32` value at address `addr` onto the stack as an `int32`.</span></span>|  
  
 <span data-ttu-id="03b79-2972">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2972">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2973">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2973">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2974">Адрес извлекается из стека; значение, расположенное по адресу извлечь.</span><span class="sxs-lookup"><span data-stu-id="03b79-2974">The address is popped from the stack; the value located at the address is fetched.</span></span>  
  
3.  <span data-ttu-id="03b79-2975">Извлеченное значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2975">The fetched value is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-2976">`ldind.u4` Инструкция `unsigned int32` значение из указанного адреса (типа `native int`, `&`, или \*) в стек как `int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-2976">The `ldind.u4` instruction indirectly loads an `unsigned int32` value from the specified address (of type `native int`, `&`, or \*) onto the stack as an `int32`.</span></span>  
  
 <span data-ttu-id="03b79-2977">Все `ldind` инструкции являются ярлыками для <xref:System.Reflection.Emit.OpCodes.Ldobj> инструкцию, которая указывает на соответствующий класс встроенных значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-2977">All of the `ldind` instructions are shortcuts for a <xref:System.Reflection.Emit.OpCodes.Ldobj> instruction that specifies the corresponding built-in value class.</span></span>  
  
 <span data-ttu-id="03b79-2978">Обратите внимание, что целочисленные значения меньше 4 байтов расширяются до `int32` (не `native int`) когда они были загружены в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2978">Note that integer values of less than 4 bytes are extended to `int32` (not `native int`) when they are loaded onto the evaluation stack.</span></span> <span data-ttu-id="03b79-2979">Значения с плавающей запятой преобразуются в `F` введите при загрузке в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-2979">Floating-point values are converted to `F` type when loaded onto the evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-2980">Правильно сформированного Microsoft Intermediate Language (MSIL) гарантирует, что `ldind` инструкции используются в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-2980">Correctly-formed Microsoft Intermediate Language (MSIL) ensures that the `ldind` instructions are used in a manner consistent with the type of the pointer.</span></span>  
  
 <span data-ttu-id="03b79-2981">Адрес, первоначально помещается в стек должен быть выровнен по естественному размеру объектов на компьютере или <xref:System.NullReferenceException> может произойти (см. в разделе <xref:System.Reflection.Emit.OpCodes.Unaligned> префикса по).</span><span class="sxs-lookup"><span data-stu-id="03b79-2981">The address initially pushed onto the stack must be aligned to the natural size of objects on the machine or a <xref:System.NullReferenceException> can occur (see the <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction for preventative measures).</span></span> <span data-ttu-id="03b79-2982">Результаты всех инструкций MSIL, которые возвращают адреса (например, <xref:System.Reflection.Emit.OpCodes.Ldloca> и <xref:System.Reflection.Emit.OpCodes.Ldarga>) безопасно выравниваются.</span><span class="sxs-lookup"><span data-stu-id="03b79-2982">The results of all MSIL instructions that return addresses (for example, <xref:System.Reflection.Emit.OpCodes.Ldloca> and <xref:System.Reflection.Emit.OpCodes.Ldarga>) are safely aligned.</span></span> <span data-ttu-id="03b79-2983">Для типов данных, размер которых превышает 1 байт порядок байтов зависит от целевой ЦП.</span><span class="sxs-lookup"><span data-stu-id="03b79-2983">For datatypes larger than 1 byte, the byte ordering is dependent on the target CPU.</span></span> <span data-ttu-id="03b79-2984">Любой код, зависящий от порядка байтов не может работать на всех платформах.</span><span class="sxs-lookup"><span data-stu-id="03b79-2984">Code that depends on byte ordering might not run on all platforms.</span></span>  
  
 <span data-ttu-id="03b79-2985"><xref:System.NullReferenceException> могут создаваться при обнаружении недопустимого адреса.</span><span class="sxs-lookup"><span data-stu-id="03b79-2985"><xref:System.NullReferenceException> can be thrown if an invalid address is detected.</span></span>  
  
 <span data-ttu-id="03b79-2986">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldind.u4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-2986">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldind.u4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-2987">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-2987">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldlen">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldlen" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldlen As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldlen;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldlen : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldlen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-2988">Помещает в стек вычислений сведения о числе элементов одномерного массива с индексацией от нуля.</span><span class="sxs-lookup"><span data-stu-id="03b79-2988">Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-2989">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-2989">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-2990">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-2990">Format</span></span>|<span data-ttu-id="03b79-2991">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-2991">Assembly Format</span></span>|<span data-ttu-id="03b79-2992">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-2992">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-2993">8E</span><span class="sxs-lookup"><span data-stu-id="03b79-2993">8E</span></span>|<span data-ttu-id="03b79-2994">ldlen</span><span class="sxs-lookup"><span data-stu-id="03b79-2994">ldlen</span></span>|<span data-ttu-id="03b79-2995">Помещает длина (типа `natural unsigned int`) массива в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-2995">Pushes the length (of type `natural unsigned int`) of an array on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-2996">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-2996">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-2997">Ссылка на объект в массив помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2997">An object reference to an array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-2998">Ссылка на массив извлекается из стека и длина является вычисляемым.</span><span class="sxs-lookup"><span data-stu-id="03b79-2998">The array reference is popped from the stack and the length is computed.</span></span>  
  
3.  <span data-ttu-id="03b79-2999">Длина помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-2999">The length is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3000">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3000">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3001">Длина возвращается в виде `natural unsigned int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3001">The length is returned as a `natural unsigned int`.</span></span>  
  
 <span data-ttu-id="03b79-3002"><xref:System.NullReferenceException> возникает, если ссылка на массив является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3002"><xref:System.NullReferenceException> is thrown if the array reference is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3003">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldlen` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3003">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldlen` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3004">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3004">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3005">Загружает в стек вычислений локальную переменную с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3005">Loads the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3006">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3006">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3007">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3007">Format</span></span>|<span data-ttu-id="03b79-3008">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3008">Assembly Format</span></span>|<span data-ttu-id="03b79-3009">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3009">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3010">FE 0C < `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3010">FE 0C < `unsigned int16` ></span></span>|<span data-ttu-id="03b79-3011">ldloc `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-3011">ldloc `index`</span></span>|<span data-ttu-id="03b79-3012">Загружает в локальную переменную с индексом `index` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3012">Loads the local variable at index `index` onto stack.</span></span>|  
  
 <span data-ttu-id="03b79-3013">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3013">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3014">Значение локальной переменной по указанному индексу помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3014">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3015">`ldloc` Инструкция помещает содержимое локальной переменной с заданным индексом в стек вычислений, где локальные переменные будут пронумерованы от 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-3015">The `ldloc` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="03b79-3016">Локальные переменные инициализируются 0 перед входом в метод, только в том случае, если флаг инициализации метода имеет значение true.</span><span class="sxs-lookup"><span data-stu-id="03b79-3016">Local variables are initialized to 0 before entering the method only if the initialize flag on the method is true.</span></span> <span data-ttu-id="03b79-3017">Существует 65 535 (2 ^ 16 - 1) возможных локальных переменных (0-65 534).</span><span class="sxs-lookup"><span data-stu-id="03b79-3017">There are 65,535 (2^16-1) local variables possible (0-65,534).</span></span> <span data-ttu-id="03b79-3018">Индекс 65 535 является недопустимым, так как возможны реализации, использующие 2-байтовое целое число для отслеживания и локальный индекс, а также общее число "Локальные" для данного метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3018">Index 65,535 is not valid since likely implementations will use a 2-byte integer to track both a local's index, along with the total number of locals for a given method.</span></span> <span data-ttu-id="03b79-3019">Если индекс 65 535 считался действительным, потребуется расширить целое число для отслеживания числа локальных переменных в этом методе.</span><span class="sxs-lookup"><span data-stu-id="03b79-3019">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="03b79-3020">`ldloc.0`, `ldloc.1`, `ldloc.2`, И `ldloc.3` инструкции обеспечивают эффективную кодировку для доступа к первые четыре локальных переменных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3020">The `ldloc.0`, `ldloc.1`, `ldloc.2`, and `ldloc.3` instructions provide an efficient encoding for accessing the first four local variables.</span></span>  
  
 <span data-ttu-id="03b79-3021">Тип значения — так же, как тип локальной переменной, указанной в заголовке method.</span><span class="sxs-lookup"><span data-stu-id="03b79-3021">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="03b79-3022">См. раздел I. локальных переменных, которые меньше, чем длиной 4 байта, расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3022">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-3023">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3023">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-3024">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `ldloc` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3024">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3025">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="03b79-3025">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="03b79-3026">ILGenerator.Emit (OpCode, короткое)</span><span class="sxs-lookup"><span data-stu-id="03b79-3026">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3027">Загружает в стек вычислений локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-3027">Loads the local variable at index 0 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3028">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3028">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3029">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3029">Format</span></span>|<span data-ttu-id="03b79-3030">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3030">Assembly Format</span></span>|<span data-ttu-id="03b79-3031">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3031">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3032">06</span><span class="sxs-lookup"><span data-stu-id="03b79-3032">06</span></span>|<span data-ttu-id="03b79-3033">ldloc.0</span><span class="sxs-lookup"><span data-stu-id="03b79-3033">ldloc.0</span></span>|<span data-ttu-id="03b79-3034">Загружает в стек вычислений локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-3034">Loads the local variable at index 0 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="03b79-3035">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3035">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3036">Значение локальной переменной с индексом 0 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3036">The local variable value at the index 0 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3037">`ldloc.0` особенно эффективный вариант кодировки <xref:System.Reflection.Emit.OpCodes.Ldloc>, предоставляя доступ к локальной переменной с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-3037">`ldloc.0` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 0.</span></span>  
  
 <span data-ttu-id="03b79-3038">Тип значения — так же, как тип локальной переменной, указанной в заголовке method.</span><span class="sxs-lookup"><span data-stu-id="03b79-3038">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="03b79-3039">Локальные переменные, которые меньше, чем длиной 4 байта, расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3039">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-3040">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3040">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-3041">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldloc.0` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3041">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3042">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3042">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3043">Загружает в стек вычислений локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-3043">Loads the local variable at index 1 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3044">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3044">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3045">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3045">Format</span></span>|<span data-ttu-id="03b79-3046">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3046">Assembly Format</span></span>|<span data-ttu-id="03b79-3047">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3047">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3048">07</span><span class="sxs-lookup"><span data-stu-id="03b79-3048">07</span></span>|<span data-ttu-id="03b79-3049">ldloc.1</span><span class="sxs-lookup"><span data-stu-id="03b79-3049">ldloc.1</span></span>|<span data-ttu-id="03b79-3050">Загружает в стек вычислений локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-3050">Loads the local variable at index 1 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="03b79-3051">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3051">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3052">Значение локальной переменной с индексом 1 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3052">The local variable value at the index 1 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3053">`ldloc.1` особенно эффективный вариант кодировки <xref:System.Reflection.Emit.OpCodes.Ldloc>, предоставляя доступ к локальной переменной с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-3053">`ldloc.1` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 1.</span></span>  
  
 <span data-ttu-id="03b79-3054">Тип значения — так же, как тип локальной переменной, указанной в заголовке method.</span><span class="sxs-lookup"><span data-stu-id="03b79-3054">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="03b79-3055">Локальные переменные, которые меньше, чем длиной 4 байта, расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3055">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-3056">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3056">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-3057">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldloc.1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3057">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3058">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3058">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3059">Загружает в стек вычислений локальную переменную с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-3059">Loads the local variable at index 2 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3060">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3060">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3061">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3061">Format</span></span>|<span data-ttu-id="03b79-3062">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3062">Assembly Format</span></span>|<span data-ttu-id="03b79-3063">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3063">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3064">08</span><span class="sxs-lookup"><span data-stu-id="03b79-3064">08</span></span>|<span data-ttu-id="03b79-3065">ldloc.2</span><span class="sxs-lookup"><span data-stu-id="03b79-3065">ldloc.2</span></span>|<span data-ttu-id="03b79-3066">Загружает в стек вычислений локальную переменную с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-3066">Loads the local variable at index 2 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="03b79-3067">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3067">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3068">Значение локальной переменной с индексом 2 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3068">The local variable value at the index 2 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3069">`ldloc.2` особенно эффективный вариант кодировки <xref:System.Reflection.Emit.OpCodes.Ldloc>, предоставляя доступ к локальной переменной с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-3069">`ldloc.2` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 2.</span></span>  
  
 <span data-ttu-id="03b79-3070">Тип значения — так же, как тип локальной переменной, указанной в заголовке method.</span><span class="sxs-lookup"><span data-stu-id="03b79-3070">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="03b79-3071">Локальные переменные, которые меньше, чем длиной 4 байта, расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3071">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-3072">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3072">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-3073">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldloc.2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3075">Загружает в стек вычислений локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-3075">Loads the local variable at index 3 onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3076">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3077">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3077">Format</span></span>|<span data-ttu-id="03b79-3078">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3078">Assembly Format</span></span>|<span data-ttu-id="03b79-3079">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3080">09</span><span class="sxs-lookup"><span data-stu-id="03b79-3080">09</span></span>|<span data-ttu-id="03b79-3081">ldloc.3</span><span class="sxs-lookup"><span data-stu-id="03b79-3081">ldloc.3</span></span>|<span data-ttu-id="03b79-3082">Загружает в стек вычислений локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-3082">Loads the local variable at index 3 onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="03b79-3083">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3084">Значение локальной переменной с индексом 3 помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3084">The local variable value at the index 3 is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3085">`ldloc.3` особенно эффективный вариант кодировки <xref:System.Reflection.Emit.OpCodes.Ldloc>, предоставляя доступ к локальной переменной с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-3085">`ldloc.3` is an especially efficient encoding for <xref:System.Reflection.Emit.OpCodes.Ldloc>, allowing access to the local variable at index 3.</span></span>  
  
 <span data-ttu-id="03b79-3086">Тип значения — так же, как тип локальной переменной, указанной в заголовке method.</span><span class="sxs-lookup"><span data-stu-id="03b79-3086">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="03b79-3087">Локальные переменные, которые меньше, чем длиной 4 байта, расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3087">Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-3088">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3088">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-3089">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldloc.3` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3089">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3090">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3090">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3091">Загружает в стек вычислений локальную переменную с указанным индексом (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-3091">Loads the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3092">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3092">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3093">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3093">Format</span></span>|<span data-ttu-id="03b79-3094">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3094">Assembly Format</span></span>|<span data-ttu-id="03b79-3095">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3095">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3096">11 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3096">11 < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-3097">ldloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-3097">ldloc.s `index`</span></span>|<span data-ttu-id="03b79-3098">Загружает в локальную переменную с индексом `index` в стек, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-3098">Loads the local variable at index `index` onto stack, short form.</span></span>|  
  
 <span data-ttu-id="03b79-3099">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3099">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3100">Значение локальной переменной по указанному индексу помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3100">The local variable value at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3101">`ldloc.s` Инструкция помещает содержимое локальной переменной с заданным индексом в стек вычислений, где локальные переменные будут пронумерованы от 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-3101">The `ldloc.s` instruction pushes the contents of the local variable number at the passed index onto the evaluation stack, where the local variables are numbered 0 onwards.</span></span> <span data-ttu-id="03b79-3102">Локальные переменные инициализируются 0 перед входом в метод, если флаг инициализации метода имеет значение true.</span><span class="sxs-lookup"><span data-stu-id="03b79-3102">Local variables are initialized to 0 before entering the method if the initialize flag on the method is true.</span></span> <span data-ttu-id="03b79-3103">Составляет 256 (2 ^ 8) возможных локальных переменных (0-255) в краткую форму, который является более эффективную кодировку чем `ldloc`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3103">There are 256 (2^8) local variables possible (0-255) in the short form, which is a more efficient encoding than `ldloc`.</span></span>  
  
 <span data-ttu-id="03b79-3104">Тип значения — так же, как тип локальной переменной, указанной в заголовке method.</span><span class="sxs-lookup"><span data-stu-id="03b79-3104">The type of the value is the same as the type of the local variable, which is specified in the method header.</span></span> <span data-ttu-id="03b79-3105">См. раздел I. локальных переменных, которые меньше, чем длиной 4 байта, расширяются до типа `int32` когда они были загружены в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3105">See Partition I. Local variables that are smaller than 4 bytes long are expanded to type `int32` when they are loaded onto the stack.</span></span> <span data-ttu-id="03b79-3106">Значения с плавающей запятой расширяются до исходного размера (тип `F`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3106">Floating-point values are expanded to their native size (type `F`).</span></span>  
  
 <span data-ttu-id="03b79-3107">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `ldloc.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3107">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3108">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="03b79-3108">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="03b79-3109">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-3109">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3110">Загружает в стек вычислений адрес локальной переменной с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3110">Loads the address of the local variable at a specific index onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3111">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3111">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3112">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3112">Format</span></span>|<span data-ttu-id="03b79-3113">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3113">Assembly Format</span></span>|<span data-ttu-id="03b79-3114">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3114">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3115">FE OD &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3115">FE OD < `unsigned int16` ></span></span>|<span data-ttu-id="03b79-3116">ldloca `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-3116">ldloca `index`</span></span>|<span data-ttu-id="03b79-3117">Загружает адрес локальной переменной в `index` в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3117">Loads the address of the local variable at `index` onto the evaluation stack.</span></span>|  
  
 <span data-ttu-id="03b79-3118">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3118">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3119">Адрес, хранящийся в локальную переменную с указанным индексом помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3119">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3120">`ldloca` Инструкция помещает адрес локальной переменной с заданным индексом в стек, где локальные переменные будут пронумерованы от 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-3120">The `ldloca` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="03b79-3121">Значение в стек, уже выровнено для использования с инструкциями, как <xref:System.Reflection.Emit.OpCodes.Ldind_I> и <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="03b79-3121">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="03b79-3122">Результатом является временный указатель (типа `*`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3122">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="03b79-3123">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldloca` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3123">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3124">ILGenerator.Emit (OpCode, короткое)</span><span class="sxs-lookup"><span data-stu-id="03b79-3124">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldloca_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldloca_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldloca_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldloca_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldloca_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldloca_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3125">Загружает в стек вычислений адрес локальной переменной с указанным индексом (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-3125">Loads the address of the local variable at a specific index onto the evaluation stack, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3126">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3126">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3127">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3127">Format</span></span>|<span data-ttu-id="03b79-3128">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3128">Assembly Format</span></span>|<span data-ttu-id="03b79-3129">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3129">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3130">12 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3130">12 < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-3131">ldloca.s `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-3131">ldloca.s `index`</span></span>|<span data-ttu-id="03b79-3132">Загружает адрес локальной переменной в `index` в стек вычислений, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-3132">Loads the address of the local variable at `index` onto the evaluation stack, short form.</span></span>|  
  
 <span data-ttu-id="03b79-3133">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3133">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3134">Адрес, хранящийся в локальную переменную с указанным индексом помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3134">The address stored in the local variable at the specified index is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3135">`ldloca.s` Инструкция помещает адрес локальной переменной с заданным индексом в стек, где локальные переменные будут пронумерованы от 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-3135">The `ldloca.s` instruction pushes the address of the local variable number at the passed index onto the stack, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="03b79-3136">Значение в стек, уже выровнено для использования с инструкциями, как <xref:System.Reflection.Emit.OpCodes.Ldind_I> и <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span><span class="sxs-lookup"><span data-stu-id="03b79-3136">The value pushed on the stack is already aligned correctly for use with instructions like <xref:System.Reflection.Emit.OpCodes.Ldind_I> and <xref:System.Reflection.Emit.OpCodes.Stind_I>.</span></span> <span data-ttu-id="03b79-3137">Результатом является временный указатель (типа `*`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3137">The result is a transient pointer (type `*`).</span></span>  
  
 <span data-ttu-id="03b79-3138">`ldloca.s` Инструкция обеспечивает эффективную кодировку для использования с локальными переменными от 0 до 255.</span><span class="sxs-lookup"><span data-stu-id="03b79-3138">The `ldloca.s` instruction provides an efficient encoding for use with the local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="03b79-3139">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldloca.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3139">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldloca.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3140">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-3140">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldnull">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldnull" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldnull As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldnull;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldnull : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldnull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3141">Помещает в стек вычислений пустую ссылку (тип <see langword="O" />).</span><span class="sxs-lookup"><span data-stu-id="03b79-3141">Pushes a null reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3142">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3142">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3143">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3143">Format</span></span>|<span data-ttu-id="03b79-3144">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3144">Assembly Format</span></span>|<span data-ttu-id="03b79-3145">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3145">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3146">14</span><span class="sxs-lookup"><span data-stu-id="03b79-3146">14</span></span>|<span data-ttu-id="03b79-3147">ldnull</span><span class="sxs-lookup"><span data-stu-id="03b79-3147">ldnull</span></span>|<span data-ttu-id="03b79-3148">Отправить ссылку на null в стек</span><span class="sxs-lookup"><span data-stu-id="03b79-3148">push a null reference onto the stack</span></span>|  
  
 <span data-ttu-id="03b79-3149">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3149">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3150">Ссылки на пустой объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3150">A null object reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3151">`ldnull` передает пустую ссылку (тип `O`) в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3151">`ldnull` pushes a null reference (type `O`) on the stack.</span></span> <span data-ttu-id="03b79-3152">Это используется для инициализации расположения, прежде чем они заполняются данными, или когда они станут устаревшими.</span><span class="sxs-lookup"><span data-stu-id="03b79-3152">This is used to initialize locations before they are populated with data, or when they become deprecated.</span></span>  
  
 <span data-ttu-id="03b79-3153">`ldnull` предоставляет ссылку на null, не зависит от размера.</span><span class="sxs-lookup"><span data-stu-id="03b79-3153">`ldnull` provides a null reference that is size-independent.</span></span>  
  
 <span data-ttu-id="03b79-3154">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldnull` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3154">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldnull` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3155">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3155">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3156">Копирует объект с типом значения, размещенный по указанному адресу, на вершину стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3156">Copies the value type object pointed to by an address to the top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3157">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3157">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3158">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3158">Format</span></span>|<span data-ttu-id="03b79-3159">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3159">Assembly Format</span></span>|<span data-ttu-id="03b79-3160">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3160">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3161">71 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3161">71 < `T` ></span></span>|<span data-ttu-id="03b79-3162">ldobj `class`</span><span class="sxs-lookup"><span data-stu-id="03b79-3162">ldobj `class`</span></span>|<span data-ttu-id="03b79-3163">Копировать экземпляр типа значения `class` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3163">Copy instance of value type `class` to the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3164">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3164">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3165">Адрес объекта типа значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3165">The address of a value type object is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3166">Адрес извлекается из стека и выполняется поиск экземпляра по этому адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3166">The address is popped from the stack and the instance at that particular address is looked up.</span></span>  
  
3.  <span data-ttu-id="03b79-3167">Значение объекта, который хранится по этому адресу помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3167">The value of the object stored at that address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3168">`ldobj` Инструкция используется для передачи типа значения в качестве параметра.</span><span class="sxs-lookup"><span data-stu-id="03b79-3168">The `ldobj` instruction is used to pass a value type as a parameter.</span></span>  
  
 <span data-ttu-id="03b79-3169">`ldobj` Инструкции копирует значение, на которые указывают `addrOfValObj` (типа `&`, `*`, или `native int`) в верхней части стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-3169">The `ldobj` instruction copies the value pointed to by `addrOfValObj` (of type `&`, `*`, or `native int`) to the top of the stack.</span></span> <span data-ttu-id="03b79-3170">Число копируемых байтов зависит от размера класса (как указано `class` параметр).</span><span class="sxs-lookup"><span data-stu-id="03b79-3170">The number of bytes copied depends on the size of the class (as specified by the `class` parameter).</span></span> <span data-ttu-id="03b79-3171">`class` Параметр является маркер метаданных, представляющий тип значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3171">The `class` parameter is a metadata token representing the value type.</span></span>  
  
 <span data-ttu-id="03b79-3172">Операция `ldobj` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-3172">The operation of the `ldobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-3173"><xref:System.TypeLoadException> возникает, если не удается найти класс.</span><span class="sxs-lookup"><span data-stu-id="03b79-3173"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="03b79-3174">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуется в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3174">This is typically detected when the Microsoft Intermediate Language (MSIL) instruction is converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-3175">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldobj` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3175">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldobj` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3176">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3176">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3177">Помещает в стек вычислений значение статического поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-3177">Pushes the value of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3178">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3178">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3179">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3179">Format</span></span>|<span data-ttu-id="03b79-3180">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3180">Assembly Format</span></span>|<span data-ttu-id="03b79-3181">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3181">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3182">7E < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3182">7E < `T` ></span></span>|<span data-ttu-id="03b79-3183">ldsfld `field`</span><span class="sxs-lookup"><span data-stu-id="03b79-3183">ldsfld `field`</span></span>|<span data-ttu-id="03b79-3184">Отправить значение `field` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3184">Push the value of `field` on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3185">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3185">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3186">Значение поля помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3186">The value of the specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3187">`ldsfld` Инструкция помещает значение статического (общим для всех экземпляров класса) в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3187">The `ldsfld` instruction pushes the value of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="03b79-3188">Возвращаемый тип —, связанный с маркером метаданных `field`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3188">The return type is that associated with the passed metadata token `field`.</span></span>  
  
 <span data-ttu-id="03b79-3189">`ldsfld` Инструкции может иметь <xref:System.Reflection.Emit.OpCodes.Volatile> префикс.</span><span class="sxs-lookup"><span data-stu-id="03b79-3189">The `ldsfld` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="03b79-3190">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldsfld` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3190">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsfld` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3191">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-3191">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldsflda">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldsflda" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldsflda As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldsflda;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldsflda : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldsflda" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3192">Помещает в стек вычислений адрес статического поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-3192">Pushes the address of a static field onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3193">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3193">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3194">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3194">Format</span></span>|<span data-ttu-id="03b79-3195">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3195">Assembly Format</span></span>|<span data-ttu-id="03b79-3196">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3196">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3197">7F < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3197">7F < `T` ></span></span>|<span data-ttu-id="03b79-3198">ldsflda `field`</span><span class="sxs-lookup"><span data-stu-id="03b79-3198">ldsflda `field`</span></span>|<span data-ttu-id="03b79-3199">Push-уведомлений в адрес `field` в стеке</span><span class="sxs-lookup"><span data-stu-id="03b79-3199">Push the address of `field` on the stack</span></span>|  
  
 <span data-ttu-id="03b79-3200">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3200">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3201">Адрес указанного поля помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3201">The address of a specific field is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3202">`ldsflda` Инструкция помещает адрес статического (общим для всех экземпляров класса) в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3202">The `ldsflda` instruction pushes the address of a static (shared among all instances of a class) field on the stack.</span></span> <span data-ttu-id="03b79-3203">Адрес может быть представлен как временный указатель (типа `*`) Если маркер метаданных `field` относится к типу, управляемой памятью.</span><span class="sxs-lookup"><span data-stu-id="03b79-3203">The address may be represented as a transient pointer (type `*`) if the metadata token `field` refers to a type whose memory is managed.</span></span> <span data-ttu-id="03b79-3204">В противном случае он соответствует неуправляемый указатель (типа `native int`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3204">Otherwise, it corresponds to an unmanaged pointer (type `native int`).</span></span> <span data-ttu-id="03b79-3205">Обратите внимание, что `field` может быть статический глобальной с присвоен относительный виртуальный адрес (смещение поля из базового адреса, по которому его содержащего PE-файл загружается в память) где память является неуправляемым.</span><span class="sxs-lookup"><span data-stu-id="03b79-3205">Note that `field` may be a static global with an assigned relative virtual address (the offset of the field from the base address at which its containing PE file is loaded into memory) where the memory is unmanaged.</span></span>  
  
 <span data-ttu-id="03b79-3206">`ldsflda` Инструкции может иметь <xref:System.Reflection.Emit.OpCodes.Volatile> префикс.</span><span class="sxs-lookup"><span data-stu-id="03b79-3206">The `ldsflda` instruction can have a <xref:System.Reflection.Emit.OpCodes.Volatile> prefix.</span></span>  
  
 <span data-ttu-id="03b79-3207"><xref:System.MissingFieldException> возникает, если поле не найдено в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3207"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="03b79-3208">Обычно это проверяется при преобразовании в машинный код, не во время выполнения инструкции промежуточного языка MSIL (Microsoft).</span><span class="sxs-lookup"><span data-stu-id="03b79-3208">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="03b79-3209">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldsflda` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3209">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldsflda` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3210">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-3210">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldstr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldstr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldstr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldstr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldstr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldstr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3211">Помещает в стек ссылку на новый объект, представляющий строковой литерал, хранящийся в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3211">Pushes a new object reference to a string literal stored in the metadata.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3212">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3212">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3213">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3213">Format</span></span>|<span data-ttu-id="03b79-3214">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3214">Assembly Format</span></span>|<span data-ttu-id="03b79-3215">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3215">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3216">72 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3216">72 < `T` ></span></span>|<span data-ttu-id="03b79-3217">ldstr `mdToken`</span><span class="sxs-lookup"><span data-stu-id="03b79-3217">ldstr `mdToken`</span></span>|<span data-ttu-id="03b79-3218">Помещает объект строк для маркером строки метаданных `mdToken`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3218">Pushes a string object for the metadata string token `mdToken`.</span></span>|  
  
 <span data-ttu-id="03b79-3219">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3219">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3220">Ссылка на объект в строку помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3220">An object reference to a string is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3221">`ldstr` Инструкция помещает ссылку на объект (тип `O`) в новый строковый объект, представляющий определенные строковой литерал, хранящийся в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3221">The `ldstr` instruction pushes an object reference (type `O`) to a new string object representing the specific string literal stored in the metadata.</span></span> <span data-ttu-id="03b79-3222">`ldstr` Инструкция выделяет нужное количество памяти и выполняет преобразование строкового литерала из формата, используемого в файле, чтобы формат строки, необходимые во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3222">The `ldstr` instruction allocates the requisite amount of memory and performs any format conversion required to convert the string literal from the form used in the file to the string format required at runtime.</span></span>  
  
 <span data-ttu-id="03b79-3223">Common Language Infrastructure (CLI) гарантирует, что результат двух `ldstr` инструкций, ссылающихся на две лексемы метаданных, которые имеют разную последовательность символов возврата же строковый объект (этот процесс называется «изоляцией строк»).</span><span class="sxs-lookup"><span data-stu-id="03b79-3223">The Common Language Infrastructure (CLI) guarantees that the result of two `ldstr` instructions referring to two metadata tokens that have the same sequence of characters return precisely the same string object (a process known as "string interning").</span></span>  
  
 <span data-ttu-id="03b79-3224">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldstr` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3224">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldstr` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3225">ILGenerator.Emit (OpCode, строка)</span><span class="sxs-lookup"><span data-stu-id="03b79-3225">ILGenerator.Emit(OpCode, string)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldtoken">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldtoken" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldtoken As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldtoken;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldtoken : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldtoken" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3226">Преобразует лексему метаданных в его представление времени выполнения, а затем помещает в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3226">Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3227">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3227">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3228">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3228">Format</span></span>|<span data-ttu-id="03b79-3229">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3229">Assembly Format</span></span>|<span data-ttu-id="03b79-3230">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3230">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3231">D0 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3231">D0 < `T` ></span></span>|<span data-ttu-id="03b79-3232">ldtoken `token`</span><span class="sxs-lookup"><span data-stu-id="03b79-3232">ldtoken `token`</span></span>|<span data-ttu-id="03b79-3233">Преобразует токен метаданных в его представление времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3233">Converts a metadata token to its runtime representation.</span></span>|  
  
 <span data-ttu-id="03b79-3234">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3234">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3235">Переданная лексема преобразуется в `RuntimeHandle` и помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3235">The passed token is converted to a `RuntimeHandle` and pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3236">`ldtoken` Push-уведомлений инструкции `RuntimeHandle` для заданным токеном метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3236">The `ldtoken` instruction pushes a `RuntimeHandle` for the specified metadata token.</span></span> <span data-ttu-id="03b79-3237">Объект `RuntimeHandle` может быть `fieldref/fielddef`, `methodref/methoddef`, или `typeref/typedef`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3237">A `RuntimeHandle` can be a `fieldref/fielddef`, a `methodref/methoddef`, or a `typeref/typedef`.</span></span>  
  
 <span data-ttu-id="03b79-3238">Значение, помещаемое в стеке может использоваться в вызовах `Reflection` методы в библиотеке классов системы.</span><span class="sxs-lookup"><span data-stu-id="03b79-3238">The value pushed on the stack can be used in calls to `Reflection` methods in the system class library.</span></span>  
  
 <span data-ttu-id="03b79-3239">Сведения о дескрипторах времени выполнения см. следующие классы: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, и <xref:System.RuntimeMethodHandle>.</span><span class="sxs-lookup"><span data-stu-id="03b79-3239">For information on runtime handles, see the following classes: <xref:System.RuntimeFieldHandle>, <xref:System.RuntimeTypeHandle>, and <xref:System.RuntimeMethodHandle>.</span></span>  
  
 <span data-ttu-id="03b79-3240">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `ldtoken` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3240">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `ldtoken` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3241">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-3241">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
-   <span data-ttu-id="03b79-3242">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-3242">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
-   <span data-ttu-id="03b79-3243">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3243">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ldvirtftn">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ldvirtftn" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ldvirtftn As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ldvirtftn;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ldvirtftn : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ldvirtftn" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3244">Помещает в стек вычислений неуправляемый указатель (с типом <see langword="native int" />) на машинный код, реализующий виртуальный метод, связанный с заданным объектом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3244">Pushes an unmanaged pointer (type <see langword="native int" />) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3245">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3245">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3246">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3246">Format</span></span>|<span data-ttu-id="03b79-3247">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3247">Assembly Format</span></span>|<span data-ttu-id="03b79-3248">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3248">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3249">FE 07 &LT; `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3249">FE 07 < `T` ></span></span>|<span data-ttu-id="03b79-3250">ldvirtftn `method`</span><span class="sxs-lookup"><span data-stu-id="03b79-3250">ldvirtftn `method`</span></span>|<span data-ttu-id="03b79-3251">Помещает указатель объекта виртуальный метод `method` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3251">Pushes the pointer to an object's virtual method `method` on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3252">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3252">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3253">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3253">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3254">Ссылка на объект извлекается из стека и адрес точки входа метода (как указано токеном метаданных `method`) выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="03b79-3254">The object reference is popped from the stack and the address of the entry point to the method (as specified by the metadata token `method`) is looked up.</span></span>  
  
3.  <span data-ttu-id="03b79-3255">Указатель на `method` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3255">The pointer to `method` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3256">Неуправляемый указатель помещается в стек по `ldvirtftn` инструкции можно вызвать с помощью <xref:System.Reflection.Emit.OpCodes.Calli> инструкции, если он ссылается на управляемый метод (или заглушка, которая переходит из управляемого в неуправляемый код).</span><span class="sxs-lookup"><span data-stu-id="03b79-3256">The resulting unmanaged pointer pushed onto the stack by the `ldvirtftn` instruction can be called using the <xref:System.Reflection.Emit.OpCodes.Calli> instruction if it references a managed method (or a stub that transitions from managed to unmanaged code).</span></span>  
  
 <span data-ttu-id="03b79-3257">Неуправляемый указатель указывает на машинном коде с помощью среды CLR, соглашение о вызовах.</span><span class="sxs-lookup"><span data-stu-id="03b79-3257">The unmanaged pointer points to native code using the CLR calling convention.</span></span> <span data-ttu-id="03b79-3258">Указатель this метод не должен быть передан в неуправляемый машинный код как процедура обратного вызова.</span><span class="sxs-lookup"><span data-stu-id="03b79-3258">This method pointer should not be passed to unmanaged native code as a callback routine.</span></span>  
  
 <span data-ttu-id="03b79-3259">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ldvirtftn` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3259">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ldvirtftn` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3260">ILGenerator.Emit (OpCode, MethodInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-3260">ILGenerator.Emit(OpCode, MethodInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3261">Выполняет выход из защищенной области кода с безусловной передачей управления указанной конечной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3261">Exits a protected region of code, unconditionally transferring control to a specific target instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3262">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3262">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3263">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3263">Format</span></span>|<span data-ttu-id="03b79-3264">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3264">Assembly Format</span></span>|<span data-ttu-id="03b79-3265">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3265">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3266">ДД &LT; `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3266">DD < `int32` ></span></span>|<span data-ttu-id="03b79-3267">Оставьте `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-3267">leave `target`</span></span>|<span data-ttu-id="03b79-3268">Выполняет выход из защищенной области кода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3268">Exits a protected region of code.</span></span>|  
  
 <span data-ttu-id="03b79-3269">Нет Переходные состояния стека для данной инструкции не.</span><span class="sxs-lookup"><span data-stu-id="03b79-3269">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-3270">`leave` Инструкция обеспечивает безусловную передачу управления конечной инструкции, представленное в виде 4-со знаком смещение в байтах от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-3270">The `leave` instruction unconditionally transfers control to the specific target instruction, represented as a 4-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-3271">`leave` Аналогичен инструкции `br` инструкции, но его можно использовать для выхода из `try`, `filter`, или `catch` block, тогда как обычные инструкции перехода может использоваться только в этот блок для передачи управления в его.</span><span class="sxs-lookup"><span data-stu-id="03b79-3271">The `leave` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="03b79-3272">`leave` Инструкция очищает стек вычислений и гарантирует, что соответствующие вокруг `finally` блоки выполняются.</span><span class="sxs-lookup"><span data-stu-id="03b79-3272">The `leave` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="03b79-3273">Нельзя использовать `leave` инструкции, чтобы выйти из `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-3273">You cannot use a `leave` instruction to exit a `finally` block.</span></span> <span data-ttu-id="03b79-3274">Чтобы упростить создание кода для обработчиков исключений, допускается в пределах блока catch для использования `leave` инструкции для передачи управления любой инструкции в пределах связанного `try` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-3274">To ease code generation for exception handlers it is valid from within a catch block to use a `leave` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="03b79-3275">Если инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3275">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="03b79-3276">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `leave` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3276">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `leave` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3277">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-3277">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Leave_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Leave_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Leave_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Leave_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Leave_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3278">Выполняет выход из защищенной области кода с безусловной передачей управления указанной конечной инструкции (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-3278">Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3279">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3279">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3280">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3280">Format</span></span>|<span data-ttu-id="03b79-3281">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3281">Assembly Format</span></span>|<span data-ttu-id="03b79-3282">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3282">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3283">DE &LT; `int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3283">DE < `int8` ></span></span>|<span data-ttu-id="03b79-3284">leave.s `target`</span><span class="sxs-lookup"><span data-stu-id="03b79-3284">leave.s `target`</span></span>|<span data-ttu-id="03b79-3285">Выйдите из защищенной области кода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3285">Exit a protected region of code, short form.</span></span>|  
  
 <span data-ttu-id="03b79-3286">Нет Переходные состояния стека для данной инструкции не.</span><span class="sxs-lookup"><span data-stu-id="03b79-3286">There is no stack transition behavior specified for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-3287">`leave.s` Инструкция обеспечивает безусловную передачу управления конечной инструкции, представленной как 1 байт со знаком смещение от начала инструкции, которая следует за текущей инструкцией.</span><span class="sxs-lookup"><span data-stu-id="03b79-3287">The `leave.s` instruction unconditionally transfers control to the passed target instruction, represented as a 1-byte signed offset from the beginning of the instruction following the current instruction.</span></span>  
  
 <span data-ttu-id="03b79-3288">`leave.s` Аналогичен инструкции `br` инструкции, но его можно использовать для выхода из `try`, `filter`, или `catch` block, тогда как обычные инструкции перехода может использоваться только в этот блок для передачи управления в его.</span><span class="sxs-lookup"><span data-stu-id="03b79-3288">The `leave.s` instruction is similar to the `br` instruction, but it can be used to exit a `try`, `filter`, or `catch` block whereas the ordinary branch instructions can only be used in such a block to transfer control within it.</span></span> <span data-ttu-id="03b79-3289">`leave.s` Инструкция очищает стек вычислений и гарантирует, что соответствующие вокруг `finally` блоки выполняются.</span><span class="sxs-lookup"><span data-stu-id="03b79-3289">The `leave.s` instruction empties the evaluation stack and ensures that the appropriate surrounding `finally` blocks are executed.</span></span>  
  
 <span data-ttu-id="03b79-3290">Нельзя использовать `leave.s` инструкции, чтобы выйти из `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-3290">You cannot use a `leave.s` instruction to exit a `finally` block.</span></span> <span data-ttu-id="03b79-3291">Чтобы упростить создание кода для обработчиков исключений, допускается в пределах блока catch для использования `leave.s` инструкции для передачи управления любой инструкции в пределах связанного `try` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-3291">To ease code generation for exception handlers it is valid from within a catch block to use a `leave.s` instruction to transfer control to any instruction within the associated `try` block.</span></span>  
  
 <span data-ttu-id="03b79-3292">Если инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3292">If an instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="03b79-3293">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `leave.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3293">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `leave.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3294">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-3294">ILGenerator.Emit(OpCode, Label)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Localloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Localloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Localloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Localloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Localloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Localloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Localloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Localloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3295">Выделяет определенное количество байтов из пула локальной динамической памяти и помещает в стек вычислений адрес (временный указатель с типом <see langword="*" />) первого выделенного байта.</span><span class="sxs-lookup"><span data-stu-id="03b79-3295">Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <see langword="*" />) of the first allocated byte onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3296">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3296">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3297">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3297">Format</span></span>|<span data-ttu-id="03b79-3298">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3298">Assembly Format</span></span>|<span data-ttu-id="03b79-3299">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3299">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3300">FE 0F</span><span class="sxs-lookup"><span data-stu-id="03b79-3300">FE 0F</span></span>|<span data-ttu-id="03b79-3301">localloc</span><span class="sxs-lookup"><span data-stu-id="03b79-3301">localloc</span></span>|<span data-ttu-id="03b79-3302">Выделите место в локальной куче.</span><span class="sxs-lookup"><span data-stu-id="03b79-3302">Allocate space from the local heap.</span></span>|  
  
 <span data-ttu-id="03b79-3303">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3303">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3304">Число байтов для распределения помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3304">The number of bytes to be allocated is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3305">Число байтов, которое извлекается из стека; объем памяти, в зависимости от размера выделяется в локальной куче.</span><span class="sxs-lookup"><span data-stu-id="03b79-3305">The number of bytes is popped from the stack; an amount of memory corresponding to the size is allocated from the local heap.</span></span>  
  
3.  <span data-ttu-id="03b79-3306">Указатель на первый байт выделенной памяти помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3306">A pointer to the first byte of the allocated memory is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3307">`localloc` Выделяет инструкции `size` (тип `natural unsigned int`) байт из локальной динамической памяти пула и возвращает адрес (временный указатель, тип `*`) первого выделенного байта.</span><span class="sxs-lookup"><span data-stu-id="03b79-3307">The `localloc` instruction allocates `size` (type `natural unsigned int`) bytes from the local dynamic memory pool and returns the address (a transient pointer, type `*`) of the first allocated byte.</span></span> <span data-ttu-id="03b79-3308">Возвращаемый блок памяти, присваивается значение 0 только в том случае, если флаг инициализации метода является `true`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3308">The block of memory returned is initialized to 0 only if the initialize flag on the method is `true`.</span></span> <span data-ttu-id="03b79-3309">Время выполнения текущего метода <xref:System.Reflection.Emit.OpCodes.Ret>, становится доступным для повторного использования пула локальной памяти.</span><span class="sxs-lookup"><span data-stu-id="03b79-3309">When the current method executes a <xref:System.Reflection.Emit.OpCodes.Ret>, the local memory pool is made available for reuse.</span></span>  
  
 <span data-ttu-id="03b79-3310">Итоговый адрес выровнен таким образом, любой тип-примитив возможность сохранения с помощью `stind` инструкции (такие как <xref:System.Reflection.Emit.OpCodes.Stind_I4>) и загрузить с помощью `ldind` инструкции (такие как <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span><span class="sxs-lookup"><span data-stu-id="03b79-3310">The resulting address is aligned so that any primitive data type can be stored there using the `stind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Stind_I4>) and loaded using the `ldind` instructions (such as <xref:System.Reflection.Emit.OpCodes.Ldind_I4>).</span></span>  
  
 <span data-ttu-id="03b79-3311">`localloc` Инструкция не может быть внутри `filter`, `catch`, `finally`, или `fault` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-3311">The `localloc` instruction cannot occur within a `filter`, `catch`, `finally`, or `fault` block.</span></span>  
  
 <span data-ttu-id="03b79-3312"><xref:System.StackOverflowException> возникает, если недостаточно памяти для обслуживания запроса.</span><span class="sxs-lookup"><span data-stu-id="03b79-3312"><xref:System.StackOverflowException> is thrown if there is insufficient memory to service the request.</span></span>  
  
 <span data-ttu-id="03b79-3313">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `localloc` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3313">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `localloc` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3314">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3314">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mkrefany">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mkrefany" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mkrefany As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mkrefany;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mkrefany : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mkrefany" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3315">Помещает в стек вычислений ссылку на экземпляр определенного типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3315">Pushes a typed reference to an instance of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3316">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3316">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3317">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3317">Format</span></span>|<span data-ttu-id="03b79-3318">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3318">Assembly Format</span></span>|<span data-ttu-id="03b79-3319">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3319">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3320">C6 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3320">C6 < `T` ></span></span>|<span data-ttu-id="03b79-3321">Mkrefany `class`</span><span class="sxs-lookup"><span data-stu-id="03b79-3321">mkrefany `class`</span></span>|<span data-ttu-id="03b79-3322">Помещает ссылку типа `class` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3322">Pushes a typed reference of type `class` onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3323">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3323">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3324">Указатель на элемент данных помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3324">A pointer to piece of data is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3325">Указатель извлекается и преобразовать в ссылку с определенным типом типа `class`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3325">The pointer is popped and converted to a typed reference of type `class`.</span></span>  
  
3.  <span data-ttu-id="03b79-3326">Ссылка на типизированный помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3326">The typed reference is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3327">`mkrefany` Инструкция поддерживает передачу ссылок с динамической типизацией.</span><span class="sxs-lookup"><span data-stu-id="03b79-3327">The `mkrefany` instruction supports the passing of dynamically typed references.</span></span> <span data-ttu-id="03b79-3328">Указатель должен иметь тип `&`, `*`, или `native int`и содержать действительный адрес фрагмента данных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3328">The pointer must be of type `&`, `*`, or `native int`, and hold the valid address of a piece of data.</span></span> <span data-ttu-id="03b79-3329">`Class` токен класс описывает тип данных, который ссылается указатель.</span><span class="sxs-lookup"><span data-stu-id="03b79-3329">`Class` is the class token describing the type of the data referenced by the pointer.</span></span> <span data-ttu-id="03b79-3330">`Mkrefany` Помещает в стек, предоставляя непрозрачный дескриптор указателя и тип ссылку с определенным типом `class`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3330">`Mkrefany` pushes a typed reference on the stack, providing an opaque descriptor of the pointer and the type `class`.</span></span>  
  
 <span data-ttu-id="03b79-3331">Для передачи в метод, который требует ссылку с определенным типом параметра является только допустимой операцией ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3331">The only valid operation permitted upon a typed reference is to pass it to a method that requires a typed reference as a parameter.</span></span> <span data-ttu-id="03b79-3332">Вызываемый объект, который затем можно использовать <xref:System.Reflection.Emit.OpCodes.Refanytype> и <xref:System.Reflection.Emit.OpCodes.Refanyval> инструкциям, чтобы получить тип (класс) и адрес соответственно.</span><span class="sxs-lookup"><span data-stu-id="03b79-3332">The callee can then use the <xref:System.Reflection.Emit.OpCodes.Refanytype> and <xref:System.Reflection.Emit.OpCodes.Refanyval> instructions to retrieve the type (class) and the address respectively.</span></span>  
  
 <span data-ttu-id="03b79-3333"><xref:System.TypeLoadException> возникает, если `class` не удается найти.</span><span class="sxs-lookup"><span data-stu-id="03b79-3333"><xref:System.TypeLoadException> is thrown if `class` cannot be found.</span></span> <span data-ttu-id="03b79-3334">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3334">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-3335">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `mkrefany` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3335">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mkrefany` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3336">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3336">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3337">Умножает два значения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3337">Multiplies two values and pushes the result on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3338">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3338">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3339">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3339">Format</span></span>|<span data-ttu-id="03b79-3340">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3340">Assembly Format</span></span>|<span data-ttu-id="03b79-3341">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3341">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3342">5A</span><span class="sxs-lookup"><span data-stu-id="03b79-3342">5A</span></span>|<span data-ttu-id="03b79-3343">mul</span><span class="sxs-lookup"><span data-stu-id="03b79-3343">mul</span></span>|<span data-ttu-id="03b79-3344">Умножает два значения в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3344">Multiplies two values on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3345">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3345">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3346">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3346">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3347">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3347">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3348">`value2` и `value1` извлекаются из стека; `value1` умножается на `value2`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3348">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`.</span></span>  
  
4.  <span data-ttu-id="03b79-3349">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3349">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3350">`mul` Умножает инструкции `value1` по `value2` и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3350">The `mul` instruction multiplies `value1` by `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="03b79-3351">Операций с целыми числами отбрасываются старшие разрядов в случае переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3351">Integer operations silently truncate the upper bits on overflow.</span></span>  
  
 <span data-ttu-id="03b79-3352">См. в разделе <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> для целыми числами умножение операции с обработкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3352">See <xref:System.Reflection.Emit.OpCodes.Mul_Ovf> for an integer-specific multiply operation with overflow handling.</span></span>  
  
 <span data-ttu-id="03b79-3353">Для типов с плавающей запятой, 0 \* бесконечность = NaN.</span><span class="sxs-lookup"><span data-stu-id="03b79-3353">For floating-point types, 0 \* infinity = NaN.</span></span>  
  
 <span data-ttu-id="03b79-3354">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `mul` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3354">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3355">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3355">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3356">Умножает два целочисленных значения, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3356">Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3357">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3357">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3358">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3358">Format</span></span>|<span data-ttu-id="03b79-3359">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3359">Assembly Format</span></span>|<span data-ttu-id="03b79-3360">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3360">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3361">D8</span><span class="sxs-lookup"><span data-stu-id="03b79-3361">D8</span></span>|<span data-ttu-id="03b79-3362">mul.ovf</span><span class="sxs-lookup"><span data-stu-id="03b79-3362">mul.ovf</span></span>|<span data-ttu-id="03b79-3363">Умножает два целочисленных значения в стеке с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3363">Multiplies two integer values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="03b79-3364">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3364">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3365">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3365">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3366">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3366">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3367">`value2` и `value1` извлекаются из стека; `value1` умножается на `value2`, с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3367">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="03b79-3368">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3368">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3369">`mul.ovf` Инструкции умножает целое число `value1` по целому `value2` и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3369">The `mul.ovf` instruction multiplies integer `value1` by integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="03b79-3370">Исключение возникает в том случае, если результат не умещается в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-3370">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="03b79-3371"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-3371"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-3372">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `mul.ovf` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3372">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3373">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3373">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mul_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Mul_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Mul_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Mul_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Mul_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Mul_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3374">Умножает два целочисленных значения без знака, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3374">Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3375">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3375">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3376">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3376">Format</span></span>|<span data-ttu-id="03b79-3377">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3377">Assembly Format</span></span>|<span data-ttu-id="03b79-3378">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3378">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3379">D9</span><span class="sxs-lookup"><span data-stu-id="03b79-3379">D9</span></span>|<span data-ttu-id="03b79-3380">mul.ovf.un</span><span class="sxs-lookup"><span data-stu-id="03b79-3380">mul.ovf.un</span></span>|<span data-ttu-id="03b79-3381">Умножает два значения без знака в стеке и выполняет проверку переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3381">Multiplies two unsigned values on the stack with an overflow check.</span></span>|  
  
 <span data-ttu-id="03b79-3382">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3382">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3383">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3383">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3384">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3384">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3385">`value2` и `value1` извлекаются из стека; `value1` умножается на `value2`, с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3385">`value2` and `value1` are popped from the stack; `value1` is multiplied by `value2`, with an overflow check.</span></span>  
  
4.  <span data-ttu-id="03b79-3386">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3386">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3387">`mul.ovf.un` Инструкции умножает целое число без знака `value1` , целое число без знака `value2` и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3387">The `mul.ovf.un` instruction multiplies unsigned integer `value1` by unsigned integer `value2` and pushes the result on the stack.</span></span> <span data-ttu-id="03b79-3388">Исключение возникает в том случае, если результат не умещается в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-3388">An exception is thrown if the result will not fit in the result type.</span></span>  
  
 <span data-ttu-id="03b79-3389"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-3389"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-3390">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `mul.ovf.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3390">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `mul.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3391">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3391">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Neg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Neg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Neg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Neg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Neg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Neg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Neg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3392">Отвергает значение и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3392">Negates a value and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3393">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3393">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3394">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3394">Format</span></span>|<span data-ttu-id="03b79-3395">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3395">Assembly Format</span></span>|<span data-ttu-id="03b79-3396">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3396">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3397">65</span><span class="sxs-lookup"><span data-stu-id="03b79-3397">65</span></span>|<span data-ttu-id="03b79-3398">Neg</span><span class="sxs-lookup"><span data-stu-id="03b79-3398">neg</span></span>|<span data-ttu-id="03b79-3399">Инвертирует значение, находящееся на вершине стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-3399">Negates the value currently on top of the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3400">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3400">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3401">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3401">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3402">Значение извлекается из стека и отрицательное.</span><span class="sxs-lookup"><span data-stu-id="03b79-3402">A value is popped from the stack and negated.</span></span>  
  
3.  <span data-ttu-id="03b79-3403">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3403">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3404">`neg` Инструкция меняет значения и помещает результат в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3404">The `neg` instruction negates value and pushes the result on top of the stack.</span></span> <span data-ttu-id="03b79-3405">Тип возвращаемого значения совпадает с типом операнда.</span><span class="sxs-lookup"><span data-stu-id="03b79-3405">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="03b79-3406">Является стандартной отрицания целочисленных значений дополнение до двух отрицания.</span><span class="sxs-lookup"><span data-stu-id="03b79-3406">Negation of integral values is standard two's complement negation.</span></span> <span data-ttu-id="03b79-3407">В частности Инверсия наибольшее отрицательное число (которая не поддерживает положительного эквивалента) возвращает наибольшее отрицательное число.</span><span class="sxs-lookup"><span data-stu-id="03b79-3407">In particular, negating the most negative number (which does not have a positive counterpart) yields the most negative number.</span></span> <span data-ttu-id="03b79-3408">Для обнаружения такое использование переполнения <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> инструкции вместо (то есть вычитание из 0).</span><span class="sxs-lookup"><span data-stu-id="03b79-3408">To detect this overflow use the <xref:System.Reflection.Emit.OpCodes.Sub_Ovf> instruction instead (that is, subtract from 0).</span></span>  
  
 <span data-ttu-id="03b79-3409">Инверсия число с плавающей запятой не может вызвать переполнения, и операция над значением NaN возвращает значение NaN.</span><span class="sxs-lookup"><span data-stu-id="03b79-3409">Negating a floating-point number cannot overflow, and negating NaN returns NaN.</span></span>  
  
 <span data-ttu-id="03b79-3410">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `neg` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3410">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `neg` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3411">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3411">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newarr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newarr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newarr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newarr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newarr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newarr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newarr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newarr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3412">Помещает в стек вычислений ссылку на объект — новый одномерный массив с индексацией от нуля, состоящий из элементов заданного типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3412">Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3413">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3413">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3414">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3414">Format</span></span>|<span data-ttu-id="03b79-3415">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3415">Assembly Format</span></span>|<span data-ttu-id="03b79-3416">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3416">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3417">8D < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3417">8D < `T` ></span></span>|<span data-ttu-id="03b79-3418">newarr `etype`</span><span class="sxs-lookup"><span data-stu-id="03b79-3418">newarr `etype`</span></span>|<span data-ttu-id="03b79-3419">Создает новый массив с элементами типа `etype`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3419">Creates a new array with elements of type `etype`.</span></span>|  
  
 <span data-ttu-id="03b79-3420">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3420">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3421">Число элементов в массиве помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3421">The number of elements in the array is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3422">Число элементов, извлекается из стека и создается массив.</span><span class="sxs-lookup"><span data-stu-id="03b79-3422">The number of elements is popped from the stack and the array is created.</span></span>  
  
3.  <span data-ttu-id="03b79-3423">Ссылка на объект в новый массив помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3423">An object reference to the new array is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3424">`newarr` Инструкция помещает ссылку на объект (тип `O`) в новый одномерный массив (с нуля), элементы которого имеют тип `etype` (лексема метаданных, описывающая тип).</span><span class="sxs-lookup"><span data-stu-id="03b79-3424">The `newarr` instruction pushes an object reference (type `O`) to a new zero-based, one-dimensional array whose elements are of type `etype` (a metadata token describing the type).</span></span> <span data-ttu-id="03b79-3425">Число элементов в новом массиве должны быть указаны в виде `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3425">The number of elements in the new array should be specified as a `native int`.</span></span> <span data-ttu-id="03b79-3426">Допустимый массив индексов диапазона от 0 до максимального количества элементов минус 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-3426">Valid array indexes range from zero to the maximum number of elements minus one.</span></span>  
  
 <span data-ttu-id="03b79-3427">Элементы массива могут быть любого типа, включая типы значений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3427">The elements of an array can be any type, including value types.</span></span>  
  
 <span data-ttu-id="03b79-3428">Отсчитываемый от нуля одномерный массив массивы чисел создаются с помощью лексемы метаданных, указывающей соответствующий тип значения (<xref:System.Int32>, и так далее).</span><span class="sxs-lookup"><span data-stu-id="03b79-3428">Zero-based, one-dimensional arrays of numbers are created using a metadata token referencing the appropriate value type (<xref:System.Int32>, and so on).</span></span> <span data-ttu-id="03b79-3429">Элементы массива, инициализируются значением 0 соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3429">Elements of the array are initialized to 0 of the appropriate type.</span></span>  
  
 <span data-ttu-id="03b79-3430">Для одномерных массивов и многомерные массивы создаются с помощью <xref:System.Reflection.Emit.OpCodes.Newobj> вместо `newarr`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3430">Nonzero-based one-dimensional arrays and multidimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newobj> rather than `newarr`.</span></span> <span data-ttu-id="03b79-3431">Но чаще они создаются с помощью методов <xref:System.Array> в .NET Framework.</span><span class="sxs-lookup"><span data-stu-id="03b79-3431">More commonly, they are created using the methods of the <xref:System.Array> class in the .NET Framework.</span></span>  
  
 <span data-ttu-id="03b79-3432"><xref:System.OutOfMemoryException> возникает, если памяти недостаточно для удовлетворения запроса.</span><span class="sxs-lookup"><span data-stu-id="03b79-3432"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="03b79-3433"><xref:System.OverflowException> возникает, если `numElems` меньше 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-3433"><xref:System.OverflowException> is thrown if `numElems` is less than 0.</span></span>  
  
 <span data-ttu-id="03b79-3434">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `newarr` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3434">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newarr` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3435">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3435">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Newobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Newobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Newobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Newobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Newobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Newobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Newobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Newobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3436">Создает новый объект или новый экземпляр типа значения и помещает ссылку на объект (тип <see langword="O" />) в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3436">Creates a new object or a new instance of a value type, pushing an object reference (type <see langword="O" />) onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3437">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3438">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3438">Format</span></span>|<span data-ttu-id="03b79-3439">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3439">Assembly Format</span></span>|<span data-ttu-id="03b79-3440">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3441">73 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3441">73 < `T` ></span></span>|<span data-ttu-id="03b79-3442">newobj `ctor`</span><span class="sxs-lookup"><span data-stu-id="03b79-3442">newobj `ctor`</span></span>|<span data-ttu-id="03b79-3443">Размещает неинициализированный объект или значение тип и вызывает constructor `ctor`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3443">Allocates an uninitialized object or value type and calls the constructor method `ctor`.</span></span>|  
  
 <span data-ttu-id="03b79-3444">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3445">Аргументы `arg1` через `argn` передаются в стеке в последовательности.</span><span class="sxs-lookup"><span data-stu-id="03b79-3445">Arguments `arg1` through `argn` are pushed on the stack in sequence.</span></span>  
  
2.  <span data-ttu-id="03b79-3446">Аргументы `argn` через `arg1` извлекаются из стека и передаются в `ctor` для создания объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-3446">Arguments `argn` through `arg1` are popped from the stack and passed to `ctor` for object creation.</span></span>  
  
3.  <span data-ttu-id="03b79-3447">Ссылка на новый объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3447">A reference to the new object is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3448">`newobj` Инструкция создает новый объект или новый экземпляр типа значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3448">The `newobj` instruction creates a new object or a new instance of a value type.</span></span> <span data-ttu-id="03b79-3449">`Ctor` является маркером метаданных ( `methodref` или `methoddef` , должен быть помечен как конструктор), указывающая имя, класс и сигнатура конструктора для вызова.</span><span class="sxs-lookup"><span data-stu-id="03b79-3449">`Ctor` is a metadata token (a `methodref` or `methoddef` that must be marked as a constructor) that indicates the name, class and signature of the constructor to call.</span></span>  
  
 <span data-ttu-id="03b79-3450">`newobj` Инструкции выделяет новый экземпляр класса, связанного с `ctor` и инициализирует все поля в новый экземпляр 0 (соответствующего типа) или пустыми ссылками.</span><span class="sxs-lookup"><span data-stu-id="03b79-3450">The `newobj` instruction allocates a new instance of the class associated with `ctor` and initializes all the fields in the new instance to 0 (of the proper type) or null references as appropriate.</span></span> <span data-ttu-id="03b79-3451">Затем он вызывает конструктор `ctor` с заданными аргументами и вновь созданного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="03b79-3451">It then calls the constructor `ctor` with the given arguments along with the newly created instance.</span></span> <span data-ttu-id="03b79-3452">После вызова конструктора, инициализированный ссылку на объект (тип `O`) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3452">After the constructor has been called, the now initialized object reference (type `O`) is pushed on the stack.</span></span>  
  
 <span data-ttu-id="03b79-3453">С точки зрения конструктора неинициализированный объект является аргументом 0 и выполните другие аргументы, передаваемые newobj в порядке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3453">From the constructor's point of view, the uninitialized object is argument 0 and the other arguments passed to newobj follow in order.</span></span>  
  
 <span data-ttu-id="03b79-3454">Все с нуля одномерные массивы создаются с помощью <xref:System.Reflection.Emit.OpCodes.Newarr>, а не `newobj`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3454">All zero-based, one-dimensional arrays are created using <xref:System.Reflection.Emit.OpCodes.Newarr>, not `newobj`.</span></span> <span data-ttu-id="03b79-3455">С другой стороны, все другие массивы (имеющие несколько измерений или одномерные, но не от нуля) создаются с помощью `newobj`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3455">On the other hand, all other arrays (more than one dimension, or one-dimensional but not zero-based) are created using `newobj`.</span></span>  
  
 <span data-ttu-id="03b79-3456">Типы значений не создаются обычно с помощью `newobj`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3456">Value types are not usually created using `newobj`.</span></span> <span data-ttu-id="03b79-3457">Они размещаются как аргументы или локальные переменные, с помощью `newarr` (для одномерных массивов отсчитываемый от нуля) или как поля объектов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3457">They are usually allocated either as arguments or local variables, using `newarr` (for zero-based, one-dimensional arrays), or as fields of objects.</span></span> <span data-ttu-id="03b79-3458">После выделения памяти, они инициализируются с помощью <xref:System.Reflection.Emit.OpCodes.Initobj>.</span><span class="sxs-lookup"><span data-stu-id="03b79-3458">Once allocated, they are initialized using <xref:System.Reflection.Emit.OpCodes.Initobj>.</span></span> <span data-ttu-id="03b79-3459">Тем не менее `newobj` инструкция может использоваться для создания нового экземпляра типа значения в стеке, который затем может быть передан как аргумент, хранящихся в локальной и т. д.</span><span class="sxs-lookup"><span data-stu-id="03b79-3459">However, the `newobj` instruction can be used to create a new instance of a value type on the stack, that can then be passed as an argument, stored in a local, and so on.</span></span>  
  
 <span data-ttu-id="03b79-3460"><xref:System.OutOfMemoryException> возникает, если памяти недостаточно для удовлетворения запроса.</span><span class="sxs-lookup"><span data-stu-id="03b79-3460"><xref:System.OutOfMemoryException> is thrown if there is insufficient memory to satisfy the request.</span></span>  
  
 <span data-ttu-id="03b79-3461"><xref:System.MissingMethodException> возникает, если метод-конструктор `ctor` с указанным именем класса и подпись не найдена.</span><span class="sxs-lookup"><span data-stu-id="03b79-3461"><xref:System.MissingMethodException> is thrown if a constructor method `ctor` with the indicated name, class and signature could not be found.</span></span> <span data-ttu-id="03b79-3462">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3462">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-3463">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `newobj` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3463">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `newobj` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3464">ILGenerator.Emit (OpCode, ConstructorInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-3464">ILGenerator.Emit(OpCode, ConstructorInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Nop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Nop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Nop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Nop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Nop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Nop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Nop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Nop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3465">Заполняет пространство, если коды операции содержат исправления.</span><span class="sxs-lookup"><span data-stu-id="03b79-3465">Fills space if opcodes are patched.</span></span> <span data-ttu-id="03b79-3466">Никаких значимых операций не выполняется, хотя может быть пройден цикл обработки.</span><span class="sxs-lookup"><span data-stu-id="03b79-3466">No meaningful operation is performed although a processing cycle can be consumed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3467">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3467">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3468">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3468">Format</span></span>|<span data-ttu-id="03b79-3469">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3469">Assembly Format</span></span>|<span data-ttu-id="03b79-3470">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3470">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3471">00</span><span class="sxs-lookup"><span data-stu-id="03b79-3471">00</span></span>|<span data-ttu-id="03b79-3472">nop</span><span class="sxs-lookup"><span data-stu-id="03b79-3472">nop</span></span>|<span data-ttu-id="03b79-3473">Выполняет операцию без поведения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3473">Performs an operation without behavior.</span></span>|  
  
 <span data-ttu-id="03b79-3474">Нет без изменения состояния стека, определенных для данной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3474">There is no stack transitional behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-3475">`nop` Операции не выполняет никаких действий.</span><span class="sxs-lookup"><span data-stu-id="03b79-3475">The `nop` operation does nothing.</span></span> <span data-ttu-id="03b79-3476">Он предназначен для заполнения в пространстве, если коды операции содержат исправления.</span><span class="sxs-lookup"><span data-stu-id="03b79-3476">It is intended to fill in space if opcodes are patched.</span></span>  
  
 <span data-ttu-id="03b79-3477">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `nop` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3477">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `nop` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3478">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3478">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Not;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Not" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Not" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Not As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Not;" />
      <MemberSignature Language="F#" Value=" staticval mutable Not : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Not" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3479">Вычисляет побитовое дополнение целочисленного значения, находящегося на вершине стека, и помещает результат в стек с тем же типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3479">Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3480">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3480">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3481">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3481">Format</span></span>|<span data-ttu-id="03b79-3482">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3482">Assembly Format</span></span>|<span data-ttu-id="03b79-3483">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3483">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3484">66</span><span class="sxs-lookup"><span data-stu-id="03b79-3484">66</span></span>|<span data-ttu-id="03b79-3485">not</span><span class="sxs-lookup"><span data-stu-id="03b79-3485">not</span></span>|<span data-ttu-id="03b79-3486">Вычисляет побитовое дополнение значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3486">Computes the bitwise complement of a value.</span></span>|  
  
 <span data-ttu-id="03b79-3487">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3487">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3488">`value` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3488">`value` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3489">`value` извлекается из стека и его побитовое дополнение вычисляется.</span><span class="sxs-lookup"><span data-stu-id="03b79-3489">`value` is popped from the stack and its bitwise complement computed.</span></span>  
  
3.  <span data-ttu-id="03b79-3490">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3490">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3491">`not` Инструкция вычисляет побитовое дополнение целочисленного значения и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3491">The `not` instruction computes the bitwise complement of an integer value and pushes the result onto the stack.</span></span> <span data-ttu-id="03b79-3492">Тип возвращаемого значения совпадает с типом операнда.</span><span class="sxs-lookup"><span data-stu-id="03b79-3492">The return type is the same as the operand type.</span></span>  
  
 <span data-ttu-id="03b79-3493">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `not` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3493">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `not` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3494">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3494">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Or;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Or" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Or" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Or As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Or;" />
      <MemberSignature Language="F#" Value=" staticval mutable Or : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Or" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3495">Вычисляет побитовое дополнение двух целочисленных значений, находящихся на вершине стека, и помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3495">Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3496">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3496">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3497">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3497">Format</span></span>|<span data-ttu-id="03b79-3498">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3498">Assembly Format</span></span>|<span data-ttu-id="03b79-3499">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3499">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3500">60</span><span class="sxs-lookup"><span data-stu-id="03b79-3500">60</span></span>|<span data-ttu-id="03b79-3501">или</span><span class="sxs-lookup"><span data-stu-id="03b79-3501">or</span></span>|<span data-ttu-id="03b79-3502">Выполняет побитовую операцию или над двумя целыми числами, возвращает целое число.</span><span class="sxs-lookup"><span data-stu-id="03b79-3502">Computes the bitwise OR of two integer values, returns an integer.</span></span>|  
  
 <span data-ttu-id="03b79-3503">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3503">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3504">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3504">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3505">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3505">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3506">`value2` и `value1` извлекаются из стека и поразрядное или вычисляемые.</span><span class="sxs-lookup"><span data-stu-id="03b79-3506">`value2` and `value1` are popped from the stack and their bitwise OR computed.</span></span>  
  
4.  <span data-ttu-id="03b79-3507">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3507">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3508">`or` Инструкция выполняет Поразрядную операцию из двух значений на вершине стека, помещает результат в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3508">The `or` instruction computes the bitwise OR of two values atop the stack, pushing the result onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3509">`Or` представляет собой операцию целыми числами.</span><span class="sxs-lookup"><span data-stu-id="03b79-3509">`Or` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="03b79-3510">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `or` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3510">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `or` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3511">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3511">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Pop;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Pop" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Pop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Pop As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Pop;" />
      <MemberSignature Language="F#" Value=" staticval mutable Pop : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Pop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3512">Удаляет значение, находящееся на вершине стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-3512">Removes the value currently on top of the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3513">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3513">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3514">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3514">Format</span></span>|<span data-ttu-id="03b79-3515">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3515">Assembly Format</span></span>|<span data-ttu-id="03b79-3516">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3516">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3517">26</span><span class="sxs-lookup"><span data-stu-id="03b79-3517">26</span></span>|<span data-ttu-id="03b79-3518">pop</span><span class="sxs-lookup"><span data-stu-id="03b79-3518">pop</span></span>|<span data-ttu-id="03b79-3519">Извлекает верхнее значение из стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-3519">Pops the top value from the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3520">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3520">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3521">Верхнее значение извлекается из стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-3521">The top value is popped from the stack.</span></span>  
  
 <span data-ttu-id="03b79-3522">`pop` Инструкция удаляет верхний элемент из стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-3522">The `pop` instruction removes the top element from the stack.</span></span>  
  
 <span data-ttu-id="03b79-3523">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `pop` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3523">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `pop` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3524">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3524">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3525">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3525">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3526">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3526">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3527">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3527">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3528">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3528">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix5">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix5" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix5 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix5;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix5 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix5" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3529">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3529">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix6">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix6" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix6 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix6;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix6 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix6" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3530">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3530">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix7">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefix7" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefix7 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefix7;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefix7 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefix7" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3531">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3531">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefixref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Prefixref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Prefixref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Prefixref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Prefixref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Prefixref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3532">Эта инструкция зарезервирована.</span><span class="sxs-lookup"><span data-stu-id="03b79-3532">This is a reserved instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Readonly">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Readonly;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Readonly" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Readonly" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Readonly As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Readonly;" />
      <MemberSignature Language="F#" Value=" staticval mutable Readonly : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Readonly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3533">Указывает, что последующая операция, связанная с адресом массива, не выполняет никаких проверок во время выполнения и возвращает управляемый указатель, изменение которого запрещено.</span><span class="sxs-lookup"><span data-stu-id="03b79-3533">Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3534">В следующей таблице перечислены инструкции по шестнадцатеричном формате и формате сборки промежуточного языка MSIL, Microsoft, а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3534">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3535">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3535">Format</span></span>|<span data-ttu-id="03b79-3536">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3536">Assembly Format</span></span>|<span data-ttu-id="03b79-3537">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3537">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3538">FE 1E</span><span class="sxs-lookup"><span data-stu-id="03b79-3538">FE 1E</span></span>|<span data-ttu-id="03b79-3539">только для чтения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3539">readonly.</span></span>|<span data-ttu-id="03b79-3540">Укажите, что операции взятия адреса последующих массива не выполняет никаких проверок во время выполнения, и что он возвращает управляемый указатель с ограниченной возможностью изменения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3540">Specify that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer with restricted mutability.</span></span>|  
  
 <span data-ttu-id="03b79-3541">Этот префикс может использоваться только в ближайший предшествующий `ldelema` инструкцию и вызовы к специальной `Address` метод для массивов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3541">This prefix can only appear immediately preceding the `ldelema` instruction and calls to the special `Address` method on arrays.</span></span> <span data-ttu-id="03b79-3542">Влияние на последующую операцию получается двойная:</span><span class="sxs-lookup"><span data-stu-id="03b79-3542">Its effect on the subsequent operation is twofold:</span></span>  
  
1.  <span data-ttu-id="03b79-3543">Во время выполнения выполняется не операция проверки типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3543">At run time, no type check operation is performed.</span></span> <span data-ttu-id="03b79-3544">Обратите внимание, что обычно выполняется неявная проверка типа для `ldelema` и `stelem` инструкции при использовании ссылки на тип массивов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3544">Note that there is normally an implicit type check for the `ldelema` and `stelem` instructions when used on reference type arrays.</span></span> <span data-ttu-id="03b79-3545">Никогда нет проверку типов во время выполнения для классов значений, поэтому `readonly` в этом случае является холостой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3545">There is never a run-time type check for value classes, so `readonly` is a no-op in that case.</span></span>  
  
2.  <span data-ttu-id="03b79-3546">Средство проверки рассматривает результат операции взятия адреса как управляемый указатель с ограниченной возможностью изменения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3546">The verifier treats the result of the address-of operation as a managed pointer with restricted mutability.</span></span>  
  
 <span data-ttu-id="03b79-3547">Говорят, что указатель ограничен Изменяемость, определяющий тип контролирует, можно ли изменить значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-3547">The pointer is said to have restricted mutability because the defining type controls whether the value can be mutated.</span></span> <span data-ttu-id="03b79-3548">Для классов значений, которые предоставляют не открытые поля или методы, которые обновляют значение, указатель доступен только для чтения (поэтому имя префикса).</span><span class="sxs-lookup"><span data-stu-id="03b79-3548">For value classes that expose no public fields or methods that update the value in place, the pointer is read-only (hence the name of the prefix).</span></span> <span data-ttu-id="03b79-3549">В частности не предоставляют мутаторы классы, представляющие типы-примитивы (например, System.Int32) и таким образом доступны только для чтения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3549">In particular, the classes representing primitive types (for example, System.Int32) do not expose mutators and thus are read-only.</span></span>  
  
 <span data-ttu-id="03b79-3550">Ограниченный таким образом управляемый указатель может использоваться только одним из следующих способов:</span><span class="sxs-lookup"><span data-stu-id="03b79-3550">A managed pointer restricted in this fashion can be used only in the following ways:</span></span>  
  
-   <span data-ttu-id="03b79-3551">Как `object` параметр для `ldfld`, `ldflda`, `stfld`, `call`, или`constrained callvirt` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3551">As the `object` parameter for the `ldfld`, `ldflda`, `stfld`, `call`, or`constrained callvirt` instructions.</span></span>  
  
-   <span data-ttu-id="03b79-3552">Как `pointer` параметр `ldobj` инструкций или одной из `ldind` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3552">As the `pointer` parameter to the `ldobj` instruction or to one of the `ldind` instructions.</span></span>  
  
-   <span data-ttu-id="03b79-3553">Как `source` параметр `cpobj` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3553">As the `source` parameter to the `cpobj` instruction.</span></span>  
  
 <span data-ttu-id="03b79-3554">Все остальные операции запрещены, включая `stobj`, `initobj`, или `mkrefany` операций или любой другой `stind` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3554">All other operations disallowed, including the `stobj`, `initobj`, or `mkrefany` operations, or any of the `stind` instructions.</span></span>  
  
 <span data-ttu-id="03b79-3555">Цель `readonly` префикс является избежание проверку типов, при извлечении элемента из массива в универсальном коде.</span><span class="sxs-lookup"><span data-stu-id="03b79-3555">The purpose of the `readonly` prefix is to avoid a type check when fetching an element from an array in generic code.</span></span> <span data-ttu-id="03b79-3556">Например, выражение `arr[i].m()`, где тип элемента массива `arr` является универсальным типом, ограниченного до интерфейса с помощью метода `m`, может компилироваться в следующий MSIL.</span><span class="sxs-lookup"><span data-stu-id="03b79-3556">For example, the expression `arr[i].m()`, where the element type of the array `arr` is a generic type that has been constrained to have an interface with method `m`, might compile to the following MSIL.</span></span>  
  
```  
ldloc arr  
ldloc i  
readonly.  
ldelema !0    // Loads the pointer to the object.  
…             // Load the arguments to the call.  
constrained. !0  
callvirt m  
```  
  
 <span data-ttu-id="03b79-3557">Без `readonly` префикс, `ldelema` будет выполнять проверку типов в случае инструкция где! 0 был ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3557">Without the `readonly` prefix, the `ldelema` instruction would perform a type check in the case where !0 was a reference type.</span></span> <span data-ttu-id="03b79-3558">Не только неэффективен эта проверка типа, но это семантически неправилен.</span><span class="sxs-lookup"><span data-stu-id="03b79-3558">Not only is this type check inefficient, but it is semantically incorrect.</span></span> <span data-ttu-id="03b79-3559">Проверка типа для `ldelema` является точным соответствием, который является слишком строгим.</span><span class="sxs-lookup"><span data-stu-id="03b79-3559">The type check for `ldelema` is an exact match, which is too strong.</span></span> <span data-ttu-id="03b79-3560">Если массив подклассы типа! 0, приведенный выше код не пройдут проверку типов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3560">If the array held subclasses of type !0, the code above would fail the type check.</span></span>  
  
 <span data-ttu-id="03b79-3561">Адрес элемента массива извлекается, а не сам элемент, чтобы получить дескриптор для `arr[i]` works для обоих типы значений и ссылочные типы что таким образом, может быть передан `constrained callvirt` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3561">The address of the array element is fetched, instead of the element itself, in order to have a handle for `arr[i]` that works for both value types and reference types, and thus can be passed to the `constrained callvirt` instruction.</span></span>  
  
 <span data-ttu-id="03b79-3562">В целом небезопасно пропустить проверку во время выполнения, если в массиве содержатся элементы ссылочного типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3562">In general it would be unsafe to skip the run-time check if the array held elements of a reference type.</span></span> <span data-ttu-id="03b79-3563">В целях безопасности необходимо, чтобы гарантировать, что в массив не было изменений через этот указатель.</span><span class="sxs-lookup"><span data-stu-id="03b79-3563">To be safe, it is necessary to ensure that no modifications to the array are made through this pointer.</span></span> <span data-ttu-id="03b79-3564">Правила проверки обеспечить это.</span><span class="sxs-lookup"><span data-stu-id="03b79-3564">The verifier rules ensure this.</span></span> <span data-ttu-id="03b79-3565">Ограниченный управляемый указатель могут передаваться как объект из вызовов методов экземпляра, поэтому он не является доступным только для чтения для типов значений, но нет никаких проблем безопасности типа для типов значений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3565">The restricted managed pointer can be passed as the object of instance method calls, so it is not strictly speaking read-only for value types, but there is no type safety problem for value types.</span></span>  
  
 <span data-ttu-id="03b79-3566">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `readonly` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3566">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `readonly` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3567">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3567">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanytype">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanytype" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanytype As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanytype;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanytype : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanytype" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3568">Извлекает лексему типа, внедренную в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3568">Retrieves the type token embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3569">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3569">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3570">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3570">Format</span></span>|<span data-ttu-id="03b79-3571">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3571">Assembly Format</span></span>|<span data-ttu-id="03b79-3572">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3572">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3573">FE 1D</span><span class="sxs-lookup"><span data-stu-id="03b79-3573">FE 1D</span></span>|<span data-ttu-id="03b79-3574">refanytype</span><span class="sxs-lookup"><span data-stu-id="03b79-3574">refanytype</span></span>|<span data-ttu-id="03b79-3575">Помещает токен типа, хранящихся в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3575">Pushes the type token stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="03b79-3576">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3576">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3577">Ссылка на тип значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3577">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3578">Ссылка на типизированный извлекается из стека и получить его соответствующий маркер типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3578">The typed reference is popped from the stack and its corresponding type token retrieved.</span></span>  
  
3.  <span data-ttu-id="03b79-3579">Токен типа помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3579">The type token is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3580">Типизированная ссылка содержит маркер типа и адрес для экземпляра объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-3580">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="03b79-3581">`refanytype` Инструкция извлекает токен типа, внедренный в ссылку.</span><span class="sxs-lookup"><span data-stu-id="03b79-3581">The `refanytype` instruction retrieves the type token embedded in the typed reference.</span></span> <span data-ttu-id="03b79-3582">См. в разделе <xref:System.Reflection.Emit.OpCodes.Mkrefany> сведения о создании типизированных ссылок.</span><span class="sxs-lookup"><span data-stu-id="03b79-3582">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for information on creating typed references.</span></span>  
  
 <span data-ttu-id="03b79-3583">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `refanytype` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3583">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanytype` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3584">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3584">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refanyval">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Refanyval" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Refanyval As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Refanyval;" />
      <MemberSignature Language="F#" Value=" staticval mutable Refanyval : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Refanyval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3585">Извлекает адрес (тип <see langword="&amp;" />), внедренный в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3585">Retrieves the address (type <see langword="&amp;" />) embedded in a typed reference.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3586">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3586">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3587">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3587">Format</span></span>|<span data-ttu-id="03b79-3588">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3588">Assembly Format</span></span>|<span data-ttu-id="03b79-3589">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3589">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3590">C2 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3590">C2 < `T` ></span></span>|<span data-ttu-id="03b79-3591">refanyval `type`</span><span class="sxs-lookup"><span data-stu-id="03b79-3591">refanyval `type`</span></span>|<span data-ttu-id="03b79-3592">Помещает адресу, сохраненному в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3592">Pushes the address stored in a typed reference.</span></span>|  
  
 <span data-ttu-id="03b79-3593">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3593">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3594">Ссылка на тип значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3594">A value type reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3595">Ссылка на типизированный извлекается из стека и получить соответствующий адрес.</span><span class="sxs-lookup"><span data-stu-id="03b79-3595">The typed reference is popped from the stack and the corresponding address retrieved.</span></span>  
  
3.  <span data-ttu-id="03b79-3596">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3596">The address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3597">Типизированная ссылка содержит маркер типа и адрес для экземпляра объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-3597">A typed reference contains a type token and an address to an object instance.</span></span>  
  
 <span data-ttu-id="03b79-3598">`refanyval` Инструкция извлекает адрес, внедренный в ссылку с определенным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3598">The `refanyval` instruction retrieves the address embedded in the a typed reference.</span></span> <span data-ttu-id="03b79-3599">Тип, внедренный в ссылку с определенным типом в стеке должны соответствует типу, заданному параметром `type` (токен метаданных, либо `typedef` или `typeref`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3599">The type embedded in the typed reference supplied on the stack must match the type specified by `type` (a metadata token, either a `typedef` or a `typeref`).</span></span> <span data-ttu-id="03b79-3600">См. в разделе <xref:System.Reflection.Emit.OpCodes.Mkrefany> Дополнительные сведения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3600">See the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction for related content.</span></span>  
  
 <span data-ttu-id="03b79-3601"><xref:System.InvalidCastException> возникает, если `type` не идентичен типа, хранящийся в ссылку на тип (в этом случае `type` предоставляется класс <xref:System.Reflection.Emit.OpCodes.Mkrefany> инструкций, который создал сказал типизированную ссылку).</span><span class="sxs-lookup"><span data-stu-id="03b79-3601"><xref:System.InvalidCastException> is thrown if `type` is not identical to the type stored in the type reference (in this case, `type` is the class supplied to the <xref:System.Reflection.Emit.OpCodes.Mkrefany> instruction that constructed said typed reference).</span></span>  
  
 <span data-ttu-id="03b79-3602"><xref:System.TypeLoadException> возникает, если `type` не удается найти.</span><span class="sxs-lookup"><span data-stu-id="03b79-3602"><xref:System.TypeLoadException> is thrown if `type` cannot be found.</span></span>  
  
 <span data-ttu-id="03b79-3603">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `refanyval` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3603">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `refanyval` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3604">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3604">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3605">Делит одно значение на другое и помещает остаток в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3605">Divides two values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3606">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3606">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3607">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3607">Format</span></span>|<span data-ttu-id="03b79-3608">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3608">Assembly Format</span></span>|<span data-ttu-id="03b79-3609">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3609">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3610">5D</span><span class="sxs-lookup"><span data-stu-id="03b79-3610">5D</span></span>|<span data-ttu-id="03b79-3611">REM</span><span class="sxs-lookup"><span data-stu-id="03b79-3611">rem</span></span>|<span data-ttu-id="03b79-3612">Помещает остаток от деления `value1` по `value2` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3612">Pushes the remainder of dividing `value1` by `value2` onto the stack.</span></span>|  
  
  
 <span data-ttu-id="03b79-3613">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3613">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3614">Объект `value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3614">A `value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3615">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3615">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3616">`value2` и `value1` извлекаются из стека и остальная часть `value1` `div` `value2` вычисляется.</span><span class="sxs-lookup"><span data-stu-id="03b79-3616">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="03b79-3617">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3617">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3618">`result` = `value1` `rem` `value2` удовлетворяет следующим условиям:</span><span class="sxs-lookup"><span data-stu-id="03b79-3618">`result` = `value1` `rem` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="03b79-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), и:</span><span class="sxs-lookup"><span data-stu-id="03b79-3619">`result` = `value1` - `value2` `×` (`value1` `div` `value2`), and:</span></span>  
  
 <span data-ttu-id="03b79-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, входа (`result`) = входа (`value1`), где `div` деления инструкция, которая усекает в сторону нуля.</span><span class="sxs-lookup"><span data-stu-id="03b79-3620">0 = &#124; `result` &#124; < &#124; `value2` &#124;, sign(`result`) = sign(`value1`), where `div` is the division instruction that truncates towards zero.</span></span>  
  
 <span data-ttu-id="03b79-3621">Если `value2` равно нулю или `value1` -бесконечность, результатом будет NaN.</span><span class="sxs-lookup"><span data-stu-id="03b79-3621">If `value2` is zero or `value1` is infinity the result is NaN.</span></span> <span data-ttu-id="03b79-3622">Если `value2` равно бесконечности, результатом является `value1` (инверсией для `-infinity`).</span><span class="sxs-lookup"><span data-stu-id="03b79-3622">If `value2` is infinity, the result is `value1` (negated for `-infinity`).</span></span>  
  
 <span data-ttu-id="03b79-3623">Целочисленные операции создают исключение <xref:System.DivideByZeroException> Если `value2` равно нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-3623">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="03b79-3624">Обратите внимание, что на платформах на базе Intel <xref:System.OverflowException> возникает исключение при вычислении (minint `rem` -1).</span><span class="sxs-lookup"><span data-stu-id="03b79-3624">Note that on the Intel-based platforms an <xref:System.OverflowException> is thrown when computing (minint `rem` -1).</span></span>  
  
 <span data-ttu-id="03b79-3625">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `rem` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3625">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3626">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3626">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rem_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rem_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rem_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rem_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rem_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rem_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3627">Делит одно значение без знака на другое значение без знака и помещает остаток в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3627">Divides two unsigned values and pushes the remainder onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3628">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3628">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3629">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3629">Format</span></span>|<span data-ttu-id="03b79-3630">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3630">Assembly Format</span></span>|<span data-ttu-id="03b79-3631">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3631">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3632">5E</span><span class="sxs-lookup"><span data-stu-id="03b79-3632">5E</span></span>|<span data-ttu-id="03b79-3633">REM.un</span><span class="sxs-lookup"><span data-stu-id="03b79-3633">rem.un</span></span>|<span data-ttu-id="03b79-3634">Помещает остаток от деления числа без знака `value1` на значение без знака `value2` в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3634">Pushes the remainder of dividing unsigned `value1` by unsigned `value2` onto the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3635">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3635">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3636">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3636">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3637">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3637">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3638">`value2` и `value1` извлекаются из стека и остальная часть `value1` `div` `value2` вычисляется.</span><span class="sxs-lookup"><span data-stu-id="03b79-3638">`value2` and `value1` are popped from the stack and the remainder of `value1` `div` `value2` computed.</span></span>  
  
4.  <span data-ttu-id="03b79-3639">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3639">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3640">`result` = `value1` `rem.un` `value2` удовлетворяет следующим условиям:</span><span class="sxs-lookup"><span data-stu-id="03b79-3640">`result` = `value1` `rem.un` `value2` satisfies the following conditions:</span></span>  
  
 <span data-ttu-id="03b79-3641">`result` = `value1` - `value2` x (`value1` `div.un` `value2`), и:</span><span class="sxs-lookup"><span data-stu-id="03b79-3641">`result` = `value1` - `value2` x(`value1` `div.un` `value2`), and:</span></span>  
  
 <span data-ttu-id="03b79-3642">0 = `result`  <  `value2`, где `div.un` инструкция деления числа без знака.</span><span class="sxs-lookup"><span data-stu-id="03b79-3642">0 = `result` < `value2`, where `div.un` is the unsigned division instruction.</span></span>  
  
 <span data-ttu-id="03b79-3643">`rem.un` Инструкция вычисляет `result` и помещает его в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3643">The `rem.un` instruction computes `result` and pushes it on the stack.</span></span> <span data-ttu-id="03b79-3644">`Rem.un` обрабатывает аргументы как целых чисел без знака, хотя <xref:System.Reflection.Emit.OpCodes.Rem> обрабатывает их как целых чисел.</span><span class="sxs-lookup"><span data-stu-id="03b79-3644">`Rem.un` treats its arguments as unsigned integers, while <xref:System.Reflection.Emit.OpCodes.Rem> treats them as signed integers.</span></span>  
  
 <span data-ttu-id="03b79-3645">`Rem.un` не определен для чисел с плавающей запятой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3645">`Rem.un` is unspecified for floating-point numbers.</span></span>  
  
 <span data-ttu-id="03b79-3646">Целочисленные операции создают исключение <xref:System.DivideByZeroException> Если `value2` равно нулю.</span><span class="sxs-lookup"><span data-stu-id="03b79-3646">Integral operations throw <xref:System.DivideByZeroException> if `value2` is zero.</span></span>  
  
 <span data-ttu-id="03b79-3647">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `rem.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3647">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rem.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3648">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3648">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ret">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Ret;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Ret" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Ret" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Ret As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Ret;" />
      <MemberSignature Language="F#" Value=" staticval mutable Ret : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Ret" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3649">Выполняет возврат из текущего метода, помещая возвращаемое значение (если имеется) из стека вычислений вызываемого метода в стек вычислений вызывающего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3649">Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3650">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3650">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3651">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3651">Format</span></span>|<span data-ttu-id="03b79-3652">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3652">Assembly Format</span></span>|<span data-ttu-id="03b79-3653">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3653">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3654">2A</span><span class="sxs-lookup"><span data-stu-id="03b79-3654">2A</span></span>|<span data-ttu-id="03b79-3655">код возврата:</span><span class="sxs-lookup"><span data-stu-id="03b79-3655">ret</span></span>|<span data-ttu-id="03b79-3656">Возврат из метода, возможно, возвращая значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-3656">Returns from method, possibly returning a value.</span></span>|  
  
 <span data-ttu-id="03b79-3657">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3657">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3658">Возвращаемое значение извлекается из стека вызываемого метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3658">The return value is popped from the callee evaluation stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3659">Возвращаемое значение, полученное на шаге 1, помещается в стек вычислений вызывающего объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-3659">The return value obtained in step 1 is pushed onto the caller evaluation stack.</span></span>  
  
 <span data-ttu-id="03b79-3660">Если возвращаемое значение отсутствует в стеке вычислений вызываемый объект, значение не возвращается (без стека вариантов поведения для метода, вызываемого и вызывающего объекта).</span><span class="sxs-lookup"><span data-stu-id="03b79-3660">If the return value is not present on the callee evaluation stack, no value is returned (no stack transition behaviors for either the callee or caller method).</span></span>  
  
 <span data-ttu-id="03b79-3661">Тип возвращаемого значения, если таковые имеются, текущего метода определяет тип значения с вершины стека и скопированный в стек метода, который вызвал текущий метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-3661">The type of the return value, if any, of the current method determines the type of value to be fetched from the top of the stack and copied onto the stack of the method that called the current method.</span></span> <span data-ttu-id="03b79-3662">В стек для текущего метода должен быть пустым, за исключением возвращаемого значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3662">The evaluation stack for the current method must be empty except for the value to be returned.</span></span>  
  
 <span data-ttu-id="03b79-3663">`ret` Инструкция не может использоваться для передачи управления из`try`, `filter`, `catch`, или `finally` блока.</span><span class="sxs-lookup"><span data-stu-id="03b79-3663">The `ret` instruction cannot be used to transfer control out of a`try`, `filter`, `catch`, or `finally` block.</span></span> <span data-ttu-id="03b79-3664">Изнутри `try` или `catch`, использовать <xref:System.Reflection.Emit.OpCodes.Leave> инструкция, для назначения — `ret` инструкцию, которая находится за пределами всех блоков исключения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3664">From within a `try` or `catch`, use the <xref:System.Reflection.Emit.OpCodes.Leave> instruction with a destination of a `ret` instruction that is outside all enclosing exception blocks.</span></span> <span data-ttu-id="03b79-3665">Так как `filter` и `finally` блоки логически являются частью механизма обработки исключений и не к методу, в котором находится их код, правильно созданные инструкции промежуточного языка MSIL (Microsoft) выполните возврат из в метод `filter` или `finally`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3665">Because the `filter` and `finally` blocks are logically part of exception handling and not the method in which their code is embedded, correctly generated Microsoft Intermediate Language (MSIL) instructions do not perform a method return from within a `filter` or `finally`.</span></span>  
  
 <span data-ttu-id="03b79-3666">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `ret` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3666">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `ret` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3667">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3667">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Rethrow" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Rethrow As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Rethrow;" />
      <MemberSignature Language="F#" Value=" staticval mutable Rethrow : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Rethrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3668">Возвращает текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-3668">Rethrows the current exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3669">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3669">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3670">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3670">Format</span></span>|<span data-ttu-id="03b79-3671">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3671">Assembly Format</span></span>|<span data-ttu-id="03b79-3672">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3672">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3673">FE 1A</span><span class="sxs-lookup"><span data-stu-id="03b79-3673">FE 1A</span></span>|<span data-ttu-id="03b79-3674">Rethrow</span><span class="sxs-lookup"><span data-stu-id="03b79-3674">rethrow</span></span>|<span data-ttu-id="03b79-3675">Возвращает текущее исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-3675">Rethrows the current exception</span></span>|  
  
 <span data-ttu-id="03b79-3676">Нет стека переходные для данной инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3676">No stack transition behavior is defined for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-3677">`rethrow` Инструкции разрешено только в теле `catch` обработчика.</span><span class="sxs-lookup"><span data-stu-id="03b79-3677">The `rethrow` instruction is only permitted within the body of a `catch` handler.</span></span> <span data-ttu-id="03b79-3678">Он создает исключение, которое было перехвачено этим обработчиком.</span><span class="sxs-lookup"><span data-stu-id="03b79-3678">It throws the same exception that was caught by this handler.</span></span>  
  
 <span data-ttu-id="03b79-3679">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `rethrow` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3679">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `rethrow` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3680">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3680">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shl">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shl;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shl" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shl" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shl As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shl;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shl : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3681">Смещает целочисленное значение влево (с заполнением нулями) на заданное число бит и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3681">Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3682">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3682">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3683">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3683">Format</span></span>|<span data-ttu-id="03b79-3684">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3684">Assembly Format</span></span>|<span data-ttu-id="03b79-3685">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3685">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3686">62</span><span class="sxs-lookup"><span data-stu-id="03b79-3686">62</span></span>|<span data-ttu-id="03b79-3687">Shl</span><span class="sxs-lookup"><span data-stu-id="03b79-3687">shl</span></span>|<span data-ttu-id="03b79-3688">Смещает целое число (с заполнением нулями) слева.</span><span class="sxs-lookup"><span data-stu-id="03b79-3688">Shifts an integer to the left (shifting in zeros).</span></span>|  
  
 <span data-ttu-id="03b79-3689">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3689">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3690">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3690">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3691">Количество бит, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3691">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3692">Число бит и значения извлекаются из стека; значение сдвигается влево на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3692">The number of bits to be shifted and the value are popped from the stack; the value is shifted left by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="03b79-3693">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3693">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3694">`shl` Инструкция смещает значение (типа `int32`, `int64` или `native int`) влево на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3694">The `shl` instruction shifts the value (type `int32`, `int64` or `native int`) left by the specified number of bits.</span></span> <span data-ttu-id="03b79-3695">Количество битов, которое является значением типа `int32` или `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3695">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="03b79-3696">Возвращаемое значение не определено, если число бит, больше или равна ширине (в битах), предоставленного значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3696">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="03b79-3697">`Shl` вставляет нулевой разряд в нижнюю позицию при каждой смены.</span><span class="sxs-lookup"><span data-stu-id="03b79-3697">`Shl` inserts a zero bit in the lowest position on each shift.</span></span>  
  
 <span data-ttu-id="03b79-3698">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `shl` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3698">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shl` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3699">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3699">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3700">Смещает целочисленное значение вправо (с знаковым битом) на заданное число бит и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3700">Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3701">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3701">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3702">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3702">Format</span></span>|<span data-ttu-id="03b79-3703">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3703">Assembly Format</span></span>|<span data-ttu-id="03b79-3704">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3704">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3705">63</span><span class="sxs-lookup"><span data-stu-id="03b79-3705">63</span></span>|<span data-ttu-id="03b79-3706">Shr</span><span class="sxs-lookup"><span data-stu-id="03b79-3706">shr</span></span>|<span data-ttu-id="03b79-3707">Сдвигает вправо (с заполнением входа) является целым числом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3707">Shifts an integer to the right (shifting in sign).</span></span>|  
  
 <span data-ttu-id="03b79-3708">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3708">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3709">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3709">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3710">Количество бит, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3710">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3711">Число бит и значения извлекаются из стека; значение смещается вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3711">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="03b79-3712">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3712">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3713">`shr.un` Инструкция смещает значение (типа `int32`, `int64` или `native int`) вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3713">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="03b79-3714">Количество битов, которое является значением типа `int32` или `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3714">The number of bits is a value of type `int32` or `native int`.</span></span> <span data-ttu-id="03b79-3715">Возвращаемое значение не определено, если число бит, больше или равна ширине (в битах), предоставленного значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3715">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="03b79-3716">`Shr` реплицирует старших бит каждой смены, сохраняя знак исходное значение в `result`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3716">`Shr` replicates the high order bit on each shift, preserving the sign of the original value in the `result`.</span></span>  
  
 <span data-ttu-id="03b79-3717">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `shr` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3717">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3718">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3718">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shr_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Shr_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Shr_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Shr_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Shr_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Shr_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3719">Смещает целочисленное значение без знака вправо (с заполнением нулями) на заданное число бит и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3719">Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3720">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3720">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3721">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3721">Format</span></span>|<span data-ttu-id="03b79-3722">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3722">Assembly Format</span></span>|<span data-ttu-id="03b79-3723">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3723">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3724">64</span><span class="sxs-lookup"><span data-stu-id="03b79-3724">64</span></span>|<span data-ttu-id="03b79-3725">Shr.un</span><span class="sxs-lookup"><span data-stu-id="03b79-3725">shr.un</span></span>|<span data-ttu-id="03b79-3726">Сдвигает вправо (с заполнением нулями) является целым числом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3726">Shifts an integer to the right (shifting in zeroes).</span></span>|  
  
 <span data-ttu-id="03b79-3727">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3727">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3728">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3728">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3729">Количество бит, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3729">The amount of bits to be shifted is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3730">Число бит и значения извлекаются из стека; значение смещается вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3730">The number of bits to be shifted and the value are popped from the stack; the value is shifted right by the specified number of bits.</span></span>  
  
4.  <span data-ttu-id="03b79-3731">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3731">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3732">`shr.un` Инструкция смещает значение (типа `int32`, `int64` или `native int`) вправо на указанное число битов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3732">The `shr.un` instruction shifts the value (type `int32`, `int64` or `native int`) right by the specified number of bits.</span></span> <span data-ttu-id="03b79-3733">Количество битов, которое является значением типа `int32`, `int64` или `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3733">The number of bits is a value of type `int32`, `int64` or `native int`.</span></span> <span data-ttu-id="03b79-3734">Возвращаемое значение не определено, если число бит, больше или равна ширине (в битах), предоставленного значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3734">The return value is unspecified if the number of bits to be shifted is greater than or equal to the width (in bits) of the supplied value.</span></span>  
  
 <span data-ttu-id="03b79-3735">`Shr.un` вставляет нулевой разряд в самой высокой позиции в каждой смены.</span><span class="sxs-lookup"><span data-stu-id="03b79-3735">`Shr.un` inserts a zero bit in the highest position on each shift.</span></span>  
  
 <span data-ttu-id="03b79-3736">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `shr.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3736">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `shr.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3737">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3737">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sizeof">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sizeof" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sizeof As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sizeof;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sizeof : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sizeof" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3738">Помещает в стек вычислений сведения о размере (в байтах) заданного типа значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-3738">Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3739">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3739">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3740">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3740">Format</span></span>|<span data-ttu-id="03b79-3741">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3741">Assembly Format</span></span>|<span data-ttu-id="03b79-3742">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3742">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3743">FE 1C < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3743">FE 1C < `T` ></span></span>|<span data-ttu-id="03b79-3744">оператор sizeof `valType`</span><span class="sxs-lookup"><span data-stu-id="03b79-3744">sizeof `valType`</span></span>|<span data-ttu-id="03b79-3745">Push-размер в байтах, тип значения в качестве `unsigned int32`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3745">Push the size, in bytes, of a value type as an `unsigned int32`.</span></span>|  
  
 <span data-ttu-id="03b79-3746">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3746">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3747">Размер (в байтах) заданного типа значения (`valType`) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3747">The size (in bytes) of the supplied value type (`valType`) is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3748">`valType` должен быть маркер метаданных ( `typeref` или `typedef`), указывающий тип значения, ссылочный тип или параметр универсального типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3748">`valType` must be a metadata token (a `typeref` or `typedef`) that specifies a value type, reference type, or generic type parameter.</span></span>  
  
 <span data-ttu-id="03b79-3749">Для ссылочного типа возвращаемый размер — размер ссылочные значения соответствующего типа (4 байта в 32-разрядных системах), не размер данных, хранящихся в объектах, на который ссылается значение ссылки.</span><span class="sxs-lookup"><span data-stu-id="03b79-3749">For a reference type, the size returned is the size of a reference value of the corresponding type (4 bytes on 32-bit systems), not the size of the data stored in objects referred to by the reference value.</span></span> <span data-ttu-id="03b79-3750">Параметр универсального типа может использоваться только в теле типа или метода, который определяет его.</span><span class="sxs-lookup"><span data-stu-id="03b79-3750">A generic type parameter can be used only in the body of the type or method that defines it.</span></span> <span data-ttu-id="03b79-3751">При создании экземпляра типа или метода, параметр универсального типа заменяется типом значения или ссылочным типом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3751">When that type or method is instantiated, the generic type parameter is replaced by a value type or reference type.</span></span>  
  
 <span data-ttu-id="03b79-3752">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `sizeof` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3752">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sizeof` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3753">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3753">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Starg">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3754">Сохраняет значение, находящееся на вершине стека вычислений, в ячейке аргумента с заданным индексом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3754">Stores the value on top of the evaluation stack in the argument slot at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3755">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3755">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3756">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3756">Format</span></span>|<span data-ttu-id="03b79-3757">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3757">Assembly Format</span></span>|<span data-ttu-id="03b79-3758">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3758">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3759">FE 0B &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3759">FE 0B < `unsigned int16` ></span></span>|<span data-ttu-id="03b79-3760">starg `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-3760">starg `num`</span></span>|<span data-ttu-id="03b79-3761">Извлекает верхнее значение из стека и сохраняет его в ячейке аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3761">Pops the top value from the stack and stores it in argument slot `num`.</span></span>|  
  
 <span data-ttu-id="03b79-3762">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3762">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3763">Значение, находящееся на вершине стека извлекается и помещается в ячейке аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3763">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="03b79-3764">`starg` Инструкция извлекает значение из стека и помещает его в ячейке аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3764">The `starg` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="03b79-3765">Тип значения должен соответствовать типу аргумента, указанному в подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3765">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-3766">Для процедуры, которые принимают список аргументов переменной `starg` инструкция может использоваться только для исходных фиксированных аргументов, не указанные в переменной частью сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="03b79-3766">For procedures that take a variable argument list, the `starg` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="03b79-3767">В случае аргументы, которые содержат целочисленное значение меньше 4 байтов, значение усекается при их перемещении из стека в аргумент.</span><span class="sxs-lookup"><span data-stu-id="03b79-3767">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="03b79-3768">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3768">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-3769">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `starg` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3769">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3770">ILGenerator.Emit (OpCode, короткое)</span><span class="sxs-lookup"><span data-stu-id="03b79-3770">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Starg_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Starg_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Starg_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Starg_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Starg_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Starg_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3771">Сохраняет значение, находящееся на вершине стека вычислений, в ячейке аргумента с заданным индексом (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-3771">Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3772">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3772">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3773">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3773">Format</span></span>|<span data-ttu-id="03b79-3774">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3774">Assembly Format</span></span>|<span data-ttu-id="03b79-3775">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3775">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3776">10 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3776">10 < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-3777">starg.s `num`</span><span class="sxs-lookup"><span data-stu-id="03b79-3777">starg.s `num`</span></span>|<span data-ttu-id="03b79-3778">Извлекает верхнее значение из стека и сохраняет его в ячейке аргумента `num`, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-3778">Pops the top value from the stack and stores it in argument slot `num`, short form.</span></span>|  
  
 <span data-ttu-id="03b79-3779">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3779">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3780">Значение, находящееся на вершине стека извлекается и помещается в ячейке аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3780">The value currently on top of the stack is popped and placed in argument slot `num`.</span></span>  
  
 <span data-ttu-id="03b79-3781">`starg.s` Инструкция извлекает значение из стека и помещает его в ячейке аргумента `num`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3781">The `starg.s` instruction pops a value from the stack and places it in argument slot `num`.</span></span> <span data-ttu-id="03b79-3782">Тип значения должен соответствовать типу аргумента, указанному в подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3782">The type of the value must match the type of the argument, as specified in the current method's signature.</span></span>  
  
 <span data-ttu-id="03b79-3783">`starg.s` Инструкция обеспечивает эффективную кодировку для использования с первых 256 аргументов.</span><span class="sxs-lookup"><span data-stu-id="03b79-3783">The `starg.s` instruction provides an efficient encoding for use with the first 256 arguments.</span></span>  
  
 <span data-ttu-id="03b79-3784">Для процедуры, которые принимают список аргументов переменной `starg.s` инструкция может использоваться только для исходных фиксированных аргументов, не указанные в переменной частью сигнатуры.</span><span class="sxs-lookup"><span data-stu-id="03b79-3784">For procedures that take a variable argument list, the `starg.s` instruction can be used only for the initial fixed arguments, not those in the variable part of the signature.</span></span>  
  
 <span data-ttu-id="03b79-3785">В случае аргументы, которые содержат целочисленное значение меньше 4 байтов, значение усекается при их перемещении из стека в аргумент.</span><span class="sxs-lookup"><span data-stu-id="03b79-3785">Performing a store into arguments that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the argument.</span></span> <span data-ttu-id="03b79-3786">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-3786">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-3787">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `starg.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3787">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `starg.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3788">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-3788">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3789">Заменяет элемент массива с заданным индексом на значение в стеке вычислений, тип которого указан в инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3789">Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3790">В следующей таблице перечислены инструкции по шестнадцатеричном формате и формате сборки промежуточного языка MSIL, Microsoft, а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3790">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3791">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3791">Format</span></span>|<span data-ttu-id="03b79-3792">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3792">Assembly Format</span></span>|<span data-ttu-id="03b79-3793">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3793">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3794">A4 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3794">A4 < `T` ></span></span>|<span data-ttu-id="03b79-3795">stelem `typeTok`</span><span class="sxs-lookup"><span data-stu-id="03b79-3795">stelem `typeTok`</span></span>|<span data-ttu-id="03b79-3796">Заменяет элемент массива с заданным индексом на значение типа `typeTok` в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3796">Replaces the array element at the supplied index with a value of type `typeTok` on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3797">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3797">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3798">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3798">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3799">Значение индекса `index`, на элемент в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3799">An index value, `index`, to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3800">Значение типа, указанного в инструкции помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3800">A value of the type specified in the instruction is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3801">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3801">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3802">`stelem` Инструкция заменяет значение элемента с заданным индексом (с нуля) в одномерном массиве `array` со значением.</span><span class="sxs-lookup"><span data-stu-id="03b79-3802">The `stelem` instruction replaces the value of the element at the supplied zero-based index in the one-dimensional array `array` with the value.</span></span> <span data-ttu-id="03b79-3803">Значение имеет тип, указанный в токен `typeTok` в инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-3803">The value has the type specified by the token `typeTok` in the instruction.</span></span>  
  
 <span data-ttu-id="03b79-3804">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3804">Arrays are objects, and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3805">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3805">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3806"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3806"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3807"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3807"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3808"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3808"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3809">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3809">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3810">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-3810">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3811">Заменяет элемент массива с заданным индексом на значение <see langword="native int" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3811">Replaces the array element at a given index with the <see langword="native int" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3812">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3812">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3813">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3813">Format</span></span>|<span data-ttu-id="03b79-3814">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3814">Assembly Format</span></span>|<span data-ttu-id="03b79-3815">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3815">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3816">9Б</span><span class="sxs-lookup"><span data-stu-id="03b79-3816">9B</span></span>|<span data-ttu-id="03b79-3817">stelem.i</span><span class="sxs-lookup"><span data-stu-id="03b79-3817">stelem.i</span></span>|<span data-ttu-id="03b79-3818">Заменяет элемент массива с заданным индексом `native int` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3818">Replaces an array element at the supplied index with the `native int` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3819">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3819">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3820">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3820">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3821">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3821">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3822">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3822">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3823">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3823">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3824">`stelem.i` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `native int` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3824">The `stelem.i` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `native int` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3825">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3825">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3826">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3826">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3827"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3827"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3828"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3828"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3829"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3829"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3830">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.i` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3830">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3831">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3831">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3832">Заменяет элемент массива с заданным индексом на значение <see langword="int8" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3832">Replaces the array element at a given index with the <see langword="int8" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3833">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3833">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3834">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3834">Format</span></span>|<span data-ttu-id="03b79-3835">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3835">Assembly Format</span></span>|<span data-ttu-id="03b79-3836">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3836">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3837">9C</span><span class="sxs-lookup"><span data-stu-id="03b79-3837">9C</span></span>|<span data-ttu-id="03b79-3838">stelem.i1</span><span class="sxs-lookup"><span data-stu-id="03b79-3838">stelem.i1</span></span>|<span data-ttu-id="03b79-3839">Заменяет элемент массива с заданным индексом `int8` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3839">Replaces an array element at the supplied index with the `int8` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3840">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3840">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3841">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3841">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3842">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3842">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3843">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3843">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3844">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3844">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3845">`stelem.i1` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `int8` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3845">The `stelem.i1` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int8` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3846">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3846">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3847">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3847">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3848"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3848"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3849"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3849"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3850"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3850"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3851">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.i1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3851">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3852">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3852">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3853">Заменяет элемент массива с заданным индексом на значение <see langword="int16" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3853">Replaces the array element at a given index with the <see langword="int16" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3854">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3854">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3855">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3855">Format</span></span>|<span data-ttu-id="03b79-3856">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3856">Assembly Format</span></span>|<span data-ttu-id="03b79-3857">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3857">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3858">9D</span><span class="sxs-lookup"><span data-stu-id="03b79-3858">9D</span></span>|<span data-ttu-id="03b79-3859">stelem.i2</span><span class="sxs-lookup"><span data-stu-id="03b79-3859">stelem.i2</span></span>|<span data-ttu-id="03b79-3860">Заменяет элемент массива с заданным индексом `int16` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3860">Replaces an array element at the supplied index with the `int16` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3861">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3861">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3862">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3862">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3863">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3863">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3864">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3864">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3865">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3865">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3866">`stelem.i2` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `int16` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3866">The `stelem.i2` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int16` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3867">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3867">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3868">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3868">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3869"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3869"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3870"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3870"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3871"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3871"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3872">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.i2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3872">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3873">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3873">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3874">Заменяет элемент массива с заданным индексом на значение <see langword="int32" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3874">Replaces the array element at a given index with the <see langword="int32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3875">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3875">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3876">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3876">Format</span></span>|<span data-ttu-id="03b79-3877">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3877">Assembly Format</span></span>|<span data-ttu-id="03b79-3878">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3878">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3879">9E</span><span class="sxs-lookup"><span data-stu-id="03b79-3879">9E</span></span>|<span data-ttu-id="03b79-3880">stelem.i4</span><span class="sxs-lookup"><span data-stu-id="03b79-3880">stelem.i4</span></span>|<span data-ttu-id="03b79-3881">Заменяет элемент массива с заданным индексом `int32` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3881">Replaces an array element at the supplied index with the `int32` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3882">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3882">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3883">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3883">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3884">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3884">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3885">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3885">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3886">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3886">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3887">`stelem.i4` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `int32` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3887">The `stelem.i4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3888">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3888">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3889">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3889">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3890"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3890"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3891"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3891"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3892"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3892"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3893">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3893">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3894">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3894">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3895">Заменяет элемент массива с заданным индексом на значение <see langword="int64" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3895">Replaces the array element at a given index with the <see langword="int64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3896">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3896">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3897">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3897">Format</span></span>|<span data-ttu-id="03b79-3898">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3898">Assembly Format</span></span>|<span data-ttu-id="03b79-3899">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3899">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3900">9F</span><span class="sxs-lookup"><span data-stu-id="03b79-3900">9F</span></span>|<span data-ttu-id="03b79-3901">stelem.I8</span><span class="sxs-lookup"><span data-stu-id="03b79-3901">stelem.i8</span></span>|<span data-ttu-id="03b79-3902">Заменяет элемент массива с заданным индексом `int64` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3902">Replaces an array element at the supplied index with the `int64` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3903">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3903">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3904">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3904">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3905">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3905">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3906">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3906">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3907">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3907">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3908">`stelem.i8` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `int64` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3908">The `stelem.i8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `int64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3909">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3909">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3910">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3910">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3911"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3911"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3912"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3912"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3913"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3913"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3914">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3914">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3915">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3915">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3916">Заменяет элемент массива с заданным индексом на значение <see langword="float32" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3916">Replaces the array element at a given index with the <see langword="float32" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3917">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3917">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3918">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3918">Format</span></span>|<span data-ttu-id="03b79-3919">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3919">Assembly Format</span></span>|<span data-ttu-id="03b79-3920">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3920">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3921">A0</span><span class="sxs-lookup"><span data-stu-id="03b79-3921">A0</span></span>|<span data-ttu-id="03b79-3922">stelem.r4</span><span class="sxs-lookup"><span data-stu-id="03b79-3922">stelem.r4</span></span>|<span data-ttu-id="03b79-3923">Заменяет элемент массива с заданным индексом `float32` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3923">Replaces an array element at the supplied index with the `float32` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3924">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3924">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3925">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3925">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3926">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3926">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3927">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3927">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3928">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3928">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3929">`stelem.r4` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `float32` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3929">The `stelem.r4` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float32` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3930">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3930">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3931">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3931">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3932"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3932"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3933"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3933"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3934"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3934"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3935">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.r4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3935">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3936">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3936">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3937">Заменяет элемент массива с заданным индексом на значение <see langword="float64" />, находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3937">Replaces the array element at a given index with the <see langword="float64" /> value on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3938">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3938">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3939">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3939">Format</span></span>|<span data-ttu-id="03b79-3940">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3940">Assembly Format</span></span>|<span data-ttu-id="03b79-3941">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3941">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3942">A1</span><span class="sxs-lookup"><span data-stu-id="03b79-3942">A1</span></span>|<span data-ttu-id="03b79-3943">stelem.r8</span><span class="sxs-lookup"><span data-stu-id="03b79-3943">stelem.r8</span></span>|<span data-ttu-id="03b79-3944">Заменяет элемент массива с заданным индексом `float64` значение в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3944">Replaces an array element at the supplied index with the `float64` value on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3945">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3945">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3946">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3946">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3947">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3947">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3948">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3948">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3949">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3949">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3950">`stelem.r8` Инструкция заменяет значение элемента `index` в одномерном массиве `array` с `float64` значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3950">The `stelem.r8` instruction replaces the value of the element `index` in the one-dimensional array `array` with the `float64` value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3951">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3951">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3952">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3952">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3953"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3953"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3954"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3954"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3955"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3955"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3956">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.r8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3956">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.r8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3957">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3957">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stelem_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stelem_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stelem_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stelem_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stelem_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stelem_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3958">Заменяет элемент массива с заданным индексом на значение object ref (тип <see langword="O" />), находящееся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-3958">Replaces the array element at a given index with the object ref value (type <see langword="O" />) on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3959">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3959">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3960">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3960">Format</span></span>|<span data-ttu-id="03b79-3961">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3961">Assembly Format</span></span>|<span data-ttu-id="03b79-3962">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3962">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3963">A2</span><span class="sxs-lookup"><span data-stu-id="03b79-3963">A2</span></span>|<span data-ttu-id="03b79-3964">stelem.ref</span><span class="sxs-lookup"><span data-stu-id="03b79-3964">stelem.ref</span></span>|<span data-ttu-id="03b79-3965">Заменяет элемент массива с заданным индексом `ref` значение (типа `O`) в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-3965">Replaces an array element at the supplied index with the `ref` value (type `O`) on the stack.</span></span>|  
  
 <span data-ttu-id="03b79-3966">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3966">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3967">Ссылка на объект в массив, `array`, помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3967">An object reference to an array, `array`, is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3968">Допустимый индекс элемента в `array` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3968">A valid index to an element in `array` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3969">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3969">A value is pushed onto the stack.</span></span>  
  
4.  <span data-ttu-id="03b79-3970">Значение, индекс и ссылка на массив извлекаются из стека; значение помещается в элемент массива по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="03b79-3970">The value, the index, and the array reference are popped from the stack; the value is put into the array element at the given index.</span></span>  
  
 <span data-ttu-id="03b79-3971">`stelem.ref` Инструкция заменяет значение элемента с заданным индексом в одномерном массиве `array` с `ref` (типа `O`) значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3971">The `stelem.ref` instruction replaces the value of the element at the supplied index in the one-dimensional array `array` with the `ref` (type `O`) value pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-3972">Массивы являются объектами, поэтому они представлены в значение типа `O`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3972">Arrays are objects and hence represented by a value of type `O`.</span></span> <span data-ttu-id="03b79-3973">Индекс является типом `native int`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3973">The index is type `native int`.</span></span>  
  
 <span data-ttu-id="03b79-3974">Обратите внимание, что `stelem.ref` неявно приводит к заданному типу элемента `array` перед присвоением значения элементу массива.</span><span class="sxs-lookup"><span data-stu-id="03b79-3974">Note that `stelem.ref` implicitly casts the supplied value to the element type of `array` before assigning the value to the array element.</span></span> <span data-ttu-id="03b79-3975">Это приведение может завершиться ошибкой, даже для проверяемого кода.</span><span class="sxs-lookup"><span data-stu-id="03b79-3975">This cast can fail, even for verified code.</span></span> <span data-ttu-id="03b79-3976">Таким образом `stelem.ref` инструкция может вызвать исключение <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="03b79-3976">Thus the `stelem.ref` instruction can throw <xref:System.InvalidCastException>.</span></span> <span data-ttu-id="03b79-3977">Для одномерных массивов с индексацией не от нуля и для многомерных массивов <xref:System.Array> класс предоставляет <xref:System.Array.SetValue%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="03b79-3977">For one-dimensional arrays that aren't zero-based and for multidimensional arrays, the <xref:System.Array> class provides a <xref:System.Array.SetValue%2A> method.</span></span>  
  
 <span data-ttu-id="03b79-3978"><xref:System.NullReferenceException> возникает, если `array` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-3978"><xref:System.NullReferenceException> is thrown if `array` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-3979"><xref:System.IndexOutOfRangeException> возникает, если `index` отрицательным или больше, чем границы из `array`.</span><span class="sxs-lookup"><span data-stu-id="03b79-3979"><xref:System.IndexOutOfRangeException> is thrown if `index` is negative, or larger than the bound of `array`.</span></span>  
  
 <span data-ttu-id="03b79-3980"><xref:System.ArrayTypeMismatchException> возникает, если `array` не содержит элементов требуемого типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-3980"><xref:System.ArrayTypeMismatchException> is thrown if `array` does not hold elements of the required type.</span></span>  
  
 <span data-ttu-id="03b79-3981">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stelem.ref` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-3981">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stelem.ref` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-3982">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-3982">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-3983">Заменяет значение в поле объекта, по ссылке на объект или указателю, на новое значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-3983">Replaces the value stored in the field of an object reference or pointer with a new value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-3984">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-3984">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-3985">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-3985">Format</span></span>|<span data-ttu-id="03b79-3986">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-3986">Assembly Format</span></span>|<span data-ttu-id="03b79-3987">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-3987">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-3988">7D < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-3988">7D < `T` ></span></span>|<span data-ttu-id="03b79-3989">stfld `field`</span><span class="sxs-lookup"><span data-stu-id="03b79-3989">stfld `field`</span></span>|<span data-ttu-id="03b79-3990">Заменяет значение `field` объекта с новым значением.</span><span class="sxs-lookup"><span data-stu-id="03b79-3990">Replaces the value of `field` of the object with a new value.</span></span>|  
  
 <span data-ttu-id="03b79-3991">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-3991">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-3992">Ссылка на объект или указатель помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3992">An object reference or pointer is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-3993">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-3993">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-3994">Значение и ссылка или указатель на объект извлекаются из стека; значение `field` в объекте заменяется указанное значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-3994">The value and the object reference/pointer are popped from the stack; the value of `field` in the object is replaced with the supplied value.</span></span>  
  
 <span data-ttu-id="03b79-3995">`stfld` Инструкция заменяет значение поля объекта (типа `O`) или через указатель (типа `native int`, `&`, или `*`) с заданным значением.</span><span class="sxs-lookup"><span data-stu-id="03b79-3995">The `stfld` instruction replaces the value of a field of an object (type `O`) or via a pointer (type `native int`, `&`, or `*`) with a given value.</span></span> <span data-ttu-id="03b79-3996">`Field` — Это маркер метаданных, который ссылается на член ссылки на поле.</span><span class="sxs-lookup"><span data-stu-id="03b79-3996">`Field` is a metadata token that refers to a field member reference.</span></span> <span data-ttu-id="03b79-3997">`stfld` Инструкции может иметь префикс из одной или обеих <xref:System.Reflection.Emit.OpCodes.Unaligned> и <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="03b79-3997">The `stfld` instruction can have a prefix of either or both of <xref:System.Reflection.Emit.OpCodes.Unaligned> and <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="03b79-3998"><xref:System.NullReferenceException> возникает, если ссылка на объект или указатель является пустой ссылкой и нестатического поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-3998"><xref:System.NullReferenceException> is thrown if the object reference or pointer is a null reference and the field isn't static.</span></span>  
  
 <span data-ttu-id="03b79-3999"><xref:System.MissingFieldException> возникает, если `field` не найден в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-3999"><xref:System.MissingFieldException> is thrown if `field` is not found in the metadata.</span></span> <span data-ttu-id="03b79-4000">Обычно это проверяется инструкции промежуточного языка MSIL (Microsoft) преобразуется в машинный код, не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4000">This is typically checked when the Microsoft Intermediate Language (MSIL) instruction is converted to native code, not at runtime.</span></span>  
  
 <span data-ttu-id="03b79-4001">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stfld` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4001">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stfld` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4002">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-4002">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4003">Сохраняет значение с типом <see langword="native int" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4003">Stores a value of type <see langword="native int" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4004">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4004">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4005">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4005">Format</span></span>|<span data-ttu-id="03b79-4006">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4006">Assembly Format</span></span>|<span data-ttu-id="03b79-4007">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4007">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4008">DF</span><span class="sxs-lookup"><span data-stu-id="03b79-4008">DF</span></span>|<span data-ttu-id="03b79-4009">stind.i</span><span class="sxs-lookup"><span data-stu-id="03b79-4009">stind.i</span></span>|<span data-ttu-id="03b79-4010">Магазины `native int` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4010">Stores a `native int` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4011">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4011">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4012">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4012">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4013">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4013">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4014">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4014">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4015">`stind.i` Хранилищ инструкции `native int` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4015">The `stind.i` instruction stores a `native int` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4016">Требует обеспечения безопасности типов, `stind.i` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4016">Type safe operation requires that the `stind.i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4017">Операция `stind.i` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4017">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4018"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4018"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4019">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.i` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4019">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4020">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4020">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4021">Сохраняет значение с типом <see langword="int8" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4021">Stores a value of type <see langword="int8" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4022">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4022">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4023">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4023">Format</span></span>|<span data-ttu-id="03b79-4024">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4024">Assembly Format</span></span>|<span data-ttu-id="03b79-4025">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4025">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4026">52</span><span class="sxs-lookup"><span data-stu-id="03b79-4026">52</span></span>|<span data-ttu-id="03b79-4027">stind.i1</span><span class="sxs-lookup"><span data-stu-id="03b79-4027">stind.i1</span></span>|<span data-ttu-id="03b79-4028">Магазины `int8` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4028">Stores an `int8` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4029">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4029">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4030">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4030">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4031">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4031">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4032">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4032">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4033">`stind.i1` Хранилищ инструкции `int8` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4033">The `stind.i1` instruction stores an `int8` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4034">Требует обеспечения безопасности типов, `stind.i1` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4034">Type safe operation requires that the `stind.i1` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4035">Операция `stind.i1` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4035">The operation of the `stind.i1` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4036"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4036"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4037">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.i1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4037">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4038">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4038">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4039">Сохраняет значение с типом <see langword="int16" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4039">Stores a value of type <see langword="int16" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4040">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4040">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4041">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4041">Format</span></span>|<span data-ttu-id="03b79-4042">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4042">Assembly Format</span></span>|<span data-ttu-id="03b79-4043">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4043">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4044">53</span><span class="sxs-lookup"><span data-stu-id="03b79-4044">53</span></span>|<span data-ttu-id="03b79-4045">stind.I2</span><span class="sxs-lookup"><span data-stu-id="03b79-4045">stind.i2</span></span>|<span data-ttu-id="03b79-4046">Магазины `int16` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4046">Stores an `int16` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4047">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4047">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4048">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4048">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4049">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4049">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4050">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4050">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4051">`stind.i2` Хранилищ инструкции `int16` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4051">The `stind.i2` instruction stores an `int16` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4052">Требует обеспечения безопасности типов, `stind.2i` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4052">Type safe operation requires that the `stind.2i` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4053">Операция `stind.i2` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4053">The operation of the `stind.i2` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4054"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4054"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4055">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.i2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4055">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4056">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4056">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4057">Сохраняет значение с типом <see langword="int32" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4057">Stores a value of type <see langword="int32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4058">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4058">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4059">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4059">Format</span></span>|<span data-ttu-id="03b79-4060">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4060">Assembly Format</span></span>|<span data-ttu-id="03b79-4061">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4061">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4062">54</span><span class="sxs-lookup"><span data-stu-id="03b79-4062">54</span></span>|<span data-ttu-id="03b79-4063">stind.i4</span><span class="sxs-lookup"><span data-stu-id="03b79-4063">stind.i4</span></span>|<span data-ttu-id="03b79-4064">Магазины `int32` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4064">Stores an `int32` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4065">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4065">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4066">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4066">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4067">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4067">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4068">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4068">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4069">`stind.i4` Хранилищ инструкции `int32` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4069">The `stind.i4` instruction stores an `int32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4070">Требует обеспечения безопасности типов, `stind.i4` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4070">Type safe operation requires that the `stind.i4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4071">Операция `stind.i4` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4071">The operation of the `stind.i4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4072"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4072"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4073">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.i4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4073">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4074">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4074">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_I8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_I8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_I8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_I8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_I8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_I8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4075">Сохраняет значение с типом <see langword="int64" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4075">Stores a value of type <see langword="int64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4076">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4076">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4077">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4077">Format</span></span>|<span data-ttu-id="03b79-4078">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4078">Assembly Format</span></span>|<span data-ttu-id="03b79-4079">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4079">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4080">55</span><span class="sxs-lookup"><span data-stu-id="03b79-4080">55</span></span>|<span data-ttu-id="03b79-4081">stind.I8</span><span class="sxs-lookup"><span data-stu-id="03b79-4081">stind.i8</span></span>|<span data-ttu-id="03b79-4082">Магазины `int64` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4082">Stores an `int64` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4083">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4083">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4084">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4084">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4085">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4085">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4086">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4086">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4087">`stind.i8` Хранилищ инструкции `int64` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4087">The `stind.i8` instruction stores an `int64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4088">Требует обеспечения безопасности типов, `stind.i8` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4088">Type safe operation requires that the `stind.i8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4089">Операция `stind.i` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4089">The operation of the `stind.i` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4090"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4090"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4091">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.i8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4091">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.i8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4092">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4092">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R4">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R4" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R4 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R4;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R4 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R4" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4093">Сохраняет значение с типом <see langword="float32" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4093">Stores a value of type <see langword="float32" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4094">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4094">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4095">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4095">Format</span></span>|<span data-ttu-id="03b79-4096">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4096">Assembly Format</span></span>|<span data-ttu-id="03b79-4097">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4097">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4098">56</span><span class="sxs-lookup"><span data-stu-id="03b79-4098">56</span></span>|<span data-ttu-id="03b79-4099">stind.R4</span><span class="sxs-lookup"><span data-stu-id="03b79-4099">stind.r4</span></span>|<span data-ttu-id="03b79-4100">Магазины `float32` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4100">Stores a `float32` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4101">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4101">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4102">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4102">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4103">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4103">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4104">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4104">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4105">`stind.r4` Хранилищ инструкции `float32` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4105">The `stind.r4` instruction stores a `float32` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4106">Требует обеспечения безопасности типов, `stind.r4` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4106">Type safe operation requires that the `stind.r4` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4107">Операция `stind.r4` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4107">The operation of the `stind.r4` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4108"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4108"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4109">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.r4` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4109">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r4` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4110">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4110">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_R8">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_R8" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_R8 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_R8;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_R8 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_R8" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4111">Сохраняет значение с типом <see langword="float64" /> по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4111">Stores a value of type <see langword="float64" /> at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4112">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4112">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4113">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4113">Format</span></span>|<span data-ttu-id="03b79-4114">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4114">Assembly Format</span></span>|<span data-ttu-id="03b79-4115">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4115">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4116">57</span><span class="sxs-lookup"><span data-stu-id="03b79-4116">57</span></span>|<span data-ttu-id="03b79-4117">stind.R8</span><span class="sxs-lookup"><span data-stu-id="03b79-4117">stind.r8</span></span>|<span data-ttu-id="03b79-4118">Магазины `float64` значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4118">Stores a `float64` value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4119">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4119">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4120">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4120">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4121">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4121">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4122">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4122">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4123">`stind.r8` Хранилищ инструкции `float64` значение по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4123">The `stind.r8` instruction stores a `float64` value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4124">Требует обеспечения безопасности типов, `stind.r8` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4124">Type safe operation requires that the `stind.r8` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4125">Операция `stind.r8` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4125">The operation of the `stind.r8` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4126"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4126"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4127">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.r8` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4127">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.r8` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4128">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4128">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stind_Ref">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stind_Ref" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stind_Ref As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stind_Ref;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stind_Ref : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stind_Ref" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4129">Сохраняет значение ссылки на объект по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4129">Stores a object reference value at a supplied address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4130">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4130">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4131">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4131">Format</span></span>|<span data-ttu-id="03b79-4132">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4132">Assembly Format</span></span>|<span data-ttu-id="03b79-4133">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4133">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4134">51</span><span class="sxs-lookup"><span data-stu-id="03b79-4134">51</span></span>|<span data-ttu-id="03b79-4135">stind.ref</span><span class="sxs-lookup"><span data-stu-id="03b79-4135">stind.ref</span></span>|<span data-ttu-id="03b79-4136">Хранит ссылку на объект (тип `O`) значение по указанному адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4136">Stores an object reference (type `O`) value at a given address.</span></span>|  
  
 <span data-ttu-id="03b79-4137">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4137">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4138">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4138">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4139">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4139">A value is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4140">Значение и адресе извлекаются из стека; значение хранится по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4140">The value and the address are popped from the stack; the value is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4141">`stind.ref` Инструкция сохраняет значение ссылки на объект по указанному адресу (тип `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4141">The `stind.ref` instruction stores an object reference value at the supplied address (type `native int`, `*`, or `&`).</span></span>  
  
 <span data-ttu-id="03b79-4142">Требует обеспечения безопасности типов, `stind.ref` инструкция использоваться в соответствии с типом указателя.</span><span class="sxs-lookup"><span data-stu-id="03b79-4142">Type safe operation requires that the `stind.ref` instruction be used in a manner consistent with the type of the pointer.</span></span> <span data-ttu-id="03b79-4143">Операция `stind.ref` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4143">The operation of the `stind.ref` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4144"><xref:System.NullReferenceException> возникает, если `addr` естественным образом не выровнен для данного типа аргумента, который содержится в разрешении суффикс инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4144"><xref:System.NullReferenceException> is thrown if `addr` is not naturally aligned for the argument type implied by the instruction suffix.</span></span>  
  
 <span data-ttu-id="03b79-4145">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stind.ref` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4145">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stind.ref` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4146">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4146">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4147">Извлекает верхнее значение в стеке вычислений и сохраняет его в списке локальных переменных с заданным индексом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4147">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4148">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4148">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4149">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4149">Format</span></span>|<span data-ttu-id="03b79-4150">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4150">Assembly Format</span></span>|<span data-ttu-id="03b79-4151">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4151">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4152">FE 0E &LT; `unsigned int16` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4152">FE 0E < `unsigned int16` ></span></span>|<span data-ttu-id="03b79-4153">stloc `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-4153">stloc `index`</span></span>|<span data-ttu-id="03b79-4154">Извлекает значение из стека и сохраняет его в локальной переменной `index`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4154">Pops a value from the stack and stores it in local variable `index`.</span></span>|  
  
 <span data-ttu-id="03b79-4155">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4155">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4156">Значение извлекается из стека и помещается в локальную переменную `index`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4156">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="03b79-4157">`stloc` Инструкция извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с номером `index`, в которых локальные переменные являются пронумерованы от 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-4157">The `stloc` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="03b79-4158">Тип значения должен соответствовать тип локальной переменной, указанной в локальной подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4158">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="03b79-4159">Хранение в локальные переменные, содержащие целое число меньше длиной 4 байта, значение усекается при их перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4159">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="03b79-4160">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4160">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-4161">Правильные инструкции промежуточного языка MSIL (Microsoft) требует `index` быть допустимый локальный индекс.</span><span class="sxs-lookup"><span data-stu-id="03b79-4161">Correct Microsoft Intermediate Language (MSIL) instructions require that `index` be a valid local index.</span></span> <span data-ttu-id="03b79-4162">Для `stloc` инструкции, `index` должен находиться в диапазоне от 0 до 65 534 включительно (в частности, 65535 не существует).</span><span class="sxs-lookup"><span data-stu-id="03b79-4162">For the `stloc` instruction, `index` must lie in the range 0 to 65534 inclusive (specifically, 65535 is not valid).</span></span> <span data-ttu-id="03b79-4163">За исключением 65535 связано pragmatic: возможны реализации, использующие 2-байтовое целое число для отслеживания как индекс локальной переменной, а также общее число "Локальные" для данного метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4163">The reason for excluding 65535 is pragmatic: likely implementations will use a 2-byte integer to track both a local's index, as well as the total number of locals for a given method.</span></span> <span data-ttu-id="03b79-4164">Если индекс 65 535 считался действительным, потребуется расширить целое число для отслеживания числа локальных переменных в этом методе.</span><span class="sxs-lookup"><span data-stu-id="03b79-4164">If an index of 65535 had been made valid, it would require a wider integer to track the number of locals in such a method.</span></span>  
  
 <span data-ttu-id="03b79-4165">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `stloc` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4165">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4166">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="03b79-4166">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="03b79-4167">ILGenerator.Emit (OpCode, короткое)</span><span class="sxs-lookup"><span data-stu-id="03b79-4167">ILGenerator.Emit(OpCode, short)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_0">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_0" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_0 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_0;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_0 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_0" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4168">Извлекает верхнее значение в стеке вычислений и сохраняет его в списке локальных переменных с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-4168">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4169">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4169">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4170">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4170">Format</span></span>|<span data-ttu-id="03b79-4171">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4171">Assembly Format</span></span>|<span data-ttu-id="03b79-4172">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4172">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4173">0A</span><span class="sxs-lookup"><span data-stu-id="03b79-4173">0A</span></span>|<span data-ttu-id="03b79-4174">stloc.0</span><span class="sxs-lookup"><span data-stu-id="03b79-4174">stloc.0</span></span>|<span data-ttu-id="03b79-4175">Извлекает значение из стека в локальную переменную 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-4175">Pops a value from the stack into local variable 0.</span></span>|  
  
 <span data-ttu-id="03b79-4176">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4176">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4177">Значение извлекается из стека и помещается в локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-4177">A value is popped off of the stack and placed in the local variable indexed by 0.</span></span>  
  
 <span data-ttu-id="03b79-4178">`stloc.0` Инструкция извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-4178">The `stloc.0` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 0.</span></span> <span data-ttu-id="03b79-4179">Тип значения должен соответствовать тип локальной переменной, указанной в локальной подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4179">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="03b79-4180">`stloc.0` является особенно эффективной кодировки для сохранения значений в локальной переменной 0.</span><span class="sxs-lookup"><span data-stu-id="03b79-4180">`stloc.0` is an especially efficient encoding for storing values in local variable 0.</span></span>  
  
 <span data-ttu-id="03b79-4181">Хранение в локальные переменные, содержащие целое число меньше длиной 4 байта, значение усекается при их перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4181">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="03b79-4182">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4182">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-4183">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stloc.0` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4183">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.0` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4184">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4184">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_1">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_1" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_1 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_1;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_1 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4185">Извлекает верхнее значение из стека вычислений и сохраняет его в списке локальных переменных с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-4185">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4186">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4186">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4187">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4187">Format</span></span>|<span data-ttu-id="03b79-4188">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4188">Assembly Format</span></span>|<span data-ttu-id="03b79-4189">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4189">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4190">0B</span><span class="sxs-lookup"><span data-stu-id="03b79-4190">0B</span></span>|<span data-ttu-id="03b79-4191">stloc.1</span><span class="sxs-lookup"><span data-stu-id="03b79-4191">stloc.1</span></span>|<span data-ttu-id="03b79-4192">Извлекает значение из стека в локальной переменной 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-4192">Pops a value from the stack into local variable 1.</span></span>|  
  
 <span data-ttu-id="03b79-4193">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4193">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4194">Значение извлекается из стека и помещается в локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-4194">A value is popped off of the stack and placed in the local variable indexed by 1.</span></span>  
  
 <span data-ttu-id="03b79-4195">`stloc.1` Инструкция извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-4195">The `stloc.1` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 1.</span></span> <span data-ttu-id="03b79-4196">Тип значения должен соответствовать тип локальной переменной, указанной в локальной подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4196">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="03b79-4197">`stloc.1` является особенно эффективной кодировки для сохранения значений в локальной переменной 1.</span><span class="sxs-lookup"><span data-stu-id="03b79-4197">`stloc.1` is an especially efficient encoding for storing values in local variable 1.</span></span>  
  
 <span data-ttu-id="03b79-4198">Хранение в локальные переменные, содержащие целое число меньше длиной 4 байта, значение усекается при их перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4198">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="03b79-4199">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4199">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-4200">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stloc.1` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4200">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.1` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4201">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4201">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_2">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_2" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_2 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_2;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_2 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4202">Извлекает верхнее значение из стека вычислений и сохраняет его в списке локальных переменных с индексом 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-4202">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4203">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4203">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4204">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4204">Format</span></span>|<span data-ttu-id="03b79-4205">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4205">Assembly Format</span></span>|<span data-ttu-id="03b79-4206">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4206">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4207">0C</span><span class="sxs-lookup"><span data-stu-id="03b79-4207">0C</span></span>|<span data-ttu-id="03b79-4208">stloc.2</span><span class="sxs-lookup"><span data-stu-id="03b79-4208">stloc.2</span></span>|<span data-ttu-id="03b79-4209">Извлекает значение из стека в локальную переменную 2</span><span class="sxs-lookup"><span data-stu-id="03b79-4209">Pops a value from the stack into local variable 2</span></span>|  
  
 <span data-ttu-id="03b79-4210">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4210">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4211">Значение извлекается из стека и помещается в локальную переменную, индексированных по 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-4211">A value is popped off of the stack and placed in the local variable indexed by 2.</span></span>  
  
 <span data-ttu-id="03b79-4212">`stloc.2` Инструкция извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную, индексированных по 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-4212">The `stloc.2` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 2.</span></span> <span data-ttu-id="03b79-4213">Тип значения должен соответствовать тип локальной переменной, указанной в локальной подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4213">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="03b79-4214">`stloc.2` является особенно эффективной кодировки для сохранения значений в локальной переменной 2.</span><span class="sxs-lookup"><span data-stu-id="03b79-4214">`stloc.2` is an especially efficient encoding for storing values in local variable 2.</span></span>  
  
 <span data-ttu-id="03b79-4215">Хранение в локальные переменные, содержащие целое число меньше длиной 4 байта, значение усекается при их перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4215">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="03b79-4216">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4216">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-4217">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stloc.2` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4217">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.2` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4218">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4218">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_3">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_3" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_3 As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_3;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_3 : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4219">Извлекает верхнее значение из стека вычислений и сохраняет его в списке локальных переменных с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-4219">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4220">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4220">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4221">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4221">Format</span></span>|<span data-ttu-id="03b79-4222">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4222">Assembly Format</span></span>|<span data-ttu-id="03b79-4223">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4223">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4224">0D</span><span class="sxs-lookup"><span data-stu-id="03b79-4224">0D</span></span>|<span data-ttu-id="03b79-4225">stloc.3</span><span class="sxs-lookup"><span data-stu-id="03b79-4225">stloc.3</span></span>|<span data-ttu-id="03b79-4226">Извлекает значение из стека в локальной переменной 3</span><span class="sxs-lookup"><span data-stu-id="03b79-4226">Pops a value from the stack into local variable 3</span></span>|  
  
 <span data-ttu-id="03b79-4227">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4227">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4228">Значение извлекается из стека и помещается в локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-4228">A value is popped off of the stack and placed in the local variable indexed by 3.</span></span>  
  
 <span data-ttu-id="03b79-4229">`stloc.3` Инструкция извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с индексом 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-4229">The `stloc.3` instruction pops the top value off the evaluation stack and moves it into the local variable indexed by 3.</span></span> <span data-ttu-id="03b79-4230">Тип значения должен соответствовать тип локальной переменной, указанной в локальной подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4230">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="03b79-4231">`stloc.3` является особенно эффективной кодировки для сохранения значений в локальной переменной 3.</span><span class="sxs-lookup"><span data-stu-id="03b79-4231">`stloc.3` is an especially efficient encoding for storing values in local variable 3.</span></span>  
  
 <span data-ttu-id="03b79-4232">Хранение в локальные переменные, содержащие целое число меньше длиной 4 байта, значение усекается при их перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4232">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="03b79-4233">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4233">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-4234">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stloc.3` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4234">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stloc.3` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4235">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4235">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stloc_S">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stloc_S" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stloc_S As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stloc_S;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stloc_S : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stloc_S" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4236">Извлекает верхнее значение в стеке вычислений и сохраняет его в списке локальных переменных с индексом <paramref name="index" /> (короткая форма).</span><span class="sxs-lookup"><span data-stu-id="03b79-4236">Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <paramref name="index" /> (short form).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4237">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4237">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4238">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4238">Format</span></span>|<span data-ttu-id="03b79-4239">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4239">Assembly Format</span></span>|<span data-ttu-id="03b79-4240">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4240">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4241">13 < `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4241">13 < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-4242">stloc.s `index`</span><span class="sxs-lookup"><span data-stu-id="03b79-4242">stloc.s `index`</span></span>|<span data-ttu-id="03b79-4243">Извлекает значение из стека и сохраняет его в локальной переменной `index`, краткая форма.</span><span class="sxs-lookup"><span data-stu-id="03b79-4243">Pops a value from the stack and stores it in local variable `index`, short form.</span></span>|  
  
 <span data-ttu-id="03b79-4244">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4244">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4245">Значение извлекается из стека и помещается в локальную переменную `index`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4245">A value is popped off of the stack and placed in local variable `index`.</span></span>  
  
 <span data-ttu-id="03b79-4246">`stloc.s` Инструкция извлекает верхнее значение из стека вычислений и перемещает его в локальную переменную с номером `index`, в которых локальные переменные являются пронумерованы от 0 и более поздних версий.</span><span class="sxs-lookup"><span data-stu-id="03b79-4246">The `stloc.s` instruction pops the top value off the evaluation stack and moves it into local variable number `index`, where local variables are numbered 0 onwards.</span></span> <span data-ttu-id="03b79-4247">Тип значения должен соответствовать тип локальной переменной, указанной в локальной подписи текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4247">The type of the value must match the type of the local variable as specified in the current method's local signature.</span></span>  
  
 <span data-ttu-id="03b79-4248">`stloc.s` Инструкция обеспечивает эффективную кодировку для локальных переменных с 0 до 255.</span><span class="sxs-lookup"><span data-stu-id="03b79-4248">The `stloc.s` instruction provides an efficient encoding for local variables 0 through 255.</span></span>  
  
 <span data-ttu-id="03b79-4249">Хранение в локальные переменные, содержащие целое число меньше длиной 4 байта, значение усекается при их перемещении из стека в локальную переменную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4249">Storing into locals that hold an integer value smaller than 4 bytes long truncates the value as it moves from the stack to the local variable.</span></span> <span data-ttu-id="03b79-4250">Значения с плавающей запятой округляются от исходного размера (тип `F`) до размера, связанный с аргументом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4250">Floating-point values are rounded from their native size (type `F`) to the size associated with the argument.</span></span>  
  
 <span data-ttu-id="03b79-4251">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `stloc.s` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4251">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `stloc.s` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4252">ILGenerator.Emit (OpCode, LocalBuilder)</span><span class="sxs-lookup"><span data-stu-id="03b79-4252">ILGenerator.Emit(OpCode, LocalBuilder)</span></span>  
  
-   <span data-ttu-id="03b79-4253">ILGenerator.Emit (OpCode, byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-4253">ILGenerator.Emit(OpCode, byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stobj">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stobj;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stobj" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stobj" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stobj As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stobj;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stobj : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stobj" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4254">Копирует значение с заданным типом из стека вычислений в указанный адрес памяти.</span><span class="sxs-lookup"><span data-stu-id="03b79-4254">Copies a value of a specified type from the evaluation stack into a supplied memory address.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4255">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4255">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4256">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4256">Format</span></span>|<span data-ttu-id="03b79-4257">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4257">Assembly Format</span></span>|<span data-ttu-id="03b79-4258">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4258">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4259">81 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4259">81 < `T` ></span></span>|<span data-ttu-id="03b79-4260">stobj `class`</span><span class="sxs-lookup"><span data-stu-id="03b79-4260">stobj `class`</span></span>|<span data-ttu-id="03b79-4261">Сохраняет значение типа `class` из стека в память.</span><span class="sxs-lookup"><span data-stu-id="03b79-4261">Stores a value of type `class` from the stack into memory.</span></span>|  
  
 <span data-ttu-id="03b79-4262">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4262">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4263">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4263">An address is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4264">Объект типа значения типа `class` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4264">A value type object of type `class` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4265">Объект и адресе извлекаются из стека; объект типа значения хранятся по адресу.</span><span class="sxs-lookup"><span data-stu-id="03b79-4265">The object and the address are popped from the stack; the value type object is stored at the address.</span></span>  
  
 <span data-ttu-id="03b79-4266">`stobj` Инструкции копирует объект типа значения в адрес, указанный адрес (указатель типа `native int`, `*`, или `&`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4266">The `stobj` instruction copies the value type object into the address specified by the address (a pointer of type `native int`, `*`, or `&`).</span></span> <span data-ttu-id="03b79-4267">Число копируемых байтов зависит от размера класса, представленного параметром `class`, маркер метаданных, представляющий тип значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4267">The number of bytes copied depends on the size of the class represented by `class`, a metadata token representing a value type.</span></span>  
  
 <span data-ttu-id="03b79-4268">Операция `stobj` инструкция может быть изменено, непосредственно перед знаком <xref:System.Reflection.Emit.OpCodes.Volatile> или <xref:System.Reflection.Emit.OpCodes.Unaligned> префиксная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4268">The operation of the `stobj` instruction can be altered by an immediately preceding <xref:System.Reflection.Emit.OpCodes.Volatile> or <xref:System.Reflection.Emit.OpCodes.Unaligned> prefix instruction.</span></span>  
  
 <span data-ttu-id="03b79-4269"><xref:System.TypeLoadException> возникает, если не удается найти класс.</span><span class="sxs-lookup"><span data-stu-id="03b79-4269"><xref:System.TypeLoadException> is thrown if class cannot be found.</span></span> <span data-ttu-id="03b79-4270">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4270">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code rather than at run time.</span></span>  
  
 <span data-ttu-id="03b79-4271">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stobj` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4271">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stobj` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4272">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-4272">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stsfld">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Stsfld" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Stsfld As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Stsfld;" />
      <MemberSignature Language="F#" Value=" staticval mutable Stsfld : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Stsfld" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4273">Заменяет значение статического поля на значение из стека вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-4273">Replaces the value of a static field with a value from the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4274">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4274">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4275">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4275">Format</span></span>|<span data-ttu-id="03b79-4276">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4276">Assembly Format</span></span>|<span data-ttu-id="03b79-4277">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4277">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4278">80 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4278">80 < `T` ></span></span>|<span data-ttu-id="03b79-4279">stsfld `field`</span><span class="sxs-lookup"><span data-stu-id="03b79-4279">stsfld `field`</span></span>|<span data-ttu-id="03b79-4280">Заменяет значение в `field` заданным значением.</span><span class="sxs-lookup"><span data-stu-id="03b79-4280">Replaces the value in `field` with a supplied value.</span></span>|  
  
 <span data-ttu-id="03b79-4281">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4281">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4282">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4282">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4283">Значение извлекается из стека и сохраняется в `field`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4283">A value is popped from the stack and stored in `field`.</span></span>  
  
 <span data-ttu-id="03b79-4284">`stsfld` Инструкция заменяет значение статического поля на значение из стека.</span><span class="sxs-lookup"><span data-stu-id="03b79-4284">The `stsfld` instruction replaces the value of a static field with a value from the stack.</span></span> <span data-ttu-id="03b79-4285">`field` является маркером метаданных, который должен ссылаться на элемент статического поля.</span><span class="sxs-lookup"><span data-stu-id="03b79-4285">`field` is a metadata token that must refer to a static field member.</span></span>  
  
 <span data-ttu-id="03b79-4286">`stsfld` Инструкции может иметь префикс в <xref:System.Reflection.Emit.OpCodes.Volatile>.</span><span class="sxs-lookup"><span data-stu-id="03b79-4286">The `stsfld` instruction may be prefixed by <xref:System.Reflection.Emit.OpCodes.Volatile>.</span></span>  
  
 <span data-ttu-id="03b79-4287"><xref:System.MissingFieldException> возникает, если поле не найдено в метаданных.</span><span class="sxs-lookup"><span data-stu-id="03b79-4287"><xref:System.MissingFieldException> is thrown if field is not found in the metadata.</span></span> <span data-ttu-id="03b79-4288">Обычно это проверяется инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинном коде, не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4288">This is typically checked when Microsoft Intermediate Language (MSIL) instructions are converted to native code, not at run time.</span></span>  
  
 <span data-ttu-id="03b79-4289">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `stsfld` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4289">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `stsfld` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4290">ILGenerator.Emit (OpCode, FieldInfo)</span><span class="sxs-lookup"><span data-stu-id="03b79-4290">ILGenerator.Emit(OpCode, FieldInfo)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4291">Вычитает одно значение из другого и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-4291">Subtracts one value from another and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4292">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4292">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4293">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4293">Format</span></span>|<span data-ttu-id="03b79-4294">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4294">Assembly Format</span></span>|<span data-ttu-id="03b79-4295">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4295">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4296">59</span><span class="sxs-lookup"><span data-stu-id="03b79-4296">59</span></span>|<span data-ttu-id="03b79-4297">sub</span><span class="sxs-lookup"><span data-stu-id="03b79-4297">sub</span></span>|<span data-ttu-id="03b79-4298">Вычитает одно значение из другого и возвращает новое числовое значение.</span><span class="sxs-lookup"><span data-stu-id="03b79-4298">Subtracts one value from another, returning a new numeric value.</span></span>|  
  
 <span data-ttu-id="03b79-4299">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4299">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4300">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4300">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4301">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4301">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4302">`value2` и `value1` извлекаются из стека; `value2` вычитается из `value1`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4302">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1`.</span></span>  
  
4.  <span data-ttu-id="03b79-4303">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4303">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4304">Переполнение не определяется для операций с целыми числами (для управления переполнением правильный, см. в разделе <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span><span class="sxs-lookup"><span data-stu-id="03b79-4304">Overflow is not detected for integer operations (for proper overflow handling, see <xref:System.Reflection.Emit.OpCodes.Sub_Ovf>).</span></span>  
  
 <span data-ttu-id="03b79-4305">Целое число вычитания заключает в оболочку, а не насыщение.</span><span class="sxs-lookup"><span data-stu-id="03b79-4305">Integer subtraction wraps, rather than saturates.</span></span> <span data-ttu-id="03b79-4306">Например: при условии, что 8-разрядных целых чисел, где `value1` имеет значение 0 и `value2` имеет значение 1, «оболочку» результатом будет 255.</span><span class="sxs-lookup"><span data-stu-id="03b79-4306">For example: assuming 8-bit integers, where `value1` is set to 0 and `value2` is set to 1, the "wrapped" result will be 255.</span></span>  
  
 <span data-ttu-id="03b79-4307">Возвращает с плавающей запятой переполнения `+inf` (`PositiveInfinity`) или `-inf` (`NegativeInfinity`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4307">Floating-point overflow returns `+inf` (`PositiveInfinity`) or `-inf` (`NegativeInfinity`).</span></span>  
  
 <span data-ttu-id="03b79-4308">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `sub` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4308">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4309">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4309">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4310">Вычитает одно целочисленное значение из другого, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-4310">Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4311">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4311">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4312">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4312">Format</span></span>|<span data-ttu-id="03b79-4313">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4313">Assembly Format</span></span>|<span data-ttu-id="03b79-4314">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4314">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4315">DA</span><span class="sxs-lookup"><span data-stu-id="03b79-4315">DA</span></span>|<span data-ttu-id="03b79-4316">Sub.ovf</span><span class="sxs-lookup"><span data-stu-id="03b79-4316">sub.ovf</span></span>|<span data-ttu-id="03b79-4317">Вычитает одно целочисленное значение из другого и проверку переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4317">Subtracts one integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="03b79-4318">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4318">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4319">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4319">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4320">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4320">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4321">`value2` и `value1` извлекаются из стека; `value2` вычитается из `value1` с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4321">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="03b79-4322">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4322">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4323"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-4323"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-4324">Эта операция выполняется над знаковыми целочисленными значениями; для значений с плавающей запятой, используйте <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="03b79-4324">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="03b79-4325">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `sub.ovf` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4325">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4326">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4326">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sub_Ovf_Un">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Sub_Ovf_Un" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Sub_Ovf_Un As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Sub_Ovf_Un;" />
      <MemberSignature Language="F#" Value=" staticval mutable Sub_Ovf_Un : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Sub_Ovf_Un" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4327">Вычитает одно целочисленное значение без знака из другого, выполняет проверку переполнения и помещает результат в стек вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-4327">Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4328">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4328">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4329">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4329">Format</span></span>|<span data-ttu-id="03b79-4330">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4330">Assembly Format</span></span>|<span data-ttu-id="03b79-4331">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4331">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4332">DB</span><span class="sxs-lookup"><span data-stu-id="03b79-4332">DB</span></span>|<span data-ttu-id="03b79-4333">Sub.ovf.un</span><span class="sxs-lookup"><span data-stu-id="03b79-4333">sub.ovf.un</span></span>|<span data-ttu-id="03b79-4334">Вычитает одно целочисленное значение без знака из другого и проверку переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4334">Subtracts one unsigned integer value from another with an overflow check.</span></span>|  
  
 <span data-ttu-id="03b79-4335">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4335">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4336">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4336">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4337">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4337">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4338">`value2` и `value1` извлекаются из стека; `value2` вычитается из `value1` с проверкой переполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4338">`value2` and `value1` are popped from the stack; `value2` is subtracted from `value1` with a check for overflow.</span></span>  
  
4.  <span data-ttu-id="03b79-4339">Результат помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4339">The result is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4340"><xref:System.OverflowException> возникает, если результат не может быть представлено в типе результата.</span><span class="sxs-lookup"><span data-stu-id="03b79-4340"><xref:System.OverflowException> is thrown if the result can not be represented in the result type.</span></span>  
  
 <span data-ttu-id="03b79-4341">Эта операция выполняется над знаковыми целочисленными значениями; для значений с плавающей запятой, используйте <xref:System.Reflection.Emit.OpCodes.Sub>.</span><span class="sxs-lookup"><span data-stu-id="03b79-4341">This operation is performed on signed integers; for floating-point values, use <xref:System.Reflection.Emit.OpCodes.Sub>.</span></span>  
  
 <span data-ttu-id="03b79-4342">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `sub.ovf.un` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4342">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `sub.ovf.un` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4343">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4343">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Switch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Switch" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Switch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Switch As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Switch;" />
      <MemberSignature Language="F#" Value=" staticval mutable Switch : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Switch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4344">Реализует таблицу переходов.</span><span class="sxs-lookup"><span data-stu-id="03b79-4344">Implements a jump table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4345">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4345">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4346">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4346">Format</span></span>|<span data-ttu-id="03b79-4347">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4347">Assembly Format</span></span>|<span data-ttu-id="03b79-4348">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4348">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4349">45 < `unsigned int32` > < `int32` >... < `int32` ></span></span>|<span data-ttu-id="03b79-4350">Переключение (`N`, `t1`, `t2`... `tN`)</span><span class="sxs-lookup"><span data-stu-id="03b79-4350">switch (`N`, `t1`, `t2`... `tN`)</span></span>|<span data-ttu-id="03b79-4351">Выполняет переход к одному из `N` значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4351">Jumps to one of `N` values.</span></span>|  
  
 <span data-ttu-id="03b79-4352">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4352">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4353">Значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4353">A value is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4354">Значение извлекается из стека и управление передается инструкции, смещением, индекс по значению, где значение меньше, чем `N`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4354">The value is popped off the stack and execution is transferred to the instruction at the offset indexed by the value, where the value is less than `N`.</span></span>  
  
 <span data-ttu-id="03b79-4355">`switch` Инструкция реализует таблицу переходов.</span><span class="sxs-lookup"><span data-stu-id="03b79-4355">The `switch` instruction implements a jump table.</span></span> <span data-ttu-id="03b79-4356">Формат инструкции `unsigned int32` представляет количество целевых объектов `N`, за которым следует `N` значений Int32 переходов целевых объектов.</span><span class="sxs-lookup"><span data-stu-id="03b79-4356">The format of the instruction is an `unsigned int32` representing the number of targets `N`, followed by `N` int32 values specifying jump targets.</span></span> <span data-ttu-id="03b79-4357">Эти целевые объекты отображаются в виде смещения (положительные или отрицательные) от начала инструкции, следуя инструкциям из этого `switch` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4357">These targets are represented as offsets (positive or negative) from the beginning of the instruction following this `switch` instruction.</span></span>  
  
 <span data-ttu-id="03b79-4358">`switch` Инструкция извлекает значение из стека и сравнивает его, как целое число без знака, до `N`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4358">The `switch` instruction pops a value off the stack and compares it, as an unsigned integer, to `N`.</span></span> <span data-ttu-id="03b79-4359">Если значение меньше, чем `N`, выполнение передается к целевому объекту, индексировать по значению, где целевых объектов нумеруются от 0 (например, первый целевой объект принимает значение 0, принимает значение 1, второй и т. д.).</span><span class="sxs-lookup"><span data-stu-id="03b79-4359">If value is less than `N`, execution is transferred to the target indexed by value, where targets are numbered from 0 (for example, a value of 0 takes the first target, a value of 1 takes the second target, and so on).</span></span> <span data-ttu-id="03b79-4360">Если значение больше или равно `N`, выполнение продолжается в следующей инструкции (вниз).</span><span class="sxs-lookup"><span data-stu-id="03b79-4360">If the value is greater than or equal to `N`, execution continues at the next instruction (fall through).</span></span>  
  
 <span data-ttu-id="03b79-4361">Если конечная инструкция содержит один или несколько кодов префикс, управление может быть передано только первый из этих префиксов.</span><span class="sxs-lookup"><span data-stu-id="03b79-4361">If the target instruction has one or more prefix codes, control can only be transferred to the first of these prefixes.</span></span>  
  
 <span data-ttu-id="03b79-4362">Управлять передачей в `try`, `catch`, `filter`, и `finally` блоки не может быть выполнена данная инструкция.</span><span class="sxs-lookup"><span data-stu-id="03b79-4362">Control transfers into and out of `try`, `catch`, `filter`, and `finally` blocks cannot be performed by this instruction.</span></span> <span data-ttu-id="03b79-4363">(Таких передач строго ограничивается и вместо этого следует использовать инструкцию leave).</span><span class="sxs-lookup"><span data-stu-id="03b79-4363">(Such transfers are severely restricted and must use the leave instruction instead).</span></span>  
  
 <span data-ttu-id="03b79-4364">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `switch` opcode.</span><span class="sxs-lookup"><span data-stu-id="03b79-4364">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `switch` opcode.</span></span> <span data-ttu-id="03b79-4365">`Label[]` Аргумент представляет собой массив метки, представляющий 32-разрядные смещения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4365">The `Label[]` argument is an array of Labels representing 32-bit offsets.</span></span>  
  
-   <span data-ttu-id="03b79-4366">ILGenerator.Emit (код операции, Label[])</span><span class="sxs-lookup"><span data-stu-id="03b79-4366">ILGenerator.Emit(OpCode, Label[])</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03b79-4367">В следующем образце кода показан метод `Switch` код операции для создают таблицу переходов, используя массив <xref:System.Reflection.Emit.Label>.</span><span class="sxs-lookup"><span data-stu-id="03b79-4367">The following code sample illustrates the use of the `Switch` opcode to generate a jump table using an array of <xref:System.Reflection.Emit.Label>.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.ILGenerator.Emit Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.ILGenerator.Emit Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tailcall">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Tailcall" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Tailcall As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Tailcall;" />
      <MemberSignature Language="F#" Value=" staticval mutable Tailcall : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Tailcall" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4368">Выполняет инструкцию вызова метода (префиксом которой является), предварительно удаляя кадр стека текущего метода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4368">Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4369">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4369">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4370">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4370">Format</span></span>|<span data-ttu-id="03b79-4371">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4371">Assembly Format</span></span>|<span data-ttu-id="03b79-4372">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4372">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4373">FE 14</span><span class="sxs-lookup"><span data-stu-id="03b79-4373">FE 14</span></span>|<span data-ttu-id="03b79-4374">tail.</span><span class="sxs-lookup"><span data-stu-id="03b79-4374">tail.</span></span>|<span data-ttu-id="03b79-4375">Последующий вызов завершает последние методы</span><span class="sxs-lookup"><span data-stu-id="03b79-4375">Subsequent call terminates current methods</span></span>|  
  
 <span data-ttu-id="03b79-4376">Нет Переходные состояния стека для данной инструкции не.</span><span class="sxs-lookup"><span data-stu-id="03b79-4376">There is no stack transition behavior defined for this instruction.</span></span>  
  
 <span data-ttu-id="03b79-4377">`tail` Инструкции префикс должен предшествовать <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, или <xref:System.Reflection.Emit.OpCodes.Callvirt> инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4377">The `tail` prefix instruction must immediately precede a <xref:System.Reflection.Emit.OpCodes.Call>, <xref:System.Reflection.Emit.OpCodes.Calli>, or <xref:System.Reflection.Emit.OpCodes.Callvirt> instruction.</span></span> <span data-ttu-id="03b79-4378">Он указывает, что кадр стека текущего метода должны быть удалены перед выполнением инструкции вызова.</span><span class="sxs-lookup"><span data-stu-id="03b79-4378">It indicates that the current method's stack frame should be removed before the call instruction is executed.</span></span> <span data-ttu-id="03b79-4379">Также подразумевается, что значение, возвращенное при вызове следующей также значения, возвращенного текущим методом, и вызов может быть преобразован в переход между методами.</span><span class="sxs-lookup"><span data-stu-id="03b79-4379">It also implies that the value returned from the following call is also the value returned by the current method, and the call can therefore be converted into a cross-method jump.</span></span>  
  
 <span data-ttu-id="03b79-4380">Стек должен быть пуста, за исключением аргументов, передаваемых следующим вызовом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4380">The stack must be empty except for the arguments being transferred by the following call.</span></span> <span data-ttu-id="03b79-4381">Инструкции, инструкции вызова должна быть возвратной. Таким образом, единственным допустимым кода является последовательность `tail. call` (или `calli` или `callvirt`).</span><span class="sxs-lookup"><span data-stu-id="03b79-4381">The instruction following the call instruction must be a ret. Thus the only valid code sequence is `tail. call` (or `calli` or `callvirt`).</span></span> <span data-ttu-id="03b79-4382">Правильные инструкции промежуточного языка MSIL (Microsoft) не должна содержать ветвь для `call` инструкции, но они могут выполнять переход к последующей <xref:System.Reflection.Emit.OpCodes.Ret>.</span><span class="sxs-lookup"><span data-stu-id="03b79-4382">Correct Microsoft Intermediate Language (MSIL) instructions must not branch to the `call` instruction, but they may branch to the subsequent <xref:System.Reflection.Emit.OpCodes.Ret>.</span></span>  
  
 <span data-ttu-id="03b79-4383">Нельзя отменить текущий кадр, когда управление передается от ненадежного кода в доверенный код, так как это нарушит безопасность идентификации кода.</span><span class="sxs-lookup"><span data-stu-id="03b79-4383">The current frame cannot be discarded when control is transferred from untrusted code to trusted code, since this would jeopardize code identity security.</span></span> <span data-ttu-id="03b79-4384">Проверки безопасности .NET Framework, таким образом может привести к `tail` следует игнорировать, оставляя стандартный <xref:System.Reflection.Emit.OpCodes.Call> инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4384">The .NET Framework security checks can therefore cause the `tail` to be ignored, leaving a standard <xref:System.Reflection.Emit.OpCodes.Call> instruction.</span></span> <span data-ttu-id="03b79-4385">Аналогичным образом, чтобы обеспечить выход синхронизированной области после возвращения вызова, `tail` префикс учитывается, если используется для выхода из метода, помеченного как синхронизированный.</span><span class="sxs-lookup"><span data-stu-id="03b79-4385">Similarly, in order to allow the exit of a synchronized region to occur after the call returns, the `tail` prefix is ignored when used to exit a method that is marked synchronized.</span></span>  
  
 <span data-ttu-id="03b79-4386">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `tail` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4386">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `tail` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4387">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4387">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TakesSingleByteArgument">
      <MemberSignature Language="C#" Value="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TakesSingleByteArgument(valuetype System.Reflection.Emit.OpCode inst) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TakesSingleByteArgument (inst As OpCode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TakesSingleByteArgument(System::Reflection::Emit::OpCode inst);" />
      <MemberSignature Language="F#" Value="static member TakesSingleByteArgument : System.Reflection.Emit.OpCode -&gt; bool" Usage="System.Reflection.Emit.OpCodes.TakesSingleByteArgument inst" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inst" Type="System.Reflection.Emit.OpCode" />
      </Parameters>
      <Docs>
        <param name="inst"><span data-ttu-id="03b79-4388">Экземпляр объекта Opcode.</span><span class="sxs-lookup"><span data-stu-id="03b79-4388">An instance of an Opcode object.</span></span></param>
        <summary><span data-ttu-id="03b79-4389">Возвращает true или false, в зависимости от того, принимает ли заданный код операции однобайтовый аргумент.</span><span class="sxs-lookup"><span data-stu-id="03b79-4389">Returns true or false if the supplied opcode takes a single byte argument.</span></span></summary>
        <returns><span data-ttu-id="03b79-4390"><see langword="true" /> или <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-4390"><see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4391">Этот метод позволяет определить, какие коды операций MSIL бы «краткая форма», для использования в оптимизированном коде.</span><span class="sxs-lookup"><span data-stu-id="03b79-4391">This method can be used to find which MSIL opcodes are "short form", for use in optimized code.</span></span>  
  
 <span data-ttu-id="03b79-4392">`TakesSingleByteArgument` Возвращает `true` Если <xref:System.Reflection.Emit.OpCode> экземпляра требуется однобайтовый аргумент в следующих случаях:</span><span class="sxs-lookup"><span data-stu-id="03b79-4392">`TakesSingleByteArgument` returns `true` if the <xref:System.Reflection.Emit.OpCode> instance takes a single byte argument in the following cases:</span></span>  
  
-   <span data-ttu-id="03b79-4393">Код операции выполняет инструкцию перехода однобайтовому адресу (например, <xref:System.Reflection.Emit.OpCodes.Br_S> и <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span><span class="sxs-lookup"><span data-stu-id="03b79-4393">The opcode performs a branch instruction to a byte-sized address (for example, <xref:System.Reflection.Emit.OpCodes.Br_S> and <xref:System.Reflection.Emit.OpCodes.Bgt_S>).</span></span>  
  
-   <span data-ttu-id="03b79-4394">Код операции помещает в стек байтовое значение (например, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span><span class="sxs-lookup"><span data-stu-id="03b79-4394">The opcode pushes a byte value onto the stack (for example, <xref:System.Reflection.Emit.OpCodes.Ldc_I4_S>).</span></span>  
  
-   <span data-ttu-id="03b79-4395">Код операции ссылается на переменную или аргумент с использованием однобайтовой «краткая форма» (например, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> и <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span><span class="sxs-lookup"><span data-stu-id="03b79-4395">The opcode references a variable or argument via the byte-sized "short form" (for example, <xref:System.Reflection.Emit.OpCodes.Ldloc_S> and <xref:System.Reflection.Emit.OpCodes.Stloc_S>).</span></span>  
  
 <span data-ttu-id="03b79-4396">В противном случае она возвращает `false`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4396">Otherwise, it returns `false`.</span></span>  
  
 <span data-ttu-id="03b79-4397">В приведенном ниже примере показано использование `TakesSingleByteArgument` путем отражения для `OpCodes` класс и проверки ли каждый `OpCode` поле принимает однобайтовый аргумент.</span><span class="sxs-lookup"><span data-stu-id="03b79-4397">The example below demonstrates the use of `TakesSingleByteArgument` by reflecting on to the `OpCodes` class and testing to see whether each `OpCode` field takes a single-byte argument.</span></span>  
  
 [!code-cpp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CPP/source.cpp#1)]
 [!code-csharp[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/CS/source.cs#1)]
 [!code-vb[System.Reflection.Emit.OpCodes.TakesSingleByteArgument Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.OpCodes.TakesSingleByteArgument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Throw;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Throw" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Throw" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Throw As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Throw;" />
      <MemberSignature Language="F#" Value=" staticval mutable Throw : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Throw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4398">Создает объект исключения, находящийся в стеке вычислений.</span><span class="sxs-lookup"><span data-stu-id="03b79-4398">Throws the exception object currently on the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4399">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4399">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4400">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4400">Format</span></span>|<span data-ttu-id="03b79-4401">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4401">Assembly Format</span></span>|<span data-ttu-id="03b79-4402">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4402">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4403">7A</span><span class="sxs-lookup"><span data-stu-id="03b79-4403">7A</span></span>|<span data-ttu-id="03b79-4404">throw</span><span class="sxs-lookup"><span data-stu-id="03b79-4404">throw</span></span>|<span data-ttu-id="03b79-4405">Создает исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-4405">Throws an exception.</span></span>|  
  
 <span data-ttu-id="03b79-4406">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4406">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4407">Ссылка на объект (на исключение) помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4407">An object reference (to an exception) is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4408">Ссылка на объект извлекается из стека и исключение.</span><span class="sxs-lookup"><span data-stu-id="03b79-4408">The object reference is popped from the stack and the exception thrown.</span></span>  
  
 <span data-ttu-id="03b79-4409">`throw` Инструкция создает объект исключения (типа `O`) в настоящее время в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-4409">The `throw` instruction throws the exception object (type `O`) currently on the stack.</span></span>  
  
 <span data-ttu-id="03b79-4410"><xref:System.NullReferenceException> возникает, если ссылка на объект является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-4410"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-4411">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `throw` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4411">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `throw` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4412">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4412">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unaligned">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unaligned" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unaligned As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unaligned;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unaligned : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unaligned" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4413">Указывает, что адрес на вершине стека, возможно, не выровнен по естественному размеру следующей непосредственно за ним инструкции <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> или <see langword="cpblk" />.</span><span class="sxs-lookup"><span data-stu-id="03b79-4413">Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" />, or <see langword="cpblk" /> instruction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4414">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4414">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4415">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4415">Format</span></span>|<span data-ttu-id="03b79-4416">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4416">Assembly Format</span></span>|<span data-ttu-id="03b79-4417">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4417">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4418">FE 12 &LT; `unsigned int8` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4418">FE 12 < `unsigned int8` ></span></span>|<span data-ttu-id="03b79-4419">Невыровненные.</span><span class="sxs-lookup"><span data-stu-id="03b79-4419">unaligned.</span></span> `alignment`|<span data-ttu-id="03b79-4420">Указывает, что последующие указатель инструкции может быть невыровненным.</span><span class="sxs-lookup"><span data-stu-id="03b79-4420">Indicates that the subsequent pointer instruction may be unaligned.</span></span>|  
  
 <span data-ttu-id="03b79-4421">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4421">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4422">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4422">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4423">`Unaligned` Указывает, что адрес (неуправляемый указатель, `native int`) в стеке может не быть выровнен по естественному размеру следующей непосредственно `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, или `cpblk` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4423">`Unaligned` specifies that the address (an unmanaged pointer, `native int`) on the stack might not be aligned to the natural size of the immediately following `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="03b79-4424">То есть для <xref:System.Reflection.Emit.OpCodes.Ldind_I4> инструкции, выравнивание адреса не может быть на 4-байтовой границе.</span><span class="sxs-lookup"><span data-stu-id="03b79-4424">That is, for a <xref:System.Reflection.Emit.OpCodes.Ldind_I4> instruction the alignment of the address may not be to a 4-byte boundary.</span></span> <span data-ttu-id="03b79-4425">Для `initblk` и `cpblk` выравнивание по умолчанию — это зависит от архитектуры (4-байтовое для 32-разрядные процессоры, 8-байтовое для 64-разрядные процессоры).</span><span class="sxs-lookup"><span data-stu-id="03b79-4425">For `initblk` and `cpblk` the default alignment is architecture dependent (4-byte on 32-bit CPUs, 8-byte on 64-bit CPUs).</span></span> <span data-ttu-id="03b79-4426">Генераторы кода, размер 32-разрядных слова не ограничивают свои выходные данные должны использовать `unaligned` Если выравнивание не известна во время компиляции размером 8 байт.</span><span class="sxs-lookup"><span data-stu-id="03b79-4426">Code generators that do not restrict their output to a 32-bit word size must use `unaligned` if the alignment is not known at compile time to be 8-byte.</span></span>  
  
 <span data-ttu-id="03b79-4427">Выравнивание, определяемое значением должен быть 1, 2 или 4 и означает, что созданный код следует предполагать, что адрес byte, двухбайтовый, или quad байтовое значение aligned, соответственно.</span><span class="sxs-lookup"><span data-stu-id="03b79-4427">The value of alignment must be 1, 2, or 4 and means that the generated code should assume that the address is byte, double-byte, or quad-byte aligned, respectively.</span></span> <span data-ttu-id="03b79-4428">Обратите внимание, что временные указатели (тип `*`) всегда выровнены.</span><span class="sxs-lookup"><span data-stu-id="03b79-4428">Note that transient pointers (type `*`) are always aligned.</span></span>  
  
 <span data-ttu-id="03b79-4429">Выравнивание для `cpblk` инструкция требует двух чисел (источника) и для назначения, имеется оказывает заметного влияния на производительность, если только меньшее число.</span><span class="sxs-lookup"><span data-stu-id="03b79-4429">While the alignment for a `cpblk` instruction would logically require two numbers (one for the source and one for the destination), there is no noticeable impact on performance if only the lower number is specified.</span></span>  
  
 <span data-ttu-id="03b79-4430">`unaligned` И `volatile` префиксы, которые могут быть объединены в любом порядке.</span><span class="sxs-lookup"><span data-stu-id="03b79-4430">The `unaligned` and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="03b79-4431">Они должны непосредственно предшествовать `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, или `cpblk` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4431">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="03b79-4432">Только <xref:System.Reflection.Emit.OpCodes.Volatile> префикс допускается для <xref:System.Reflection.Emit.OpCodes.Ldsfld> и <xref:System.Reflection.Emit.OpCodes.Stsfld> инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4432">Only the <xref:System.Reflection.Emit.OpCodes.Volatile> prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="03b79-4433">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузки метода `unaligned` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4433">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overloads can use the `unaligned` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4434">ILGenerator.Emit (OpCode, метки)</span><span class="sxs-lookup"><span data-stu-id="03b79-4434">ILGenerator.Emit(OpCode, Label)</span></span>  
  
-   <span data-ttu-id="03b79-4435">ILGenerator.Emit (Opcode, Byte)</span><span class="sxs-lookup"><span data-stu-id="03b79-4435">ILGenerator.Emit(Opcode, Byte)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4436">Преобразует тип значения из упакованной формы в распакованную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4436">Converts the boxed representation of a value type to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4437">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4437">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4438">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4438">Format</span></span>|<span data-ttu-id="03b79-4439">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4439">Assembly Format</span></span>|<span data-ttu-id="03b79-4440">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4440">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4441">79 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4441">79 < `T` ></span></span>|<span data-ttu-id="03b79-4442">распаковки-преобразования `valType`</span><span class="sxs-lookup"><span data-stu-id="03b79-4442">unbox `valType`</span></span>|<span data-ttu-id="03b79-4443">Извлекает данные типа значения из `obj`, ее упакованного представления.</span><span class="sxs-lookup"><span data-stu-id="03b79-4443">Extracts the value type data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="03b79-4444">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4444">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4445">Ссылка на объект помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4445">An object reference is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4446">Ссылка на объект извлекается из стека и преобразуется в указатель типа значения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4446">The object reference is popped from the stack and unboxed to a value type pointer.</span></span>  
  
3.  <span data-ttu-id="03b79-4447">Тип указателя значение помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4447">The value type pointer is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4448">Тип значения имеет два представления в Common Language Infrastructure (CLI):</span><span class="sxs-lookup"><span data-stu-id="03b79-4448">A value type has two separate representations within the Common Language Infrastructure (CLI):</span></span>  
  
-   <span data-ttu-id="03b79-4449">Форма «raw», используемый при внедрении типа значения внутри другого объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-4449">A 'raw' form used when a value type is embedded within another object.</span></span>  
  
-   <span data-ttu-id="03b79-4450">Форма «процессор», где данные в тип значения упаковываются в объект и существуют как независимые сущности.</span><span class="sxs-lookup"><span data-stu-id="03b79-4450">A 'boxed' form, where the data in the value type is wrapped (boxed) into an object so it can exist as an independent entity.</span></span>  
  
 <span data-ttu-id="03b79-4451">`unbox` Инструкция преобразует ссылку на объект (тип `O`), упакованного представления типа значения, чтобы указатель типа значения (управляемый указатель типа `&`), ее распаковывается формы.</span><span class="sxs-lookup"><span data-stu-id="03b79-4451">The `unbox` instruction converts the object reference (type `O`), the boxed representation of a value type, to a value type pointer (a managed pointer, type `&`), its unboxed form.</span></span> <span data-ttu-id="03b79-4452">Заданный тип значения (`valType`) является маркером метаданных, указывающий тип типом значения, содержащиеся в упакованный объект.</span><span class="sxs-lookup"><span data-stu-id="03b79-4452">The supplied value type (`valType`) is a metadata token indicating the type of value type contained within the boxed object.</span></span>  
  
 <span data-ttu-id="03b79-4453">В отличие от <xref:System.Reflection.Emit.OpCodes.Box>, которая необходима для создания копии типа значения для использования в объекте, `unbox` не требуется копировать тип значения из объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-4453">Unlike <xref:System.Reflection.Emit.OpCodes.Box>, which is required to make a copy of a value type for use in the object, `unbox` is not required to copy the value type from the object.</span></span> <span data-ttu-id="03b79-4454">Обычно она просто вычисляет адрес типа значения, который уже присутствует внутри упакованного объекта.</span><span class="sxs-lookup"><span data-stu-id="03b79-4454">Typically it simply computes the address of the value type that is already present inside of the boxed object.</span></span>  
  
 <span data-ttu-id="03b79-4455"><xref:System.InvalidCastException> возникает, если объект не упакован как `valType`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4455"><xref:System.InvalidCastException> is thrown if the object is not boxed as `valType`.</span></span>  
  
 <span data-ttu-id="03b79-4456"><xref:System.NullReferenceException> возникает, если ссылка на объект является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-4456"><xref:System.NullReferenceException> is thrown if the object reference is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-4457"><xref:System.TypeLoadException> возникает, если тип значения `valType` не удается найти.</span><span class="sxs-lookup"><span data-stu-id="03b79-4457"><xref:System.TypeLoadException> is thrown if the value type `valType` cannot be found.</span></span> <span data-ttu-id="03b79-4458">Обычно это обнаруживается инструкции промежуточного языка MSIL (Microsoft) преобразуются в машинный код, а не во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="03b79-4458">This is typically detected when Microsoft Intermediate Language (MSIL) instructions are converted to native code, rather than at runtime.</span></span>  
  
 <span data-ttu-id="03b79-4459">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `unbox` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4459">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4460">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-4460">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unbox_Any">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Unbox_Any" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Unbox_Any As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Unbox_Any;" />
      <MemberSignature Language="F#" Value=" staticval mutable Unbox_Any : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Unbox_Any" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4461">Преобразует тип, указанный в инструкции, из упакованной формы в распакованную.</span><span class="sxs-lookup"><span data-stu-id="03b79-4461">Converts the boxed representation of a type specified in the instruction to its unboxed form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4462">В следующей таблице перечислены инструкции по шестнадцатеричном формате и формате сборки промежуточного языка MSIL, Microsoft, а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4462">The following table lists the instruction's hexadecimal and Microsoft intermediate language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4463">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4463">Format</span></span>|<span data-ttu-id="03b79-4464">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4464">Assembly Format</span></span>|<span data-ttu-id="03b79-4465">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4465">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4466">A5 < `T` ></span><span class="sxs-lookup"><span data-stu-id="03b79-4466">A5 < `T` ></span></span>|<span data-ttu-id="03b79-4467">unbox.Any `typeTok`</span><span class="sxs-lookup"><span data-stu-id="03b79-4467">unbox.any `typeTok`</span></span>|<span data-ttu-id="03b79-4468">Извлечение данных из `obj`, ее упакованного представления.</span><span class="sxs-lookup"><span data-stu-id="03b79-4468">Extract the data from `obj`, its boxed representation.</span></span>|  
  
 <span data-ttu-id="03b79-4469">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4469">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4470">Ссылка на объект `obj` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4470">An object reference `obj` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4471">Ссылка на объект извлекается из стека и преобразуется к типу, указанному в инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4471">The object reference is popped from the stack and unboxed to the type specified in the instruction.</span></span>  
  
3.  <span data-ttu-id="03b79-4472">Результирующий тип ссылки или значения объекта помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4472">The resulting object reference or value type is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4473">При применении к форме упакованный тип значения, `unbox.any` инструкция извлекает значение, содержащееся в `obj` (типа `O`) и поэтому эквивалентно `unbox` следуют `ldobj`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4473">When applied to the boxed form of a value type, the `unbox.any` instruction extracts the value contained within `obj` (of type `O`), and is therefore equivalent to `unbox` followed by `ldobj`.</span></span>  
  
 <span data-ttu-id="03b79-4474">При применении к ссылочному типу, `unbox.any` инструкция имеет тот же эффект, что `castclass` `typeTok`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4474">When applied to a reference type, the `unbox.any` instruction has the same effect as `castclass` `typeTok`.</span></span>  
  
 <span data-ttu-id="03b79-4475">Если операнд `typeTok` является параметром универсального типа, то поведение во время выполнения определяется тип, который указан для этого параметра универсального типа.</span><span class="sxs-lookup"><span data-stu-id="03b79-4475">If the operand `typeTok` is a generic type parameter, then the runtime behavior is determined by the type that is specified for that generic type parameter.</span></span>  
  
 <span data-ttu-id="03b79-4476"><xref:System.InvalidCastException> возникает, если `obj` упакованный тип.</span><span class="sxs-lookup"><span data-stu-id="03b79-4476"><xref:System.InvalidCastException> is thrown if `obj` is not a boxed type.</span></span>  
  
 <span data-ttu-id="03b79-4477"><xref:System.NullReferenceException> возникает, если `obj` является пустой ссылкой.</span><span class="sxs-lookup"><span data-stu-id="03b79-4477"><xref:System.NullReferenceException> is thrown if `obj` is a null reference.</span></span>  
  
 <span data-ttu-id="03b79-4478">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `unbox.any` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4478">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `unbox.any` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4479">ILGenerator.Emit (код операции, тип)</span><span class="sxs-lookup"><span data-stu-id="03b79-4479">ILGenerator.Emit(OpCode, Type)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Volatile">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Volatile;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Volatile" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Volatile" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Volatile As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Volatile;" />
      <MemberSignature Language="F#" Value=" staticval mutable Volatile : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Volatile" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4480">Указывает, что адрес на вершине стека вычислений, возможно, является изменяемым и результаты чтения данной области невозможно кэшировать либо невозможно запретить множественные сохранения в эту область.</span><span class="sxs-lookup"><span data-stu-id="03b79-4480">Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4481">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4481">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4482">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4482">Format</span></span>|<span data-ttu-id="03b79-4483">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4483">Assembly Format</span></span>|<span data-ttu-id="03b79-4484">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4484">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4485">FE 13</span><span class="sxs-lookup"><span data-stu-id="03b79-4485">FE 13</span></span>|<span data-ttu-id="03b79-4486">volatile.</span><span class="sxs-lookup"><span data-stu-id="03b79-4486">volatile.</span></span>|<span data-ttu-id="03b79-4487">Указывает, что следующая за указателем ссылка является volatile.</span><span class="sxs-lookup"><span data-stu-id="03b79-4487">Indicates that the subsequent pointer reference is volatile.</span></span>|  
  
 <span data-ttu-id="03b79-4488">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4488">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4489">Адрес помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4489">An address is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4490">`volatile`.</span><span class="sxs-lookup"><span data-stu-id="03b79-4490">`volatile`.</span></span> <span data-ttu-id="03b79-4491">Указывает, что адрес является изменяемым (то есть он может быть внешние ссылки к текущему потоку выполнения) и результаты чтения данной области невозможно кэшировать, или что невозможно запретить множественные сохранения в этом расположении.</span><span class="sxs-lookup"><span data-stu-id="03b79-4491">specifies that the address is a volatile address (that is, it can be referenced externally to the current thread of execution) and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</span></span> <span data-ttu-id="03b79-4492">Доступа `volatile` влияет только на доступ; любой другой доступ к папке должен быть помечен отдельно.</span><span class="sxs-lookup"><span data-stu-id="03b79-4492">Marking an access as `volatile` affects only that single access; other accesses to the same location must be marked separately.</span></span> <span data-ttu-id="03b79-4493">Доступ к расположениям volatile не обязательно выполнять атомарным образом.</span><span class="sxs-lookup"><span data-stu-id="03b79-4493">Access to volatile locations need not be performed atomically.</span></span>  
  
 <span data-ttu-id="03b79-4494"><xref:System.Reflection.Emit.OpCodes.Unaligned> И `volatile` префиксы, которые могут быть объединены в любом порядке.</span><span class="sxs-lookup"><span data-stu-id="03b79-4494">The <xref:System.Reflection.Emit.OpCodes.Unaligned> and `volatile` prefixes can be combined in either order.</span></span> <span data-ttu-id="03b79-4495">Они должны непосредственно предшествовать `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, или `cpblk` инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4495">They must immediately precede a `ldind`, `stind`, `ldfld`, `stfld`, `ldobj`, `stobj`, `initblk`, or `cpblk` instruction.</span></span> <span data-ttu-id="03b79-4496">Только `volatile` префикс допускается для <xref:System.Reflection.Emit.OpCodes.Ldsfld> и <xref:System.Reflection.Emit.OpCodes.Stsfld> инструкции.</span><span class="sxs-lookup"><span data-stu-id="03b79-4496">Only the `volatile` prefix is allowed for the <xref:System.Reflection.Emit.OpCodes.Ldsfld> and <xref:System.Reflection.Emit.OpCodes.Stsfld> instructions.</span></span>  
  
 <span data-ttu-id="03b79-4497">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `volatile` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4497">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `volatile` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4498">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4498">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Xor">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.Emit.OpCode Xor;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Reflection.Emit.OpCode Xor" />
      <MemberSignature Language="DocId" Value="F:System.Reflection.Emit.OpCodes.Xor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Xor As OpCode " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::Emit::OpCode Xor;" />
      <MemberSignature Language="F#" Value=" staticval mutable Xor : System.Reflection.Emit.OpCode" Usage="System.Reflection.Emit.OpCodes.Xor" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.OpCode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03b79-4499">Вычисляет побитовое исключающее ИЛИ двух верхних значений в стеке вычислений и помещает результат обратно в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4499">Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03b79-4500">В следующей таблице перечислены инструкция в шестнадцатеричном формате и формате сборки промежуточного языка MSIL (Microsoft), а также краткое описание:</span><span class="sxs-lookup"><span data-stu-id="03b79-4500">The following table lists the instruction's hexadecimal and Microsoft Intermediate Language (MSIL) assembly format, along with a brief reference summary:</span></span>  
  
|<span data-ttu-id="03b79-4501">Формат</span><span class="sxs-lookup"><span data-stu-id="03b79-4501">Format</span></span>|<span data-ttu-id="03b79-4502">Формат сборки</span><span class="sxs-lookup"><span data-stu-id="03b79-4502">Assembly Format</span></span>|<span data-ttu-id="03b79-4503">Описание</span><span class="sxs-lookup"><span data-stu-id="03b79-4503">Description</span></span>|  
|------------|---------------------|-----------------|  
|<span data-ttu-id="03b79-4504">61</span><span class="sxs-lookup"><span data-stu-id="03b79-4504">61</span></span>|<span data-ttu-id="03b79-4505">xor</span><span class="sxs-lookup"><span data-stu-id="03b79-4505">xor</span></span>|<span data-ttu-id="03b79-4506">Вычисляет побитовое исключающее или для двух целочисленных значений и возвращает целое число.</span><span class="sxs-lookup"><span data-stu-id="03b79-4506">Computes the bitwise XOR of two integer values and returns an integer.</span></span>|  
  
 <span data-ttu-id="03b79-4507">Изменения состояния стека, в последовательном порядке, является:</span><span class="sxs-lookup"><span data-stu-id="03b79-4507">The stack transitional behavior, in sequential order, is:</span></span>  
  
1.  <span data-ttu-id="03b79-4508">`value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4508">`value1` is pushed onto the stack.</span></span>  
  
2.  <span data-ttu-id="03b79-4509">`value2` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4509">`value2` is pushed onto the stack.</span></span>  
  
3.  <span data-ttu-id="03b79-4510">`value2` и `value1` извлекаются из стека и поразрядное исключающее или вычисляемые.</span><span class="sxs-lookup"><span data-stu-id="03b79-4510">`value2` and `value1` are popped from the stack and their bitwise XOR computed.</span></span>  
  
4.  <span data-ttu-id="03b79-4511">Побитовое исключающее или `value2` и `value1` помещается в стек.</span><span class="sxs-lookup"><span data-stu-id="03b79-4511">The bitwise XOR of `value2` and `value1` is pushed onto the stack.</span></span>  
  
 <span data-ttu-id="03b79-4512">`xor` Инструкция вычисляет побитовое исключающее или двух верхних значений в стеке и оставляет результат в стеке.</span><span class="sxs-lookup"><span data-stu-id="03b79-4512">The `xor` instruction computes the bitwise XOR of the top two values on the stack and leaves the result on the stack.</span></span>  
  
 <span data-ttu-id="03b79-4513">`Xor` представляет собой операцию целыми числами.</span><span class="sxs-lookup"><span data-stu-id="03b79-4513">`Xor` is an integer-specific operation.</span></span>  
  
 <span data-ttu-id="03b79-4514">Следующие <xref:System.Reflection.Emit.ILGenerator.Emit%2A> можно использовать перегрузку метода `xor` код операции:</span><span class="sxs-lookup"><span data-stu-id="03b79-4514">The following <xref:System.Reflection.Emit.ILGenerator.Emit%2A> method overload can use the `xor` opcode:</span></span>  
  
-   <span data-ttu-id="03b79-4515">ILGenerator.Emit(OpCode)</span><span class="sxs-lookup"><span data-stu-id="03b79-4515">ILGenerator.Emit(OpCode)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
