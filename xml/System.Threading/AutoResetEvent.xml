<Type Name="AutoResetEvent" FullName="System.Threading.AutoResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e927ca35a51948e93b5e4fbf3c866d7ffcf0d1ab" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58730379" /></Metadata><TypeSignature Language="C#" Value="public sealed class AutoResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AutoResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.AutoResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AutoResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class AutoResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type AutoResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4686f-101">Представляет событие синхронизации потоков, которое при срабатывании автоматически сбрасывается, освобождая один поток в состоянии ожидания.</span><span class="sxs-lookup"><span data-stu-id="4686f-101">Represents a thread synchronization event that, when signaled, resets automatically after releasing a single waiting thread.</span></span> <span data-ttu-id="4686f-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="4686f-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4686f-103">Использовании `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, и <xref:System.Threading.EventWaitHandle> для взаимодействия потоков (или сигнал потока).</span><span class="sxs-lookup"><span data-stu-id="4686f-103">You use `AutoResetEvent`, <xref:System.Threading.ManualResetEvent>, and <xref:System.Threading.EventWaitHandle> for thread interaction (or thread signaling).</span></span> <span data-ttu-id="4686f-104">Дополнительные сведения см. в разделе [потоков взаимодействия, или передачи сигнала](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) раздел [Обзор примитивов синхронизации](~/docs/standard/threading/overview-of-synchronization-primitives.md) статьи.</span><span class="sxs-lookup"><span data-stu-id="4686f-104">For more information, see the [Thread interaction, or signaling](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) section of the [Overview of synchronization primitives](~/docs/standard/threading/overview-of-synchronization-primitives.md) article.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4686f-105">Этот тип реализует <xref:System.IDisposable> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="4686f-105">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="4686f-106">Когда вы закончите, используя тип, следует освободить его прямо или косвенно.</span><span class="sxs-lookup"><span data-stu-id="4686f-106">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="4686f-107">Чтобы удалить тип напрямую, вызовите его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока.</span><span class="sxs-lookup"><span data-stu-id="4686f-107">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="4686f-108">Чтобы избавиться от его косвенно, используйте языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic).</span><span class="sxs-lookup"><span data-stu-id="4686f-108">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="4686f-109">Дополнительные сведения см. в разделе «С помощью объекта, реализует IDisposable» <xref:System.IDisposable> разделу интерфейса.</span><span class="sxs-lookup"><span data-stu-id="4686f-109">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="4686f-110">Поток ожидает сигнала, вызвав [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span><span class="sxs-lookup"><span data-stu-id="4686f-110">A thread waits for a signal by calling [AutoResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A).</span></span> <span data-ttu-id="4686f-111">Если `AutoResetEvent` в сигнальное состояние, поток блокируется до [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) вызывается.</span><span class="sxs-lookup"><span data-stu-id="4686f-111">If the `AutoResetEvent` is in the non-signaled state, the thread blocks until [AutoResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) is called.</span></span>  
  
 <span data-ttu-id="4686f-112">Вызов `Set` сигналы `AutoResetEvent` освободить ожидающий поток.</span><span class="sxs-lookup"><span data-stu-id="4686f-112">Calling `Set` signals `AutoResetEvent` to release a waiting thread.</span></span> <span data-ttu-id="4686f-113">`AutoResetEvent` остается в сигнальном состоянии до одиночного потока ожидания освобождается и затем возвращается в состояние отсутствия сигнала.</span><span class="sxs-lookup"><span data-stu-id="4686f-113">`AutoResetEvent` remains signaled until a single waiting thread is released, and then automatically returns to the non-signaled state.</span></span> <span data-ttu-id="4686f-114">Если нет ожидающих потоков, состояние остается сигнальным бесконечно.</span><span class="sxs-lookup"><span data-stu-id="4686f-114">If no threads are waiting, the state remains signaled indefinitely.</span></span>  
  
 <span data-ttu-id="4686f-115">Если поток вызывает <xref:System.Threading.WaitHandle.WaitOne%2A> хотя <xref:System.Threading.AutoResetEvent> находится в сигнальном состоянии, не блокирует поток.</span><span class="sxs-lookup"><span data-stu-id="4686f-115">If a thread calls <xref:System.Threading.WaitHandle.WaitOne%2A> while the <xref:System.Threading.AutoResetEvent> is in the signaled state, the thread does not block.</span></span> <span data-ttu-id="4686f-116"><xref:System.Threading.AutoResetEvent> Немедленно освобождает поток и возвращается в состояние отсутствия сигнала.</span><span class="sxs-lookup"><span data-stu-id="4686f-116">The <xref:System.Threading.AutoResetEvent> releases the thread immediately and returns to the non-signaled state.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4686f-117">Нет никакой гарантии, при каждом вызове <xref:System.Threading.EventWaitHandle.Set%2A> метод выпустит потока.</span><span class="sxs-lookup"><span data-stu-id="4686f-117">There is no guarantee that every call to the <xref:System.Threading.EventWaitHandle.Set%2A> method will release a thread.</span></span> <span data-ttu-id="4686f-118">Если два вызова, слишком близко друг к другу, что второй вызов происходит до выпустила поток освобождается только один поток.</span><span class="sxs-lookup"><span data-stu-id="4686f-118">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released.</span></span> <span data-ttu-id="4686f-119">Это не так, как если произошел второй вызов.</span><span class="sxs-lookup"><span data-stu-id="4686f-119">It's as if the second call did not happen.</span></span> <span data-ttu-id="4686f-120">Кроме того Если <xref:System.Threading.EventWaitHandle.Set%2A> вызывается, когда нет ожидающих потоков и <xref:System.Threading.AutoResetEvent> уже есть сигнал, вызов не оказывает влияния.</span><span class="sxs-lookup"><span data-stu-id="4686f-120">Also, if <xref:System.Threading.EventWaitHandle.Set%2A> is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>  
  
 <span data-ttu-id="4686f-121">Можно управлять начальное состояние `AutoResetEvent` , передав конструктору логическое значение: `true` Если начальное состояние переводится в сигнальное состояние и `false` в противном случае.</span><span class="sxs-lookup"><span data-stu-id="4686f-121">You can control the initial state of an `AutoResetEvent` by passing a Boolean value to the constructor: `true` if the initial state is signaled and `false` otherwise.</span></span>  
  
 <span data-ttu-id="4686f-122">`AutoResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="4686f-122">`AutoResetEvent` can also be used with the `static` <xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.</span></span>  
  
 <span data-ttu-id="4686f-123">Начиная с .NET Framework версии 2.0, <xref:System.Threading.AutoResetEvent> является производным от нового <xref:System.Threading.EventWaitHandle> класса.</span><span class="sxs-lookup"><span data-stu-id="4686f-123">Beginning with the .NET Framework version 2.0, <xref:System.Threading.AutoResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class.</span></span> <span data-ttu-id="4686f-124"><xref:System.Threading.AutoResetEvent> Функционально эквивалентен <xref:System.Threading.EventWaitHandle> созданные с помощью <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4686f-124">An <xref:System.Threading.AutoResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode.AutoReset?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4686f-125">В отличие от <xref:System.Threading.AutoResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к именованные системные события синхронизации.</span><span class="sxs-lookup"><span data-stu-id="4686f-125">Unlike the <xref:System.Threading.AutoResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4686f-126">В следующем примере показано, как использовать <xref:System.Threading.AutoResetEvent> освободить один поток за раз, путем вызова <xref:System.Threading.EventWaitHandle.Set%2A> метода (в базовом классе каждый) раз пользователь нажимает клавишу **ввод** ключ.</span><span class="sxs-lookup"><span data-stu-id="4686f-126">The following example shows how to use <xref:System.Threading.AutoResetEvent> to release one thread at a time, by calling the <xref:System.Threading.EventWaitHandle.Set%2A> method (on the base class) each time the user presses the **Enter** key.</span></span> <span data-ttu-id="4686f-127">В примере запускается три потоки, которые ожидают <xref:System.Threading.AutoResetEvent> , созданного в сигнальном состоянии.</span><span class="sxs-lookup"><span data-stu-id="4686f-127">The example starts three threads, which wait on an <xref:System.Threading.AutoResetEvent> that was created in the signaled state.</span></span> <span data-ttu-id="4686f-128">Первый поток освобождается немедленно, поскольку <xref:System.Threading.AutoResetEvent> уже находится в сигнальном состоянии.</span><span class="sxs-lookup"><span data-stu-id="4686f-128">The first thread is released immediately, because the <xref:System.Threading.AutoResetEvent> is already in the signaled state.</span></span> <span data-ttu-id="4686f-129">Эта функция сбрасывает <xref:System.Threading.AutoResetEvent> в сигнальное состояние, чтобы последующие потоки блокируются.</span><span class="sxs-lookup"><span data-stu-id="4686f-129">This resets the <xref:System.Threading.AutoResetEvent> to the non-signaled state, so that subsequent threads block.</span></span> <span data-ttu-id="4686f-130">Заблокированные потоки не освобождаются, пока пользователь отпускает их одну за раз, нажав клавишу **ввод** ключ.</span><span class="sxs-lookup"><span data-stu-id="4686f-130">The blocked threads are not released until the user releases them one at a time by pressing the **Enter** key.</span></span>  
  
 <span data-ttu-id="4686f-131">После потоки освобождаются от первого <xref:System.Threading.AutoResetEvent>, они ждут на другом <xref:System.Threading.AutoResetEvent> , созданного в сигнальное состояние.</span><span class="sxs-lookup"><span data-stu-id="4686f-131">After the threads are released from the first <xref:System.Threading.AutoResetEvent>, they wait on another <xref:System.Threading.AutoResetEvent> that was created in the non-signaled state.</span></span> <span data-ttu-id="4686f-132">Заблокировать все три потока, поэтому <xref:System.Threading.EventWaitHandle.Set%2A> метод должен вызываться три раза, чтобы освободить их все.</span><span class="sxs-lookup"><span data-stu-id="4686f-132">All three threads block, so the <xref:System.Threading.EventWaitHandle.Set%2A> method must be called three times to release them all.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/simplerisbetter.cpp#3)]
 [!code-csharp[System.Threading.AutoResetEvent#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/simplerisbetter.cs#3)]
 [!code-vb[System.Threading.AutoResetEvent#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/simplerisbetter.vb#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="4686f-133">Этот класс является потокобезопасным.</span><span class="sxs-lookup"><span data-stu-id="4686f-133">This class is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="4686f-134">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="4686f-134">Managed Threading</span></span></related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="4686f-135">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="4686f-135">Overview of synchronization primitives</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AutoResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AutoResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.AutoResetEvent : bool -&gt; System.Threading.AutoResetEvent" Usage="new System.Threading.AutoResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState"><span data-ttu-id="4686f-136">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</span><span class="sxs-lookup"><span data-stu-id="4686f-136"><see langword="true" /> to set the initial state to signaled; <see langword="false" /> to set the initial state to non-signaled.</span></span></param>
        <summary><span data-ttu-id="4686f-137">Инициализирует новый экземпляр класса <see cref="T:System.Threading.AutoResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</span><span class="sxs-lookup"><span data-stu-id="4686f-137">Initializes a new instance of the <see cref="T:System.Threading.AutoResetEvent" /> class with a Boolean value indicating whether to set the initial state to signaled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4686f-138">В следующем примере используется <xref:System.Threading.AutoResetEvent> для синхронизации действий потоков два.</span><span class="sxs-lookup"><span data-stu-id="4686f-138">The following example uses an <xref:System.Threading.AutoResetEvent> to synchronize the activities of two threads.</span></span> <span data-ttu-id="4686f-139">Первый поток, являющийся потока приложения, выполняет `Main`.</span><span class="sxs-lookup"><span data-stu-id="4686f-139">The first thread, which is the application thread, executes `Main`.</span></span> <span data-ttu-id="4686f-140">Он записывает значения к защищенному ресурсу, который является `static` (`Shared` в Visual Basic) поле с именем `number`.</span><span class="sxs-lookup"><span data-stu-id="4686f-140">It writes values to the protected resource, which is a `static` (`Shared` in Visual Basic) field named `number`.</span></span> <span data-ttu-id="4686f-141">Второй поток выполняет статический `ThreadProc` метод, который считывает значения, записанные `Main`.</span><span class="sxs-lookup"><span data-stu-id="4686f-141">The second thread executes the static `ThreadProc` method, which reads the values written by `Main`.</span></span>  
  
 <span data-ttu-id="4686f-142">`ThreadProc` Метод ожидает <xref:System.Threading.AutoResetEvent>.</span><span class="sxs-lookup"><span data-stu-id="4686f-142">The `ThreadProc` method waits for the <xref:System.Threading.AutoResetEvent>.</span></span> <span data-ttu-id="4686f-143">Когда `Main` вызовы <xref:System.Threading.EventWaitHandle.Set%2A> метод <xref:System.Threading.AutoResetEvent>, `ThreadProc` метод считывает одно значение.</span><span class="sxs-lookup"><span data-stu-id="4686f-143">When `Main` calls the <xref:System.Threading.EventWaitHandle.Set%2A> method on the <xref:System.Threading.AutoResetEvent>, the `ThreadProc` method reads one value.</span></span> <span data-ttu-id="4686f-144"><xref:System.Threading.AutoResetEvent> Немедленно сбрасывается, поэтому `ThreadProc` метод ожидает еще раз.</span><span class="sxs-lookup"><span data-stu-id="4686f-144">The <xref:System.Threading.AutoResetEvent> immediately resets, so the `ThreadProc` method waits again.</span></span>  
  
 <span data-ttu-id="4686f-145">Логику программы гарантирует, что `ThreadProc` метод никогда не считывает значение два раза.</span><span class="sxs-lookup"><span data-stu-id="4686f-145">The program logic guarantees that the `ThreadProc` method will never read the same value two times.</span></span> <span data-ttu-id="4686f-146">Он не гарантирует, что `ThreadProc` метод считывает все значения, написанной `Main`.</span><span class="sxs-lookup"><span data-stu-id="4686f-146">It does not guarantee that the `ThreadProc` method will read every value written by `Main`.</span></span> <span data-ttu-id="4686f-147">Такой гарантии потребует секунды <xref:System.Threading.AutoResetEvent> блокировки.</span><span class="sxs-lookup"><span data-stu-id="4686f-147">That guarantee would require a second <xref:System.Threading.AutoResetEvent> lock.</span></span>  
  
 <span data-ttu-id="4686f-148">После каждой операции записи `Main` дает путем вызова <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> метод, чтобы предоставить возможность выполнения второй поток.</span><span class="sxs-lookup"><span data-stu-id="4686f-148">After each write operation, `Main` yields by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method, to give the second thread a chance to execute.</span></span> <span data-ttu-id="4686f-149">В противном случае — на однопроцессорном компьютере `Main` написать много значений между любыми двумя операций чтения.</span><span class="sxs-lookup"><span data-stu-id="4686f-149">Otherwise, on a single-processor computer `Main` would write many values between any two read operations.</span></span>  
  
 [!code-cpp[System.Threading.AutoResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CPP/class1.cpp#1)]
 [!code-csharp[System.Threading.AutoResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/CS/class1.cs#1)]
 [!code-vb[System.Threading.AutoResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.AutoResetEvent/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md"><span data-ttu-id="4686f-150">Управляемая поточность</span><span class="sxs-lookup"><span data-stu-id="4686f-150">Managed Threading</span></span></related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md"><span data-ttu-id="4686f-151">Общие сведения о примитивах синхронизации</span><span class="sxs-lookup"><span data-stu-id="4686f-151">Overview of synchronization primitives</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="autoResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4686f-152">Задает несигнальное состояние события, вызывая блокирование потоков.</span><span class="sxs-lookup"><span data-stu-id="4686f-152">Sets the state of the event to nonsignaled, which causes threads to block.</span></span></summary>
        <returns><span data-ttu-id="4686f-153"><see langword="true" />, если операция прошла успешно; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4686f-153"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.AutoResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="autoResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4686f-154">Задает сигнальное состояние события, позволяя одному или нескольким ожидающим потокам продолжить.</span><span class="sxs-lookup"><span data-stu-id="4686f-154">Sets the state of the event to signaled, which allows at most one waiting thread to proceed.</span></span></summary>
        <returns><span data-ttu-id="4686f-155"><see langword="true" />, если операция прошла успешно; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="4686f-155"><see langword="true" /> if the operation succeeds; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="4686f-156">Метод Set освобождает один поток.</span><span class="sxs-lookup"><span data-stu-id="4686f-156">The Set method releases a single thread.</span></span> <span data-ttu-id="4686f-157">Если нет ожидающих потоков, дескриптор ожидания остается сигнальным до поток попытается ожидать ее, или пока не будет вызван его метод Reset.</span><span class="sxs-lookup"><span data-stu-id="4686f-157">If there are no waiting threads, the wait handle remains signaled until a thread attempts to wait on it, or until its Reset method is called.</span></span>

> [!IMPORTANT]
> <span data-ttu-id="4686f-158">Нет никакой гарантии, что при каждом вызове метода Set выпустит потока.</span><span class="sxs-lookup"><span data-stu-id="4686f-158">There is no guarantee that every call to the Set method will release a thread.</span></span> <span data-ttu-id="4686f-159">Если два вызова находятся слишком близко друг к другу, что второй вызов происходит до выпустила поток, освобождается только один поток - так, как если не произошел второй вызов.</span><span class="sxs-lookup"><span data-stu-id="4686f-159">If two calls are too close together, so that the second call occurs before a thread has been released, only one thread is released - as if the second call did not happen.</span></span> <span data-ttu-id="4686f-160">Кроме того Если вызывается метод Set, при наличии потоки, ожидающие и <xref:System.Threading.AutoResetEvent> уже есть сигнал, вызов не оказывает влияния.</span><span class="sxs-lookup"><span data-stu-id="4686f-160">Also, if the Set method is called when there are no threads waiting and the <xref:System.Threading.AutoResetEvent> is already signaled, the call has no effect.</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>