<Type Name="ParameterizedThreadStart" FullName="System.Threading.ParameterizedThreadStart">
  <Metadata><Meta Name="ms.openlocfilehash" Value="33bf1e7037d4fd595a1fa1ff8e3d19fffbfa234b" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58740087" /></Metadata><TypeSignature Language="C#" Value="public delegate void ParameterizedThreadStart(object obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ParameterizedThreadStart extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ParameterizedThreadStart" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ParameterizedThreadStart(obj As Object)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ParameterizedThreadStart(System::Object ^ obj);" />
  <TypeSignature Language="F#" Value="type ParameterizedThreadStart = delegate of obj -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Thread</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="obj" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="obj"><span data-ttu-id="0102d-101">Объект, содержащий данные потоковой процедуры.</span><span class="sxs-lookup"><span data-stu-id="0102d-101">An object that contains data for the thread procedure.</span></span></param>
    <summary><span data-ttu-id="0102d-102">Представляет метод, выполняющийся в объекте <see cref="T:System.Threading.Thread" />.</span><span class="sxs-lookup"><span data-stu-id="0102d-102">Represents the method that executes on a <see cref="T:System.Threading.Thread" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0102d-103">При создании управляемого потока, представленного метод, который выполняется в потоке:</span><span class="sxs-lookup"><span data-stu-id="0102d-103">When a managed thread is created, the method that executes on the thread is represented by:</span></span>  
  
-   <span data-ttu-id="0102d-104">Объект <xref:System.Threading.ThreadStart> делегат, который передается <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0102d-104">A <xref:System.Threading.ThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=nameWithType> constructor.</span></span>  <span data-ttu-id="0102d-105">Любой метод, который не имеет параметров и возвращает `void` в C# или `Sub` процедуры в Visual Basic может представлять делегат.</span><span class="sxs-lookup"><span data-stu-id="0102d-105">Any method that has no parameters and that returns `void` in C# or is a `Sub` procedure in Visual Basic can represent the delegate.</span></span>  
  
-   <span data-ttu-id="0102d-106">Объект <xref:System.Threading.ParameterizedThreadStart> делегат, который передается <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> конструктор.</span><span class="sxs-lookup"><span data-stu-id="0102d-106">A <xref:System.Threading.ParameterizedThreadStart> delegate that is passed to the <xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%29?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="0102d-107">Любой метод, который имеет один параметр типа <xref:System.Object> и возвращает значение void в C#, являющийся процедуру Sub в Visual Basic может представлять делегат.</span><span class="sxs-lookup"><span data-stu-id="0102d-107">Any method that has a single parameter of type <xref:System.Object> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</span></span>  
  
 <span data-ttu-id="0102d-108">Поток не запускается до <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="0102d-108">The thread does not begin executing until the <xref:System.Threading.Thread.Start%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="0102d-109"><xref:System.Threading.ThreadStart> Или <xref:System.Threading.ParameterizedThreadStart> делегат вызывается в потоке, и начинается выполнение на первой строке метода, представленный делегатом.</span><span class="sxs-lookup"><span data-stu-id="0102d-109">The <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate.</span></span> <span data-ttu-id="0102d-110">В случае использования <xref:System.Threading.ParameterizedThreadStart> делегировать, объект, который передается <xref:System.Threading.Thread.Start%28System.Object%29> методу передается делегату.</span><span class="sxs-lookup"><span data-stu-id="0102d-110">In the case of the <xref:System.Threading.ParameterizedThreadStart> delegate, the object that is passed to the <xref:System.Threading.Thread.Start%28System.Object%29> method is passed to the delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0102d-111">Пользователи Visual Basic и C# можно опустить <xref:System.Threading.ThreadStart> или <xref:System.Threading.ParameterizedThreadStart> конструктора делегата при создании потока.</span><span class="sxs-lookup"><span data-stu-id="0102d-111">Visual Basic and C# users can omit the <xref:System.Threading.ThreadStart> or <xref:System.Threading.ParameterizedThreadStart> delegate constructor when creating a thread.</span></span> <span data-ttu-id="0102d-112">В Visual Basic, использовать `AddressOf` оператор при передаче метод <xref:System.Threading.Thread.%23ctor%2A> конструктор, например `Dim t As New Thread(AddressOf ThreadProc)`.</span><span class="sxs-lookup"><span data-stu-id="0102d-112">In Visual Basic, use the `AddressOf` operator when passing your method to the <xref:System.Threading.Thread.%23ctor%2A> constructor; for example, `Dim t As New Thread(AddressOf ThreadProc)`.</span></span> <span data-ttu-id="0102d-113">В C# просто укажите имя процедуры потока.</span><span class="sxs-lookup"><span data-stu-id="0102d-113">In C#, simply specify the name of the thread procedure.</span></span> <span data-ttu-id="0102d-114">Компилятор выбирает соответствующий конструктор делегата.</span><span class="sxs-lookup"><span data-stu-id="0102d-114">The compiler selects the correct delegate constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0102d-115">При создании <xref:System.Threading.ParameterizedThreadStart> делегат для метода экземпляра в C++, первый параметр конструктора является переменной экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0102d-115">When you create a <xref:System.Threading.ParameterizedThreadStart> delegate for an instance method in C++, the first parameter of the constructor is the instance variable.</span></span> <span data-ttu-id="0102d-116">Для статического метода первый параметр конструктора равно нулю.</span><span class="sxs-lookup"><span data-stu-id="0102d-116">For a static method, the first parameter of the constructor is zero.</span></span> <span data-ttu-id="0102d-117">Для статического метода, конструктора делегата требуется только один параметр: адрес метода обратного вызова, дополненное имя класса.</span><span class="sxs-lookup"><span data-stu-id="0102d-117">For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</span></span>  
  
 <span data-ttu-id="0102d-118"><xref:System.Threading.ParameterizedThreadStart> Делегировать и <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> перегрузку метода позволяют легко передавать данные в процедуру потока, но этот метод не является строго типизированным, так как любой объект может быть передан <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="0102d-118">The <xref:System.Threading.ParameterizedThreadStart> delegate and the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0102d-119">Для размещения процедуры потока и полей данных в рабочий объект является более надежным способом для передачи данных в процедуру потока.</span><span class="sxs-lookup"><span data-stu-id="0102d-119">A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object.</span></span> <span data-ttu-id="0102d-120">Дополнительные сведения см. в разделе [создание потоков и передача данных во время запуска](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span><span class="sxs-lookup"><span data-stu-id="0102d-120">For more information, see [Creating Threads and Passing Data at Start Time](~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md).</span></span>  
  
 <span data-ttu-id="0102d-121"><xref:System.Threading.ParameterizedThreadStart> Делегат поддерживает только один параметр.</span><span class="sxs-lookup"><span data-stu-id="0102d-121">The <xref:System.Threading.ParameterizedThreadStart> delegate supports only a single parameter.</span></span> <span data-ttu-id="0102d-122">Вы можете передать несколько элементов данных, чтобы <xref:System.Threading.ParameterizedThreadStart> благодаря этому параметру, одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="0102d-122">You can pass multiple data items to the <xref:System.Threading.ParameterizedThreadStart> by making that parameter one of the following:</span></span>  
  
-   <span data-ttu-id="0102d-123">Массив.</span><span class="sxs-lookup"><span data-stu-id="0102d-123">An array.</span></span>  
  
-   <span data-ttu-id="0102d-124">Тип коллекции, если все элементы данных одного типа.</span><span class="sxs-lookup"><span data-stu-id="0102d-124">A collection type, if all of the data items are of the same type.</span></span>  
  
-   <span data-ttu-id="0102d-125">Тип кортежа, например <xref:System.Tuple%602> или <xref:System.Tuple%604>.</span><span class="sxs-lookup"><span data-stu-id="0102d-125">A tuple type, such as <xref:System.Tuple%602> or <xref:System.Tuple%604>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0102d-126">В следующем примере кода используется <xref:System.Threading.ParameterizedThreadStart> делегат для выполнения статическим методом и методом экземпляра.</span><span class="sxs-lookup"><span data-stu-id="0102d-126">The following code example uses a <xref:System.Threading.ParameterizedThreadStart> delegate to execute a static method and an instance method.</span></span> <span data-ttu-id="0102d-127">Первый <xref:System.Threading.ParameterizedThreadStart> делегат представлен статическим `DoWork` метод, а второй представлен экземпляром `DoMoreWork` метод.</span><span class="sxs-lookup"><span data-stu-id="0102d-127">The first <xref:System.Threading.ParameterizedThreadStart> delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method.</span></span> <span data-ttu-id="0102d-128">Оба метода соответствует <xref:System.Threading.ParameterizedThreadStart> сигнатуре делегата; то есть они имеют один параметр типа <xref:System.Object> и не возвращает значений.</span><span class="sxs-lookup"><span data-stu-id="0102d-128">Both methods match the <xref:System.Threading.ParameterizedThreadStart> delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="0102d-129">Компиляторы Visual Basic и C# определяют <xref:System.Threading.ParameterizedThreadStart> делегата из сигнатуры `DoWork` и `DoMoreWork` методов и вызовите метод надлежащий конструктор.</span><span class="sxs-lookup"><span data-stu-id="0102d-129">The Visual Basic and C# compilers infer the <xref:System.Threading.ParameterizedThreadStart> delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor.</span></span> <span data-ttu-id="0102d-130">Таким образом отсутствует явный конструктор вызов в коде.</span><span class="sxs-lookup"><span data-stu-id="0102d-130">Thus, there is no explicit constructor call in the code.</span></span>  
  
 [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/CS/source.cs#1)]
 [!code-vb[System.Threading.ParameterizedThreadStart#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ParameterizedThreadStart/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Threading.ThreadStart" />
    <altmember cref="T:System.Threading.Thread" />
    <altmember cref="Overload:System.Threading.Thread.Start" />
    <altmember cref="T:System.AppDomain" />
    <related type="Article" href="~/docs/standard/threading/creating-threads-and-passing-data-at-start-time.md"><span data-ttu-id="0102d-131">Создание потоков</span><span class="sxs-lookup"><span data-stu-id="0102d-131">Creating Threads</span></span></related>
  </Docs>
</Type>