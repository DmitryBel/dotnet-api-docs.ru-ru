<Type Name="SpinLock" FullName="System.Threading.SpinLock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a9968c671067a22cf9e81da2cfb7a0510bf86e40" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58682791" /></Metadata><TypeSignature Language="C#" Value="public struct SpinLock" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit SpinLock extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Threading.SpinLock" />
  <TypeSignature Language="VB.NET" Value="Public Structure SpinLock" />
  <TypeSignature Language="C++ CLI" Value="public value class SpinLock" />
  <TypeSignature Language="F#" Value="type SpinLock = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("IsHeld = {IsHeld}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.SpinLock/SystemThreading_SpinLockDebugView))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="98173-101">Предоставляет примитив взаимно исключающей блокировки, в котором поток, пытающийся получить блокировку, ожидает в состоянии цикла, проверяя доступность блокировки.</span><span class="sxs-lookup"><span data-stu-id="98173-101">Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-102">Пример использования спин-блокировки, см. в разделе [как: SpinLock и низкоуровневая синхронизация](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span><span class="sxs-lookup"><span data-stu-id="98173-102">For an example of how to use a Spin Lock, see [How to: Use SpinLock for Low-Level Synchronization](~/docs/standard/threading/how-to-use-spinlock-for-low-level-synchronization.md).</span></span>  
  
 <span data-ttu-id="98173-103">Спин-блокировки может использоваться для блокировок конечного уровня где подразумеваемых выделение объектов с помощью <xref:System.Threading.Monitor>, размер, или из-за нехватки сбора мусора, слишком затратно.</span><span class="sxs-lookup"><span data-stu-id="98173-103">Spin locks can be used for leaf-level locks where the object allocation implied by using a <xref:System.Threading.Monitor>, in size or due to garbage collection pressure, is overly expensive.</span></span> <span data-ttu-id="98173-104">Спин-блокировки, которые можно использовать для предотвращения блокировки; Тем не менее если предполагается значительный объем блокировки, скорее всего, не следует использовать спин-блокировки из-за слишком большого количества циклов.</span><span class="sxs-lookup"><span data-stu-id="98173-104">A spin lock can be useful to avoid blocking; however, if you expect a significant amount of blocking, you should probably not use spin locks due to excessive spinning.</span></span> <span data-ttu-id="98173-105">Когда блокировки являются детализированными и много (например, блокируется каждый узел в связанном списке), а также когда время удержания блокировки всегда является очень коротким, цикличность может оказаться выгодным.</span><span class="sxs-lookup"><span data-stu-id="98173-105">Spinning can be beneficial when locks are fine-grained and large in number (for example, a lock per node in a linked list) and also when lock hold-times are always extremely short.</span></span> <span data-ttu-id="98173-106">Как правило удерживая спин-блокировки, одного следует избегать любое из этих действий:</span><span class="sxs-lookup"><span data-stu-id="98173-106">In general, while holding a spin lock, one should avoid any of these actions:</span></span>  
  
-   <span data-ttu-id="98173-107">блокировки,</span><span class="sxs-lookup"><span data-stu-id="98173-107">blocking,</span></span>  
  
-   <span data-ttu-id="98173-108">вызов элемента, в свою очередь может блокировать,</span><span class="sxs-lookup"><span data-stu-id="98173-108">calling anything that itself may block,</span></span>  
  
-   <span data-ttu-id="98173-109">за один раз, удерживая более чем одной спин-блокировки</span><span class="sxs-lookup"><span data-stu-id="98173-109">holding more than one spin lock at once,</span></span>  
  
-   <span data-ttu-id="98173-110">Создание динамически распределяемых вызовов (интерфейс и виртуальные функции),</span><span class="sxs-lookup"><span data-stu-id="98173-110">making dynamically dispatched calls (interface and virtuals),</span></span>  
  
-   <span data-ttu-id="98173-111">Создание статически распределяемых вызовов к любому коду, одно не является владельцем, или</span><span class="sxs-lookup"><span data-stu-id="98173-111">making statically dispatched calls into any code one doesn't own, or</span></span>  
  
-   <span data-ttu-id="98173-112">выделение памяти.</span><span class="sxs-lookup"><span data-stu-id="98173-112">allocating memory.</span></span>  
  
 <span data-ttu-id="98173-113"><xref:System.Threading.SpinLock> следует использовать только после было решено, что это улучшит производительность приложения.</span><span class="sxs-lookup"><span data-stu-id="98173-113"><xref:System.Threading.SpinLock> should only be used after you have been determined that doing so will improve an application's performance.</span></span> <span data-ttu-id="98173-114">Также важно отметить, что <xref:System.Threading.SpinLock> является типом значения, для повышения производительности.</span><span class="sxs-lookup"><span data-stu-id="98173-114">It is also important to note that <xref:System.Threading.SpinLock> is a value type, for performance reasons.</span></span> <span data-ttu-id="98173-115">По этой причине необходимо быть очень осторожным, чтобы случайно не скопировать <xref:System.Threading.SpinLock> экземпляра, как два экземпляра (оригинал и копия) будут полностью независимы друг от друга, что скорее всего приведет к ошибочному поведению приложения.</span><span class="sxs-lookup"><span data-stu-id="98173-115">For this reason, you must be very careful not to accidentally copy a <xref:System.Threading.SpinLock> instance, as the two instances (the original and the copy) would then be completely independent of one another, which would likely lead to erroneous behavior of the application.</span></span> <span data-ttu-id="98173-116">Если <xref:System.Threading.SpinLock> должен передавать экземпляр, он должен быть передан по ссылке, а не по значению.</span><span class="sxs-lookup"><span data-stu-id="98173-116">If a <xref:System.Threading.SpinLock> instance must be passed around, it should be passed by reference rather than by value.</span></span>  
  
 <span data-ttu-id="98173-117">Не храните <xref:System.Threading.SpinLock> экземпляров в поля только для чтения.</span><span class="sxs-lookup"><span data-stu-id="98173-117">Do not store <xref:System.Threading.SpinLock> instances in readonly fields.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98173-118">В следующем примере показано, как использовать <xref:System.Threading.SpinLock>:</span><span class="sxs-lookup"><span data-stu-id="98173-118">The following example shows how to use a <xref:System.Threading.SpinLock>:</span></span>  
  
 [!code-csharp[System.Threading.SpinLock#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinlock/cs/spinlock.cs#01)]
 [!code-vb[System.Threading.SpinLock#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinlock/vb/spinlock.vb#01)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="98173-119">Все члены <see cref="T:System.Threading.SpinLock" /> являются потокобезопасными и могут быть использованы из нескольких потоков одновременно.</span><span class="sxs-lookup"><span data-stu-id="98173-119">All members of <see cref="T:System.Threading.SpinLock" /> are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-120">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-120">SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-121">Практическое руководство. Использование объекта SpinWait и спин-блокировки</span><span class="sxs-lookup"><span data-stu-id="98173-121">How to: Use SpinWait and SpinLock</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-122">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-122">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpinLock (bool enableThreadOwnerTracking);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableThreadOwnerTracking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableThreadOwnerTracking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpinLock(bool enableThreadOwnerTracking);" />
      <MemberSignature Language="F#" Value="new System.Threading.SpinLock : bool -&gt; System.Threading.SpinLock" Usage="new System.Threading.SpinLock enableThreadOwnerTracking" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enableThreadOwnerTracking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableThreadOwnerTracking"><span data-ttu-id="98173-123">Следует ли перенаправлять и использовать идентификаторы потоков для отладки.</span><span class="sxs-lookup"><span data-stu-id="98173-123">Whether to capture and use thread IDs for debugging purposes.</span></span></param>
        <summary><span data-ttu-id="98173-124">Инициализирует новый экземпляр структуры <see cref="T:System.Threading.SpinLock" /> параметром для отслеживания идентификаторов потоков для повышения качества отладки.</span><span class="sxs-lookup"><span data-stu-id="98173-124">Initializes a new instance of the <see cref="T:System.Threading.SpinLock" /> structure with the option to track thread IDs to improve debugging.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-125">Конструктор по умолчанию для <xref:System.Threading.SpinLock> отслеживает поток владения.</span><span class="sxs-lookup"><span data-stu-id="98173-125">The default constructor for <xref:System.Threading.SpinLock> tracks thread ownership.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="98173-126">Ниже приведен пример использования спин-блокировки.</span><span class="sxs-lookup"><span data-stu-id="98173-126">The following example demonstrates how a SpinLock may be used.</span></span>  
  
```csharp  
// C#  
public class MyType  
{  
    private SpinLock _spinLock = new SpinLock();  
  
    public void DoWork()  
    {  
        bool lockTaken = false;   
        try  
        {  
           _spinLock.Enter(ref lockTaken);  
           // do work here protected by the lock  
        }  
        finally  
        {  
            if (lockTaken) _spinLock.Exit();  
        }  
    }  
}  
```  
  
```vb  
' Visual Basic  
  
Class MyType  
   Private _spinLock As New SpinLock()  
  
   Public Sub DoWork()  
      Dim lockTaken As Boolean = False  
      Try  
         _spinLock.Enter(lockTaken)  
         ' do work here protected by the lock  
      Finally  
         If lockTaken Then _spinLock.Exit()  
      End Try  
   End Sub  
End Class  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-127">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-127">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-128">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-128">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-129">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-129">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Enter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Enter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.Enter :  -&gt; unit" Usage="spinLock.Enter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="98173-130">Значение true, если блокировка получена; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-130">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="98173-131">Перед вызовом этого метода необходимо инициализировать параметр <paramref name="lockTaken" />.</span><span class="sxs-lookup"><span data-stu-id="98173-131"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="98173-132">Получает блокировку надежным способом, то есть даже если в вызове метода возникает исключение, <paramref name="lockTaken" /> можно надежно изучить и определить, была ли получена блокировка.</span><span class="sxs-lookup"><span data-stu-id="98173-132">Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-133"><xref:System.Threading.SpinLock> блокировка не допускающий повторные входы, это означает, что если поток владеет блокировкой, она не должна снова войти в блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-133"><xref:System.Threading.SpinLock> is a non-reentrant lock, meaning that if a thread holds the lock, it is not allowed to enter the lock again.</span></span> <span data-ttu-id="98173-134">Если включено отслеживание владения потоков (включен ли он доступен через <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), будет создано исключение, если поток пытается повторно войти в уже удерживает блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-134">If thread ownership tracking is enabled (whether it's enabled is available through <xref:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled%2A>), an exception will be thrown when a thread tries to re-enter a lock it already holds.</span></span> <span data-ttu-id="98173-135">Тем не менее если отслеживание владения потоков отключено, попытка ввести уже удерживаемую блокировку приведет к взаимоблокировке.</span><span class="sxs-lookup"><span data-stu-id="98173-135">However, if thread ownership tracking is disabled, attempting to enter a lock already held will result in deadlock.</span></span>  
  
 <span data-ttu-id="98173-136">При вызове метода <xref:System.Threading.SpinLock.Exit%2A> без сначала вызывается <xref:System.Threading.SpinLock.Enter%2A> внутреннее состояние объекта <xref:System.Threading.SpinLock> могут быть повреждены.</span><span class="sxs-lookup"><span data-stu-id="98173-136">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98173-137">Аргумент <paramref name="lockTaken" /> должен быть инициализирован в false до вызова Enter.</span><span class="sxs-lookup"><span data-stu-id="98173-137">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling Enter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="98173-138">Включено отслеживание владения потоками, и текущий поток уже получил эту блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-138">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-139">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-139">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-140">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-140">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-141">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-141">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98173-142">Снимает блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-142">Releases the lock.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit();" />
      <MemberSignature Language="F#" Value="member this.Exit : unit -&gt; unit" Usage="spinLock.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="98173-143">Снимает блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-143">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-144">Перегрузка по умолчанию <xref:System.Threading.SpinLock.Exit%2A> обеспечивает такое же поведение, как если бы вызов <xref:System.Threading.SpinLock.Exit%2A> используя в качестве аргумента значение true.</span><span class="sxs-lookup"><span data-stu-id="98173-144">The default overload of <xref:System.Threading.SpinLock.Exit%2A> provides the same behavior as if calling <xref:System.Threading.SpinLock.Exit%2A> using true as the argument.</span></span>  
  
 <span data-ttu-id="98173-145">При вызове метода <xref:System.Threading.SpinLock.Exit%2A> без сначала вызывается <xref:System.Threading.SpinLock.Enter%2A> внутреннее состояние объекта <xref:System.Threading.SpinLock> могут быть повреждены.</span><span class="sxs-lookup"><span data-stu-id="98173-145">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="98173-146">Включено отслеживание владения потоков и текущий поток не является владельцем этой блокировки.</span><span class="sxs-lookup"><span data-stu-id="98173-146">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-147">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-147">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-148">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-148">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-149">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-149">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public void Exit (bool useMemoryBarrier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Exit(bool useMemoryBarrier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.Exit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Exit (useMemoryBarrier As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Exit(bool useMemoryBarrier);" />
      <MemberSignature Language="F#" Value="member this.Exit : bool -&gt; unit" Usage="spinLock.Exit useMemoryBarrier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useMemoryBarrier" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useMemoryBarrier"><span data-ttu-id="98173-150">Логическое значение, указывающее, следует ли выпустить барьер памяти, чтобы немедленно опубликовать операцию выхода для других потоков.</span><span class="sxs-lookup"><span data-stu-id="98173-150">A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</span></span></param>
        <summary><span data-ttu-id="98173-151">Снимает блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-151">Releases the lock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-152">Вызов <xref:System.Threading.SpinLock.Exit%2A> с `useMemoryBarrier` аргумента задано значение true будет улучшить распределение ресурсов блокировки за счет производительности.</span><span class="sxs-lookup"><span data-stu-id="98173-152">Calling <xref:System.Threading.SpinLock.Exit%2A> with the `useMemoryBarrier` argument set to true will improve the fairness of the lock at the expense of some performance.</span></span> <span data-ttu-id="98173-153">Значение по умолчанию <xref:System.Threading.SpinLock.Exit%2A> перегруженный метод ведет себя так, как если бы указав значение true для `useMemoryBarrier`.</span><span class="sxs-lookup"><span data-stu-id="98173-153">The default <xref:System.Threading.SpinLock.Exit%2A> overload behaves as if specifying true for `useMemoryBarrier`.</span></span>  
  
 <span data-ttu-id="98173-154">При вызове метода <xref:System.Threading.SpinLock.Exit%2A> без сначала вызывается <xref:System.Threading.SpinLock.Enter%2A> внутреннее состояние объекта <xref:System.Threading.SpinLock> могут быть повреждены.</span><span class="sxs-lookup"><span data-stu-id="98173-154">If you call <xref:System.Threading.SpinLock.Exit%2A> without having first called <xref:System.Threading.SpinLock.Enter%2A> the internal state of the <xref:System.Threading.SpinLock> can become corrupted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Threading.SynchronizationLockException"><span data-ttu-id="98173-155">Включено отслеживание владения потоков и текущий поток не является владельцем этой блокировки.</span><span class="sxs-lookup"><span data-stu-id="98173-155">Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-156">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-156">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-157">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-157">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-158">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-158">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeld">
      <MemberSignature Language="C#" Value="public bool IsHeld { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeld" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeld" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeld As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeld { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeld : bool" Usage="System.Threading.SpinLock.IsHeld" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98173-159">Получает значение, определяющее, имеет ли какой-либо поток блокировку в настоящий момент.</span><span class="sxs-lookup"><span data-stu-id="98173-159">Gets whether the lock is currently held by any thread.</span></span></summary>
        <value><span data-ttu-id="98173-160">Значение true, если в настоящее время блокировка удерживается каким-либо потоком; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-160">true if the lock is currently held by any thread; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-161">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-161">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-162">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-162">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-163">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-163">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsHeldByCurrentThread">
      <MemberSignature Language="C#" Value="public bool IsHeldByCurrentThread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHeldByCurrentThread" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHeldByCurrentThread As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHeldByCurrentThread { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHeldByCurrentThread : bool" Usage="System.Threading.SpinLock.IsHeldByCurrentThread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98173-164">Получает значение, определяющее, имеет ли текущий поток блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-164">Gets whether the lock is held by the current thread.</span></span></summary>
        <value><span data-ttu-id="98173-165">Значение true, если блокировка удерживается текущим потоком; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-165">true if the lock is held by the current thread; otherwise false.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-166">Если блокировка была инициализирована для отслеживания потоков владельца, возвращается ли блокировка получена текущим потоком.</span><span class="sxs-lookup"><span data-stu-id="98173-166">If the lock was initialized to track owner threads, this will return whether the lock is acquired by the current thread.</span></span> <span data-ttu-id="98173-167">Не допускается использовать это свойство при инициализации блокировки, чтобы не отслеживать поток-владелец.</span><span class="sxs-lookup"><span data-stu-id="98173-167">It is invalid to use this property when the lock was initialized to not track thread ownership.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="98173-168">Отслеживание владения потоков отключено.</span><span class="sxs-lookup"><span data-stu-id="98173-168">Thread ownership tracking is disabled.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-169">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-169">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-170">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-170">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-171">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-171">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsThreadOwnerTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool IsThreadOwnerTrackingEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsThreadOwnerTrackingEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsThreadOwnerTrackingEnabled : bool" Usage="System.Threading.SpinLock.IsThreadOwnerTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98173-172">Получает значение, указывающее, включено ли отслеживание владельца потока для данного экземпляра.</span><span class="sxs-lookup"><span data-stu-id="98173-172">Gets whether thread ownership tracking is enabled for this instance.</span></span></summary>
        <value><span data-ttu-id="98173-173">Значение true, если для данного экземпляра включено отслеживание владельца потока; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-173">true if thread ownership tracking is enabled for this instance; otherwise false.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-174">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-174">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-175">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-175">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-176">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-176">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryEnter">
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="98173-177">Пытается получить блокировку надежным способом, то есть даже если в вызове метода возникает исключение, <paramref name="lockTaken" /> можно надежно изучить и определить, была ли получена блокировка.</span><span class="sxs-lookup"><span data-stu-id="98173-177">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-178">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-178">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-179">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-179">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-180">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-180">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter :  -&gt; unit" Usage="spinLock.TryEnter lockTaken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="lockTaken"><span data-ttu-id="98173-181">Значение true, если блокировка получена; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-181">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="98173-182">Перед вызовом этого метода необходимо инициализировать параметр <paramref name="lockTaken" />.</span><span class="sxs-lookup"><span data-stu-id="98173-182"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="98173-183">Пытается получить блокировку надежным способом, то есть даже если в вызове метода возникает исключение, <paramref name="lockTaken" /> можно надежно изучить и определить, была ли получена блокировка.</span><span class="sxs-lookup"><span data-stu-id="98173-183">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-184">В отличие от <xref:System.Threading.SpinLock.Enter%2A>, TryEnter, не будет блокировать ожидание блокировки, чтобы быть доступными.</span><span class="sxs-lookup"><span data-stu-id="98173-184">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block waiting for the lock to be available.</span></span> <span data-ttu-id="98173-185">Если блокировка недоступна, когда вызывается TryEnter, возвращается немедленно без дальнейшего вращения.</span><span class="sxs-lookup"><span data-stu-id="98173-185">If the lock is not available when TryEnter is called, it will return immediately without any further spinning.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98173-186">Аргумент <paramref name="lockTaken" /> должен быть инициализирован в false до вызова TryEnter.</span><span class="sxs-lookup"><span data-stu-id="98173-186">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="98173-187">Включено отслеживание владения потоками, и текущий поток уже получил эту блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-187">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-188">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-188">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-189">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-189">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-190">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-190">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (int millisecondsTimeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(int32 millisecondsTimeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (millisecondsTimeout As Integer, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(int millisecondsTimeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : int *  -&gt; unit" Usage="spinLock.TryEnter (millisecondsTimeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="98173-191">Время ожидания в миллисекундах или функция <see cref="F:System.Threading.Timeout.Infinite" /> (-1) в случае неограниченного времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="98173-191">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="98173-192">Значение true, если блокировка получена; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-192">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="98173-193">Перед вызовом этого метода необходимо инициализировать параметр <paramref name="lockTaken" />.</span><span class="sxs-lookup"><span data-stu-id="98173-193"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="98173-194">Пытается получить блокировку надежным способом, то есть даже если в вызове метода возникает исключение, <paramref name="lockTaken" /> можно надежно изучить и определить, была ли получена блокировка.</span><span class="sxs-lookup"><span data-stu-id="98173-194">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-195">В отличие от <xref:System.Threading.SpinLock.Enter%2A>, TryEnter, не будет блокировать неограниченное время ожидания блокировки быть доступными.</span><span class="sxs-lookup"><span data-stu-id="98173-195">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="98173-196">Пока не станет доступна либо заблокировать или пока не будет заблокирован `millisecondsTimeout` истек.</span><span class="sxs-lookup"><span data-stu-id="98173-196">It will block until either the lock is available or until the `millisecondsTimeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98173-197">Параметр <paramref name="millisecondsTimeout" /> является отрицательным числом, отличным от –1, что означает бесконечное время ожидания.</span><span class="sxs-lookup"><span data-stu-id="98173-197"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98173-198">Аргумент <paramref name="lockTaken" /> должен быть инициализирован в false до вызова TryEnter.</span><span class="sxs-lookup"><span data-stu-id="98173-198">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="98173-199">Включено отслеживание владения потоками, и текущий поток уже получил эту блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-199">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-200">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-200">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-201">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-201">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-202">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-202">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryEnter">
      <MemberSignature Language="C#" Value="public void TryEnter (TimeSpan timeout, ref bool lockTaken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TryEnter(valuetype System.TimeSpan timeout, bool&amp; lockTaken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TryEnter (timeout As TimeSpan, ByRef lockTaken As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TryEnter(TimeSpan timeout, bool % lockTaken);" />
      <MemberSignature Language="F#" Value="member this.TryEnter : TimeSpan *  -&gt; unit" Usage="spinLock.TryEnter (timeout, lockTaken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="lockTaken" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="98173-203">Период <see cref="T:System.TimeSpan" />, представляющий время ожидания в миллисекундах, или период <see cref="T:System.TimeSpan" />, представляющий -1 миллисекунду для неограниченного ожидания.</span><span class="sxs-lookup"><span data-stu-id="98173-203">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <param name="lockTaken"><span data-ttu-id="98173-204">Значение true, если блокировка получена; в противном случае — значение false.</span><span class="sxs-lookup"><span data-stu-id="98173-204">True if the lock is acquired; otherwise, false.</span></span> <span data-ttu-id="98173-205">Перед вызовом этого метода необходимо инициализировать параметр <paramref name="lockTaken" />.</span><span class="sxs-lookup"><span data-stu-id="98173-205"><paramref name="lockTaken" /> must be initialized to false prior to calling this method.</span></span></param>
        <summary><span data-ttu-id="98173-206">Пытается получить блокировку надежным способом, то есть даже если в вызове метода возникает исключение, <paramref name="lockTaken" /> можно надежно изучить и определить, была ли получена блокировка.</span><span class="sxs-lookup"><span data-stu-id="98173-206">Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <paramref name="lockTaken" /> can be examined reliably to determine whether the lock was acquired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98173-207">В отличие от <xref:System.Threading.SpinLock.Enter%2A>, TryEnter, не будет блокировать неограниченное время ожидания блокировки быть доступными.</span><span class="sxs-lookup"><span data-stu-id="98173-207">Unlike <xref:System.Threading.SpinLock.Enter%2A>, TryEnter will not block indefinitely waiting for the lock to be available.</span></span> <span data-ttu-id="98173-208">Пока не станет доступна либо заблокировать или пока не будет заблокирован `timeout` истек.</span><span class="sxs-lookup"><span data-stu-id="98173-208">It will block until either the lock is available or until the `timeout` has expired.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="98173-209"><paramref name="timeout" /> является отрицательным числом, отличным от значения -1 миллисекунды, которое представляет неограниченное время ожидания - или - время ожидания больше <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="98173-209"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <see cref="F:System.Int32.MaxValue" /> milliseconds.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="98173-210">Аргумент <paramref name="lockTaken" /> должен быть инициализирован в false до вызова TryEnter.</span><span class="sxs-lookup"><span data-stu-id="98173-210">The <paramref name="lockTaken" /> argument must be initialized to false prior to calling TryEnter.</span></span></exception>
        <exception cref="T:System.Threading.LockRecursionException"><span data-ttu-id="98173-211">Включено отслеживание владения потоками, и текущий поток уже получил эту блокировку.</span><span class="sxs-lookup"><span data-stu-id="98173-211">Thread ownership tracking is enabled, and the current thread has already acquired this lock.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f9af93bb-7a0d-4ba5-afe8-74f48b6b6958"><span data-ttu-id="98173-212">SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-212">SpinLock</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/a9ed3e4e-4f29-4207-b730-ed0a51ecbc19"><span data-ttu-id="98173-213">Практическое руководство. SpinLock и низкоуровневая синхронизация</span><span class="sxs-lookup"><span data-stu-id="98173-213">How to: Use SpinLock for Low-Level Synchronization</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/62ee2e68-0bdd-4869-afc9-f0a57a11ae01"><span data-ttu-id="98173-214">Практическое руководство. Включение режима отслеживания потоков в SpinLock</span><span class="sxs-lookup"><span data-stu-id="98173-214">How to: Enable Thread-Tracking Mode in SpinLock</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>