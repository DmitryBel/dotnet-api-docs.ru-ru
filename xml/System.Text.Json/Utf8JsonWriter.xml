<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6bf8bd7fdfd80ccc415cee28e69de81768b96942" /><Meta Name="ms.sourcegitcommit" Value="e28b7b371ead27d99e20387b8243f09b0cdb9fb3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="04/12/2019" /><Meta Name="ms.locfileid" Value="59541649" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonWriter" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonWriter extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonWriter" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonWriter" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="5516a-101">Предоставляет высокопроизводительный API для однонаправленной некэшированной записи текста JSON в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5516a-102">`Utf8JsonWriter` Записывает текст последовательно с без кэширования и по умолчанию соответствует [RFC по JSON](https://tools.ietf.org/html/rfc8259), за исключением написания комментариев.</span><span class="sxs-lookup"><span data-stu-id="5516a-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="5516a-103">Метод, который пытается выполнить запись недопустимый JSON, когда проверка включена вызывает <xref:System.InvalidOperationException> с сообщением об ошибке зависящего от контекста.</span><span class="sxs-lookup"><span data-stu-id="5516a-103">A method that attempts to write invalid JSON when validation is enabled throws a <xref:System.InvalidOperationException> with a context-specific error message.</span></span>
<span data-ttu-id="5516a-104">Так как этот тип является ссылочной структурой, он не поддерживает непосредственно async.</span><span class="sxs-lookup"><span data-stu-id="5516a-104">Since this type is a ref struct, it does not directly support async.</span></span> <span data-ttu-id="5516a-105">Тем не менее он обеспечивает поддержку для повторного входа для записи части данных и продолжить запись в виде фрагментов.</span><span class="sxs-lookup"><span data-stu-id="5516a-105">However, it does provide support for reentrancy to write partial data and to continue writing in chunks.</span></span>
<span data-ttu-id="5516a-106">Чтобы иметь возможность форматирования выходных данных с помощью отступов и пробелов или пропустить проверку, создать экземпляр <xref:System.Text.Json.JsonWriterState> и передать его в модуль записи.</span><span class="sxs-lookup"><span data-stu-id="5516a-106">To be able to format the output with indentation and white space OR to skip validation, create an instance of <xref:System.Text.Json.JsonWriterState> and pass that in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterState state = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional state As JsonWriterState = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterState -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="state" Type="System.Text.Json.JsonWriterState" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="5516a-107">Экземпляр <see cref="T:System.Buffers.IBufferWriter`1" /> используется в качестве назначения для записи текста JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-107">An instance of <see cref="T:System.Buffers.IBufferWriter`1" /> used as a destination for writing JSON text.</span></span></param>
        <param name="state"><span data-ttu-id="5516a-108">Структура, содержащая состояние модуля чтения.</span><span class="sxs-lookup"><span data-stu-id="5516a-108">A struct that contains the reader state.</span></span> <span data-ttu-id="5516a-109">При первом вызове конструктора она должна отражать состояние по умолчанию, в противном случае — записать состояние из предыдущего экземпляра <see cref="T:System.Text.Json.Utf8JsonWriter" /> и передать его обратно.</span><span class="sxs-lookup"><span data-stu-id="5516a-109">On the first call to the constructor, it should reflect a default state; otherwise, it should capture the state from the previous instance instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> and pass that back.</span></span></param>
        <summary><span data-ttu-id="5516a-110">Инициализирует новый экземпляр класса <see cref="T:System.Text.Json.Utf8JsonWriter" /> указанным значением <paramref name="bufferWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-110">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class with the specified <paramref name="bufferWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5516a-111">Так как этот тип является ссылочной структурой, он является типом только для стека, и к нему применяются все соответствующие ограничения ссылочные структуры.</span><span class="sxs-lookup"><span data-stu-id="5516a-111">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="5516a-112">Это причина, почему конструктор принимает <xref:System.Text.Json.JsonWriterState>.</span><span class="sxs-lookup"><span data-stu-id="5516a-112">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonWriterState>.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="5516a-113"><paramref name="bufferWriter" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-113"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5516a-114">Возвращает общее число байтов, зафиксированных в выходных данных структурой <see cref="T:System.Text.Json.Utf8JsonWriter" /> к настоящему времени для текущего экземпляра <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-114">Gets the total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="5516a-115">Это указывает, насколько далеко продвинулся <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-115">This indicates how much the <see cref="T:System.Buffers.IBufferWriter`1" /> has advanced.</span></span></summary>
        <value><span data-ttu-id="5516a-116">Общее число байтов, зафиксированных в выходные данные с учетом <see cref="T:System.Text.Json.Utf8JsonWriter" /> данный момент.</span><span class="sxs-lookup"><span data-stu-id="5516a-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public long BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesWritten { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5516a-117">Возвращает общее число байтов, записанных структурой <see cref="T:System.Text.Json.Utf8JsonWriter" /> к настоящему времени для текущего экземпляра <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-117">Gets the total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far for the current instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span>
<span data-ttu-id="5516a-118">Сюда входят данные, которые были записаны помимо уже зафиксированных.</span><span class="sxs-lookup"><span data-stu-id="5516a-118">This includes data that has been written beyond what has already been committed.</span></span></summary>
        <value><span data-ttu-id="5516a-119">Общее число байт, записанных <see cref="T:System.Text.Json.Utf8JsonWriter" /> данный момент.</span><span class="sxs-lookup"><span data-stu-id="5516a-119">The total number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5516a-120">Возвращает глубину текущего токена.</span><span class="sxs-lookup"><span data-stu-id="5516a-120">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="5516a-121">Глубина текущего маркера.</span><span class="sxs-lookup"><span data-stu-id="5516a-121">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5516a-122">`CurrentDepth` Свойство отслеживает глубину рекурсивных вложенных объектов / массивы в текст JSON, записаны на данный момент.</span><span class="sxs-lookup"><span data-stu-id="5516a-122">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush (bool isFinalBlock = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(bool isFinalBlock) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush (Optional isFinalBlock As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.Flush : bool -&gt; unit" Usage="utf8JsonWriter.Flush isFinalBlock" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isFinalBlock"><span data-ttu-id="5516a-123">Значение <see langword="true" />, чтобы указать, что новые данные записываться не будут; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-123"><see langword="true" /> to indicate no more data will be written; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="5516a-124">Это используется для проверки того, что записанная до этого момента JSON является структурно допустимой и позднее не будут передаваться дополнительные данные.</span><span class="sxs-lookup"><span data-stu-id="5516a-124">This is used to validate that the JSON written so far is structurally valid if no more data is to follow.</span></span></param>
        <summary><span data-ttu-id="5516a-125">Продвигает базовый <see cref="T:System.Buffers.IBufferWriter`1" /> в зависимости от того, что было записано к настоящему времени.</span><span class="sxs-lookup"><span data-stu-id="5516a-125">Advances the underlying <see cref="T:System.Buffers.IBufferWriter`1" /> based on what has been written so far.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-126">Была записана неполная JSON, и <paramref name="isFinalBlock" /> имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-126">Incomplete JSON has been written and <paramref name="isFinalBlock" /> is <see langword="true" />.</span></span> <span data-ttu-id="5516a-127">Например, когда требуется закрыть открытый объект или массив.</span><span class="sxs-lookup"><span data-stu-id="5516a-127">For example, when an open object or array needs to be closed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterState GetCurrentState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.Json.JsonWriterState GetCurrentState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.GetCurrentState" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCurrentState () As JsonWriterState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::JsonWriterState GetCurrentState();" />
      <MemberSignature Language="F#" Value="member this.GetCurrentState : unit -&gt; System.Text.Json.JsonWriterState" Usage="utf8JsonWriter.GetCurrentState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5516a-128">Возвращает текущий снимок состояния <see cref="T:System.Text.Json.Utf8JsonWriter" />, которое должно быть записано вызывающим объектом и передано обратно в конструктор <see cref="T:System.Text.Json.Utf8JsonWriter" /> с дополнительными данными.</span><span class="sxs-lookup"><span data-stu-id="5516a-128">Returns the current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state that must be captured by the caller and passed back in to the <see cref="T:System.Text.Json.Utf8JsonWriter" /> constructor with more data.</span></span></summary>
        <returns><span data-ttu-id="5516a-129">Текущий снимок состояния <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-129">The current snapshot of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks

<span data-ttu-id="5516a-130">В отличие от <xref:System.Text.Json.Utf8JsonWriter>, который является ссылочной структурой, состояние может выдержать через границы async/await и таким образом этот тип должен предоставить поддержку для чтения дополнительных данных асинхронно, перед продолжением новый экземпляр класса <xref:System.Text.Json.Utf8JsonWriter>.</span><span class="sxs-lookup"><span data-stu-id="5516a-130">Unlike the <xref:System.Text.Json.Utf8JsonWriter>, which is a ref struct, the state can survive across async/await boundaries, and hence this type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonWriter>.</span></span>

<span data-ttu-id="5516a-131">Получение состояния для создания нового <see cref="T:System.Text.Json.Utf8JsonWriter" /> структуры без первой фиксации приведет к данных, который был записан в несогласованном состоянии.</span><span class="sxs-lookup"><span data-stu-id="5516a-131">Getting the state for creating a new <see cref="T:System.Text.Json.Utf8JsonWriter" /> struct without first committing the data that has been written would result in an inconsistent state.</span></span> <span data-ttu-id="5516a-132">Вызовите <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> до получения текущего состояния.</span><span class="sxs-lookup"><span data-stu-id="5516a-132">Call <xref:System.Text.Json.Utf8JsonWriter.Flush%2A> before getting the current state.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-133">Данные JSON были записаны и помещены в буфер, но еще не были записаны на диск для <see cref="T:System.Buffers.IBufferWriter`1" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-133">The JSON data has been written and buffered but not yet flushed to the <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-134">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-134">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-135">Значение, которое нужно записать в виде литерала JSON "true" или "false" в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-135">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-136">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-136"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-137">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-137">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-138">Записывает имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON "true" или "false") в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-138">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-139"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-139"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-140">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-140">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-141">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-141">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-142">Значение, которое нужно записать в виде литерала JSON "true" или "false" в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-142">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-143">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-143"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-144">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-144">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-145">Записывает имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON "true" или "false") в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-145">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-146"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-146"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-147">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-147">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-148">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-148">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-149">Значение, которое нужно записать в виде литерала JSON "true" или "false" в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-149">The value to be written as a JSON literal "true" or "false" as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-150">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-150"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-151">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-151">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-152">Записывает имя свойства и значение <see cref="T:System.Boolean" /> (в виде литерала JSON "true" или "false") в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-152">Writes the property name and <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-153"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-153"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-154">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-154">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-155">Значение, которое нужно записать в виде литерала JSON "true" или "false" в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-155">The value to be written as a JSON literal "true" or "false" as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-156">Записывает значение <see cref="T:System.Boolean" /> (в виде литерала JSON "true" или "false") в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-156">Writes the <see cref="T:System.Boolean" /> value (as a JSON literal "true" or "false") as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-157">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-157">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="5516a-158">Значение в кодировке UTF-8, записываемое в виде комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-158">The UTF-8 encoded value to be written as a JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-159">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-159"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-160">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-160">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-161">Записывает текстовое значение UTF-8 в виде комментария JSON (в пределах <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="5516a-161">Writes the UTF-8 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-162"><paramref name="utf8Value" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-162"><paramref name="utf8Value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-163">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-163">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-164">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-164"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-165">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-165">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-166">Записывает текстовое значение UTF-16 в виде комментария JSON (в пределах <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="5516a-166">Writes the UTF-16 text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-167"><paramref name="value" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-167"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-168">Значение в кодировке UTF-16, записываемое в виде перекодированного в UTF-8 комментария JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-168">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-169">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-169"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-170">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-170">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-171">Записывает строковое текстовое значение в виде комментария JSON (в пределах <c>/*..*/</c>).</span><span class="sxs-lookup"><span data-stu-id="5516a-171">Writes the string text value as a JSON comment (within <c>/*..*/</c>).</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-172"><paramref name="value" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-172"><paramref name="value" /> is too large.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5516a-173">Записывает конец массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-173">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-174">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-174">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5516a-175">Записывает конец объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-175">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-176">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-176">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-177">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-177">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-178">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-178"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-179">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-179">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-180">Записывает имя свойства и литерал JSON "null" в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-180">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-181"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-181"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-182">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-182">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-183">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-183">The UTF-16 encoded property name of the JSON object to transcode and write as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-184">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-184"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-185">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-185">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-186">Записывает имя свойства и литерал JSON "null" в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-186">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-187"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-187"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-188">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-188">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteNull (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-189">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-189">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-190">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-190"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-191">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-191">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-192">Записывает имя свойства и литерал JSON "null" в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-192">Writes the property name and the JSON literal "null" as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-193"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-193"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-194">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-194">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5516a-195">Записывает литерал JSON "null" в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-195">Writes the JSON literal "null" as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-196">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-196">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-197">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-197">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-198">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-198">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-199">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-199"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-200">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-200">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-201">Записывает имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-201">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-202">Записывает <see cref="T:System.Decimal" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-202">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-203"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-203"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-204">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-204">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-205">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-205">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-206">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-206">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-207">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-207"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-208">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-208">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-209">Записывает имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-209">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-210">Записывает <see cref="T:System.Double" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-210">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-211"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-211"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-212">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-212">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-213">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-213">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-214">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-214">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-215">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-215"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-216">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-216">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-217">Записывает имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-217">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-218">Записывает <see cref="T:System.Int32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-218">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-219">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-219">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-220"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-220"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-221">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-221">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-222">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-222">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-223">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-223">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-224">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-224"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-225">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-225">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-226">Записывает имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-226">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-227">Записывает <see cref="T:System.Int64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-227">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-228">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-228">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-229"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-229"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-230">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-230">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-231">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-231">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-232">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-232">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-233">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-233"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-234">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-234">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-235">Записывает имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-235">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-236">Записывает <see cref="T:System.Single" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-236">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-237"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-237"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-238">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-238">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-239">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-239">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-240">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-240">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-241">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-241"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-242">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-242">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-243">Записывает имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-243">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-244">Записывает <see cref="T:System.UInt32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-244">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-245">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-245">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-246"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-246"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-247">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-247">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-248">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-248">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-249">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-249">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-250">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-250"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-251">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-251">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-252">Записывает имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-252">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-253">Записывает <see cref="T:System.UInt64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-253">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-254">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-254">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-255"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-255"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-256">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-256">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-257">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-257">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-258">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-258">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-259">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-259"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-260">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-260">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-261">Записывает имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-261">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-262">Записывает <see cref="T:System.Decimal" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-262">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-263"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-263"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-264">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-264">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-265">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-265">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-266">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-266">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-267">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-267"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-268">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-268">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-269">Записывает имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-269">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-270">Записывает <see cref="T:System.Double" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-270">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-271"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-271"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-272">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-272">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-273">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-273">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-274">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-274">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-275">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-275"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-276">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-276">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-277">Записывает имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-277">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-278">Записывает <see cref="T:System.Int32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-278">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-279">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-279">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-280"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-280"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-281">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-281">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-282">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-282">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-283">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-283">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-284">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-284"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-285">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-285">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-286">Записывает имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-286">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-287">Записывает <see cref="T:System.Int64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-287">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-288">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-288">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-289"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-289"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-290">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-290">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-291">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-291">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-292">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-292">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-293">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-293"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-294">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-294">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-295">Записывает имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-295">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-296">Записывает <see cref="T:System.Single" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-296">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-297"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-297"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-298">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-298">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-299">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-299">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-300">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-300">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-301">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-301"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-302">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-302">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-303">Записывает имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-303">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-304">Записывает <see cref="T:System.UInt32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-304">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-305">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-305">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-306"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-306"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-307">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-307">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-308">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-308">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-309">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-309">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-310">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-310"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-311">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-311">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-312">Записывает имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-312">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-313">Записывает <see cref="T:System.UInt64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-313">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-314">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-314">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-315"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-315"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-316">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-316">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-317">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-317">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-318">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-318">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-319">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-319"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-320">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-320">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-321">Записывает имя свойства и значение <see cref="T:System.Decimal" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-321">Writes the property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-322">Записывает <see cref="T:System.Decimal" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-322">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-323"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-323"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-324">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-324">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-325">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-325">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-326">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-326">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-327">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-327"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-328">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-328">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-329">Записывает имя свойства и значение <see cref="T:System.Double" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-329">Writes the property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-330">Записывает <see cref="T:System.Double" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-330">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-331"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-331"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-332">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-332">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-333">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-333">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-334">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-334">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-335">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-335"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-336">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-336">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-337">Записывает имя свойства и значение <see cref="T:System.Int32" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-337">Writes the property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-338">Записывает <see cref="T:System.Int32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-338">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-339">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-339">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-340"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-340"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-341">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-341">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-342">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-342">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-343">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-343">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-344">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-344"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-345">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-345">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-346">Записывает имя свойства и значение <see cref="T:System.Int64" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-346">Writes the property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-347">Записывает <see cref="T:System.Int64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-347">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-348">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-348">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-349"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-349"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-350">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-350">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-351">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-351">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-352">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-352">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-353">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-353"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-354">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-354">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-355">Записывает имя свойства и значение <see cref="T:System.Single" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-355">Writes the property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-356">Записывает <see cref="T:System.Single" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-356">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-357"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-357"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-358">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-358">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-359">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-359">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-360">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-360">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-361">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-361"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-362">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-362">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-363">Записывает имя свойства и значение <see cref="T:System.UInt32" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-363">Writes the property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-364">Записывает <see cref="T:System.UInt32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-364">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-365">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-365">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-366"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-366"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-367">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-367">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 * bool -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-368">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-368">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-369">Значение, которое нужно записать в виде номера JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-369">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-370">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-370"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-371">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-371">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-372">Записывает имя свойства и значение <see cref="T:System.UInt64" /> (в виде номера JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-372">Writes the property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-373">Записывает <see cref="T:System.UInt64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-373">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-374">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-374">For example, 32767.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-375"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-375"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-376">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-376">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-377">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-377">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-378">Записывает значение <see cref="T:System.Decimal" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-378">Writes the <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-379">Записывает <see cref="T:System.Decimal" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-379">Writes the <see cref="T:System.Decimal" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-380">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-380">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-381">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-381">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-382">Записывает значение <see cref="T:System.Double" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-382">Writes the <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-383">Записывает <see cref="T:System.Double" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-383">Writes the <see cref="T:System.Double" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-384">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-384">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-385">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-385">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-386">Записывает значение <see cref="T:System.Int32" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-386">Writes the <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-387">Записывает <see cref="T:System.Int32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-387">Writes the <see cref="T:System.Int32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-388">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-388">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-389">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-389">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-390">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-390">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-391">Записывает значение <see cref="T:System.Int64" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-391">Writes the <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-392">Записывает <see cref="T:System.Int64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-392">Writes the <see cref="T:System.Int64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-393">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-393">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-394">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-394">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-395">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-395">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-396">Записывает значение <see cref="T:System.Single" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-396">Writes the <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-397">Записывает <see cref="T:System.Single" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-397">Writes the <see cref="T:System.Single" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-398">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-398">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-399">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-399">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-400">Записывает значение <see cref="T:System.UInt32" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-400">Writes the <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-401">Записывает <see cref="T:System.UInt32" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-401">Writes the <see cref="T:System.UInt32" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-402">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-402">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-403">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-403">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-404">Значение, которое нужно записать в виде номера JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-404">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-405">Записывает значение <see cref="T:System.UInt64" /> (в виде номера JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-405">Writes the <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-406">Записывает <see cref="T:System.UInt64" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть «G»).</span><span class="sxs-lookup"><span data-stu-id="5516a-406">Writes the <see cref="T:System.UInt64" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'G').</span></span> <span data-ttu-id="5516a-407">Например, 32767.</span><span class="sxs-lookup"><span data-stu-id="5516a-407">For example, 32767.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-408">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-408">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5516a-409">Записывает начало массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-409">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-410">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-410">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-411">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-411">-or-</span></span>

<span data-ttu-id="5516a-412">если это приведет к записи недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-412">if this would result in an invalid JSON to be written (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-413">Имя свойства массива JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-413">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-414">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-414"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-415">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-415">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-416">Записывает начало массива JSON с именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="5516a-416">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-417"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-417"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-418">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-418">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-419">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-419">-or-</span></span>

<span data-ttu-id="5516a-420">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-420">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-421">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-421">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-422">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-422"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-423">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-423">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-424">Записывает начало массива JSON с именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="5516a-424">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-425"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-425"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-426">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-426">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-427">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-427">-or-</span></span>

<span data-ttu-id="5516a-428">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-428">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartArray (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-429">Имя свойства массива JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-429">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-430">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-430"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-431">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-431">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-432">Записывает начало массива JSON с именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="5516a-432">Writes the beginning of a JSON array with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-433"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-433"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-434">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-434">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-435">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-435">-or-</span></span>

<span data-ttu-id="5516a-436">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-436">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5516a-437">Записывает начало объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-437">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-438">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-438">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-439">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-439">-or-</span></span>

<span data-ttu-id="5516a-440">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-440">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (utf8PropertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-441">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-441">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-442">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-442"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-443">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-443">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-444">Записывает начало объекта JSON с именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="5516a-444">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-445"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-445"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-446">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-446">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-447">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-447">-or-</span></span>

<span data-ttu-id="5516a-448">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-448">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-449">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-449">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-450">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-450"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-451">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-451">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-452">Записывает начало объекта JSON с именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="5516a-452">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-453"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-453"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-454">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-454">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-455">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-455">-or-</span></span>

<span data-ttu-id="5516a-456">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-456">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStartObject (propertyName, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-457">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-457">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-458">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-458"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-459">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-459">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-460">Записывает начало объекта JSON с именем свойства в качестве ключа.</span><span class="sxs-lookup"><span data-stu-id="5516a-460">Writes the beginning of a JSON object with a property name as the key.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-461"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-461"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-462">Глубина JSON превысила максимальную глубину, равную 1000.</span><span class="sxs-lookup"><span data-stu-id="5516a-462">The depth of the JSON has exceeded the maximum depth of 1000.</span></span>

<span data-ttu-id="5516a-463">-или-</span><span class="sxs-lookup"><span data-stu-id="5516a-463">-or-</span></span>

<span data-ttu-id="5516a-464">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-464">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-465">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-465">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-466">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-466">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-467">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-467"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-468">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-468">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-469">Записывает имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-469">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-470">Записывает <see cref="T:System.DateTime" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-470">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-471">Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5516a-471">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-472"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-472"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-473">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-473">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-474">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-474">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-475">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-475">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-476">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-476"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-477">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-477">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-478">Записывает имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-478">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-479">Записывает <see cref="T:System.DateTimeOffset" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-479">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-480">Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5516a-480">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-481"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-481"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-482">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-482">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-483">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-483">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-484">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-484">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-485">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-485"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-486">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-486">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-487">Записывает имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-487">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-488">Записывает <see cref="T:System.Guid" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть было "), как форма: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5516a-488">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-489"><paramref name="utf8PropertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-489"><paramref name="utf8PropertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-490">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-490">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-491">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-491">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="5516a-492">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-492">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-493">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-493">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-494">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-494">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-495">Записывает имя свойства в кодировке UTF-8 и текстовое значение в кодировке UTF-8 (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-495">Writes the UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-496">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-496">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-497">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-497">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-498">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-498">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-499">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-499">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-500">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-500">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-501">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-501">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-502">Записывает имя свойства в кодировке UTF-8 и текстовое значение в кодировке UTF-16 (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-502">Writes the UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-503">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-503">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-504">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-504">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="5516a-505">Имя свойства объекта JSON, который нужно записать, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-505">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-506">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-506">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-507">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-507">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-508">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-508">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-509">Записывает имя свойства в кодировке UTF-8 и строковое текстовое значение (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-509">Writes the UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-510">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-510">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-511">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-511">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-512">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-512">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-513">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-513">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-514">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-514"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-515">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-515">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-516">Записывает имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-516">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-517">Записывает <see cref="T:System.DateTime" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-517">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-518">Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5516a-518">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-519"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-519"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-520">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-520">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-521">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-521">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-522">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-522">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-523">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-523"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-524">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-524">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-525">Записывает имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-525">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-526">Записывает <see cref="T:System.DateTimeOffset" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-526">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-527">Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5516a-527">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-528"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-528"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-529">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-529">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-530">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-530">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-531">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-531">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-532">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-532"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-533">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-533">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-534">Записывает имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-534">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-535">Записывает <see cref="T:System.Guid" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть было "), как форма: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5516a-535">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-536"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-536"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-537">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-537">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-538">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-538">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="5516a-539">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-539">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-540">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-540">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-541">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-541">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-542">Записывает имя свойства в кодировке UTF-16 и текстовое значение в кодировке UTF-8 (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-542">Writes the UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-543">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-543">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-544">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-544">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-545">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-545">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-546">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-546">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-547">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-547">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-548">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-548">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-549">Записывает имя свойства в кодировке UTF-16 и текстовое значение в кодировке UTF-16 (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-549">Writes the UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-550">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-550">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-551">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-551">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-552">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-552">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-553">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-553">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-554">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-554">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-555">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-555">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-556">Записывает имя свойства в кодировке UTF-16 и строковое текстовое значение (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-556">Writes the UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-557">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-557">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-558">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-558">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-559">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-559">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-560">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-560">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-561">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-561"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-562">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-562">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-563">Записывает имя свойства и значение <see cref="T:System.DateTime" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-563">Writes the property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-564">Записывает <see cref="T:System.DateTime" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-564">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-565">Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5516a-565">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-566"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-566"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-567">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-567">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-568">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-568">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-569">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-569">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-570">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-570"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-571">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-571">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-572">Записывает имя свойства и значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-572">Writes the property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-573">Записывает <see cref="T:System.DateTimeOffset" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-573">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-574">Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5516a-574">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-575"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-575"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-576">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-576">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-577">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-577">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-578">Значение, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-578">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-579">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-579"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-580">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-580">This is an optional parameter; its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-581">Записывает имя свойства и значение <see cref="T:System.Guid" /> (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-581">Writes the property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks><span data-ttu-id="5516a-582">Записывает <see cref="T:System.Guid" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть было "), как форма: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5516a-582">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-583"><paramref name="propertyName" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-583"><paramref name="propertyName" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-584">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-584">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-585">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-585">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="5516a-586">Значение в кодировке UTF-8, которое нужно записать в виде строки JSON в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-586">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-587">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-587">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-588">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-588">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-589">Записывает имя свойства и текстовое значение в кодировке UTF-8 (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-589">Writes the property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-590">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-590">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-591">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-591">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-592">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-592">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-593">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-593">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-594">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-594">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-595">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-595">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-596">Записывает имя свойства и текстовое значение в кодировке UTF-16 (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-596">Writes the property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-597">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-597">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-598">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-598">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string * bool -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="5516a-599">Имя свойства объекта JSON, который нужно перекодировать и записать в формате UTF-8, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-599">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="5516a-600">Значение в кодировке UTF-16, которое нужно записать в виде строки JSON, перекодированной в UTF-8, в составе пары имя-значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-600">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-601">Если задано значение false, модуль записи предполагает правильно экранированное имя свойства и пропускает этап экранирования.</span><span class="sxs-lookup"><span data-stu-id="5516a-601">If this is set to false, the writer assumes the property name is properly escaped and skips the escaping step.</span></span>
<span data-ttu-id="5516a-602">Значение всегда экранируется</span><span class="sxs-lookup"><span data-stu-id="5516a-602">The value is always escaped</span></span></param>
        <summary><span data-ttu-id="5516a-603">Записывает имя свойства и строковое текстовое значение (в виде строки JSON) в составе пары имя-значение объекта JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-603">Writes the property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-604">Возникает, когда имя или значение указанного свойства слишком велико.</span><span class="sxs-lookup"><span data-stu-id="5516a-604">Thrown when the specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-605">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-605">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-606">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-606">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-607">Записывает значение <see cref="T:System.DateTime" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-607">Writes the <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-608">Записывает <see cref="T:System.DateTime" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" /> .</span><span class="sxs-lookup"><span data-stu-id="5516a-608">Writes the <see cref="T:System.DateTime" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" /> .</span></span> <span data-ttu-id="5516a-609">Например, 2017-06-12T05:30:45.7680000.</span><span class="sxs-lookup"><span data-stu-id="5516a-609">For example, 2017-06-12T05:30:45.7680000.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-610">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-610">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-611">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-611">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-612">Записывает значение <see cref="T:System.DateTimeOffset" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-612">Writes the <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-613">Записывает <see cref="T:System.DateTimeOffset" /> с помощью мощность ("о) <see cref="T:System.Buffers.StandardFormat" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-613">Writes the <see cref="T:System.DateTimeOffset" /> using the round-trippable ('O') <see cref="T:System.Buffers.StandardFormat" />.</span></span> <span data-ttu-id="5516a-614">Например, 2017-06-12T05:30:45.7680000-07:00.</span><span class="sxs-lookup"><span data-stu-id="5516a-614">For example, 2017-06-12T05:30:45.7680000-07:00.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-615">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-615">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-616">Значение, которое нужно записать в виде строки JSON в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-616">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="5516a-617">Записывает значение <see cref="T:System.Guid" /> (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-617">Writes the <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks><span data-ttu-id="5516a-618">Записывает <see cref="T:System.Guid" /> по умолчанию <see cref="T:System.Buffers.StandardFormat" /> (то есть было "), как форма: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span><span class="sxs-lookup"><span data-stu-id="5516a-618">Writes the <see cref="T:System.Guid" /> using the default <see cref="T:System.Buffers.StandardFormat" /> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-619">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-619">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (utf8Value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="5516a-620">Значение, которое нужно записать в виде строкового элемента JSON массива JSON, в кодировке UTF-8.</span><span class="sxs-lookup"><span data-stu-id="5516a-620">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-621">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-621"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-622">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-622">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-623">Записывает текстовое значение в кодировке UTF-8 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-623">Writes the UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-624"><paramref name="utf8Value" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-624"><paramref name="utf8Value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-625">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-625">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char), Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-626">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-626">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-627">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-627"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-628">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-628">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-629">Записывает текстовое значение в кодировке UTF-16 (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-629">Writes the UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-630"><paramref name="value" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-630"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-631">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-631">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value, bool escape = true);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value, bool escape) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String, Optional escape As Boolean = true)" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteStringValue (value, escape)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="escape" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="5516a-632">Значение, которое нужно записать в виде перекодированного в UTF-8 строкового элемента JSON массива JSON, в кодировке UTF-16.</span><span class="sxs-lookup"><span data-stu-id="5516a-632">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <param name="escape"><span data-ttu-id="5516a-633">Значение <see langword="false" />, чтобы указать, что модуль записи должен предполагать правильно экранированное имя свойства и пропускать этап экранирования; в противном случае — значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-633"><see langword="false" /> to indicate the writer should assume the property name is properly escaped and skips the escaping step; otherwise, <see langword="true" />.</span></span> <span data-ttu-id="5516a-634">Это необязательный параметр, который по умолчанию имеет значение <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="5516a-634">This is an optional parameter and its default value is <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="5516a-635">Записывает строковое текстовое значение (в виде строки JSON) в качестве элемента массива JSON.</span><span class="sxs-lookup"><span data-stu-id="5516a-635">Writes the string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="5516a-636"><paramref name="value" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="5516a-636"><paramref name="value" /> is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="5516a-637">Записываемые данные JSON будут недопустимой JSON (если включена проверка).</span><span class="sxs-lookup"><span data-stu-id="5516a-637">The JSON data to be written would be invalid JSON (while validation is enabled).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
