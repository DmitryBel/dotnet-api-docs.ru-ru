<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1b7ae633dcdfa01be8c303ba8976d45ac7e33430" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58700563" /></Metadata><TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeechRecognitionEngine&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="F#" Value="type SpeechRecognitionEngine = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c02c7-101">Предоставляет средства доступа и управления механизмом распознавания речи внутри процесса.</span><span class="sxs-lookup"><span data-stu-id="c02c7-101">Provides the means to access and manage an in-process speech recognition engine.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-102">Экземпляр этого класса можно создать для любого из установленных распознавателей речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-102">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="c02c7-103">Чтобы получить сведения о том, какие распознаватели установлены, используйте статический <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-103">To get information about which recognizers are installed, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-104">Этот класс под управлением speech recognition ядер в процессе и позволяет контролировать различные аспекты распознавания речи, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c02c7-104">This class is for running speech recognition engines in-process, and provides control over various aspects of speech recognition, as follows:</span></span>  
  
-   <span data-ttu-id="c02c7-105">Чтобы создать распознаватель речи внутри процесса, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> конструкторы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-105">To create an in-process speech recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> constructors.</span></span>  
  
-   <span data-ttu-id="c02c7-106">Чтобы управлять грамматиками распознавания речи, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> методов и <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-106">To manage speech recognition grammars, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> methods, and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
-   <span data-ttu-id="c02c7-107">Чтобы настроить ввод в распознаватель, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-107">To configure the input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> method.</span></span>  
  
-   <span data-ttu-id="c02c7-108">Для выполнения распознавания речи, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-108">To perform speech recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="c02c7-109">Чтобы изменить, как распознавание обрабатывает бездействия или непредвиденные входные данные, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-109">To modify how recognition handles silence or unexpected input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="c02c7-110">Чтобы изменить число вариантов, которые возвращает распознаватель, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-110">To change the number of alternates the recognizer returns, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> property.</span></span> <span data-ttu-id="c02c7-111">Распознаватель возвращает результаты распознавания в <xref:System.Speech.Recognition.RecognitionResult> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-111">The recognizer returns recognition results in a <xref:System.Speech.Recognition.RecognitionResult> object.</span></span>  
  
-   <span data-ttu-id="c02c7-112">Чтобы синхронизировать изменения в распознаватель, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-112">To synchronize changes to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="c02c7-113">Распознаватель использует только один поток для выполнения задач.</span><span class="sxs-lookup"><span data-stu-id="c02c7-113">The recognizer uses more than one thread to perform tasks.</span></span>  
  
-   <span data-ttu-id="c02c7-114">Чтобы эмулировать ввод в распознаватель, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-114">To emulate input to the recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c02c7-115"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Объект является отдельное используйте процесса, экземпляр которого создан объект.</span><span class="sxs-lookup"><span data-stu-id="c02c7-115">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object is for the sole use of the process that instantiated the object.</span></span> <span data-ttu-id="c02c7-116">Напротив <xref:System.Speech.Recognition.SpeechRecognizer> использует единый распознаватель совместно с любого приложения, которое хочет его использовать.</span><span class="sxs-lookup"><span data-stu-id="c02c7-116">By contrast, the <xref:System.Speech.Recognition.SpeechRecognizer> shares a single recognizer with any application that wants to use it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c02c7-117">Всегда вызывайте метод <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> перед освобождением последней ссылки в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-117">Always call <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> before you release your last reference to the speech recognizer.</span></span> <span data-ttu-id="c02c7-118">В противном случае им ресурсы не будут освобождены пока сборщик мусора не вызовет объект распознаватель `Finalize` метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-118">Otherwise, the resources it is using will not be freed until the garbage collector calls the recognizer object's `Finalize` method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-119">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-119">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-120">Так как в этом примере используется `Multiple` режим <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> метод, он выполняет распознавание до закрытия окна консоли или остановить отладку.</span><span class="sxs-lookup"><span data-stu-id="c02c7-120">Because this example uses the `Multiple` mode of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method, it performs recognition until you close the console window or stop debugging.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-121">Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-121">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-122">Вы можете создать <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляр из любой из следующих:</span><span class="sxs-lookup"><span data-stu-id="c02c7-122">You can construct a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance from any of the following:</span></span>  
  
-   <span data-ttu-id="c02c7-123">Модуль распознавания речи по умолчанию для системы</span><span class="sxs-lookup"><span data-stu-id="c02c7-123">The default speech recognition engine for the system</span></span>  
  
-   <span data-ttu-id="c02c7-124">Определенные распознавания речи, при указанном по имени</span><span class="sxs-lookup"><span data-stu-id="c02c7-124">A specific speech recognition engine that you specify by name</span></span>  
  
-   <span data-ttu-id="c02c7-125">Модуль распознавания речи по умолчанию для языкового стандарта вами</span><span class="sxs-lookup"><span data-stu-id="c02c7-125">The default speech recognition engine for a locale that you specify</span></span>  
  
-   <span data-ttu-id="c02c7-126">Механизм конкретных распознавания, соответствующий условиям, указываемые в <xref:System.Speech.Recognition.RecognizerInfo> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-126">A specific recognition engine that meets the criteria that you specify in a <xref:System.Speech.Recognition.RecognizerInfo> object.</span></span>  
  
 <span data-ttu-id="c02c7-127">Перед началом распознавания в распознаватель речи необходимо загрузить грамматики распознавания речи по крайней мере один и настроить входные данные для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-127">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-128">Чтобы загрузить грамматику, вызвать <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-128">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-129">Для настройки входных звуковых данных, используйте один из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="c02c7-129">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-130">Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />, используя распознаватель речи по умолчанию для системы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-130">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-131">Перед началом распознавания речи в распознаватель речи необходимо загрузить по крайней мере один грамматики распознавания и настроить входные данные для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-131">Before the speech recognizer can begin speech recognition, you must load at least one recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-132">Чтобы загрузить грамматику, вызвать <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-132">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-133">Для настройки входных звуковых данных, используйте один из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="c02c7-133">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Globalization.CultureInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="c02c7-134">Языковой стандарт, который должен поддерживаться распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-134">The locale that the speech recognizer must support.</span></span></param>
        <summary><span data-ttu-id="c02c7-135">Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />, используя распознаватель речи по умолчанию для указанного языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-135">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class using the default speech recognizer for a specified locale.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-136">Microsoft Windows и System.Speech API принять все допустимые коды языка страны.</span><span class="sxs-lookup"><span data-stu-id="c02c7-136">Microsoft Windows and the System.Speech API accept all valid language-country codes.</span></span> <span data-ttu-id="c02c7-137">Для выполнения распознавания речи с помощью языка, заданного параметром `CultureInfo` аргумент, в обработчик распознавания речи, который поддерживает, что код страны язык должен быть установлен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-137">To perform speech recognition using the language specified in the `CultureInfo` argument, a speech recognition engine that supports that language-country code must be installed.</span></span> <span data-ttu-id="c02c7-138">Механизмы распознавания речи, поставляемых вместе с Microsoft Windows 7 работать со следующими кодами языка страны.</span><span class="sxs-lookup"><span data-stu-id="c02c7-138">The speech recognition engines that shipped with Microsoft Windows 7 work with the following language-country codes.</span></span>  
  
-   <span data-ttu-id="c02c7-139">en-GB.</span><span class="sxs-lookup"><span data-stu-id="c02c7-139">en-GB.</span></span> <span data-ttu-id="c02c7-140">Английский (Соединенное Королевство)</span><span class="sxs-lookup"><span data-stu-id="c02c7-140">English (United Kingdom)</span></span>  
  
-   <span data-ttu-id="c02c7-141">en US.</span><span class="sxs-lookup"><span data-stu-id="c02c7-141">en-US.</span></span> <span data-ttu-id="c02c7-142">Русский (Россия)</span><span class="sxs-lookup"><span data-stu-id="c02c7-142">English (United States)</span></span>  
  
-   <span data-ttu-id="c02c7-143">de-DE.</span><span class="sxs-lookup"><span data-stu-id="c02c7-143">de-DE.</span></span> <span data-ttu-id="c02c7-144">Немецкий (Германия)</span><span class="sxs-lookup"><span data-stu-id="c02c7-144">German (Germany)</span></span>  
  
-   <span data-ttu-id="c02c7-145">es-ES.</span><span class="sxs-lookup"><span data-stu-id="c02c7-145">es-ES.</span></span> <span data-ttu-id="c02c7-146">Испанский (Испания)</span><span class="sxs-lookup"><span data-stu-id="c02c7-146">Spanish (Spain)</span></span>  
  
-   <span data-ttu-id="c02c7-147">fr-FR.</span><span class="sxs-lookup"><span data-stu-id="c02c7-147">fr-FR.</span></span> <span data-ttu-id="c02c7-148">Французский (Франция)</span><span class="sxs-lookup"><span data-stu-id="c02c7-148">French (France)</span></span>  
  
-   <span data-ttu-id="c02c7-149">ja-JP.</span><span class="sxs-lookup"><span data-stu-id="c02c7-149">ja-JP.</span></span> <span data-ttu-id="c02c7-150">Японский (Япония)</span><span class="sxs-lookup"><span data-stu-id="c02c7-150">Japanese (Japan)</span></span>  
  
-   <span data-ttu-id="c02c7-151">zh-CN.</span><span class="sxs-lookup"><span data-stu-id="c02c7-151">zh-CN.</span></span> <span data-ttu-id="c02c7-152">Китайский (Китай)</span><span class="sxs-lookup"><span data-stu-id="c02c7-152">Chinese (China)</span></span>  
  
-   <span data-ttu-id="c02c7-153">zh-TW.</span><span class="sxs-lookup"><span data-stu-id="c02c7-153">zh-TW.</span></span> <span data-ttu-id="c02c7-154">Китайский (Тайвань)</span><span class="sxs-lookup"><span data-stu-id="c02c7-154">Chinese (Taiwan)</span></span>  
  
 <span data-ttu-id="c02c7-155">Коды двухбуквенный языка, например «en», «fr», или «es» разрешено.</span><span class="sxs-lookup"><span data-stu-id="c02c7-155">Two-letter language codes such as "en", "fr", or "es" are also permitted.</span></span>  
  
 <span data-ttu-id="c02c7-156">Перед началом распознавания в распознаватель речи необходимо загрузить грамматики распознавания речи по крайней мере один и настроить входные данные для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-156">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-157">Чтобы загрузить грамматику, вызвать <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-157">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-158">Для настройки входных звуковых данных, используйте один из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="c02c7-158">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-159">В следующем примере показана часть консольное приложение, которое демонстрирует основные речь и инициализирует распознаватель речи для языкового стандарта en US.</span><span class="sxs-lookup"><span data-stu-id="c02c7-159">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer for the en-US locale.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-160">Ни одно из установленных средств распознавания речи не поддерживает указанное местоположение, либо <paramref name="culture" /> является языковым стандартом по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-160">None of the installed speech recognizers support the specified locale, or <paramref name="culture" /> is the invariant culture.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-161"><paramref name="Culture" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-161"><paramref name="Culture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::Speech::Recognition::RecognizerInfo ^ recognizerInfo);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : System.Speech.Recognition.RecognizerInfo -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerInfo" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo"><span data-ttu-id="c02c7-162">Сведения для конкретного распознавателя речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-162">The information for the specific speech recognizer.</span></span></param>
        <summary><span data-ttu-id="c02c7-163">Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />, используя информацию в объекте <see cref="T:System.Speech.Recognition.RecognizerInfo" /> для указания средства распознавания, которое необходимо использовать.</span><span class="sxs-lookup"><span data-stu-id="c02c7-163">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> using the information in a <see cref="T:System.Speech.Recognition.RecognizerInfo" /> object to specify the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-164">Экземпляр этого класса можно создать для любого из установленных распознавателей речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-164">You can create an instance of this class for any of the installed speech recognizers.</span></span> <span data-ttu-id="c02c7-165">Чтобы получить сведения о том, какие распознаватели установлены, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-165">To get information about which recognizers are installed, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-166">Перед началом распознавания в распознаватель речи необходимо загрузить грамматики распознавания речи по крайней мере один и настроить входные данные для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-166">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-167">Чтобы загрузить грамматику, вызвать <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-167">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-168">Для настройки входных звуковых данных, используйте один из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="c02c7-168">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-169">В следующем примере показана часть консольное приложение, которое демонстрирует основные речь и инициализирует распознаватель речи, который поддерживает английского языка.</span><span class="sxs-lookup"><span data-stu-id="c02c7-169">The following example shows part of a console application that demonstrates basic speech recognition, and initializes a speech recognizer that supports the English language.</span></span>  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (recognizerId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SpeechRecognitionEngine(System::String ^ recognizerId);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SpeechRecognitionEngine : string -&gt; System.Speech.Recognition.SpeechRecognitionEngine" Usage="new System.Speech.Recognition.SpeechRecognitionEngine recognizerId" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId"><span data-ttu-id="c02c7-170">Имя токена распознавателя речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-170">The token name of the speech recognizer to use.</span></span></param>
        <summary><span data-ttu-id="c02c7-171">Инициализирует новый экземпляр класса <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> с заданным строковым параметром, задающим имя средства распознавания, которое необходимо использовать.</span><span class="sxs-lookup"><span data-stu-id="c02c7-171">Initializes a new instance of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> class with a string parameter that specifies the name of the recognizer to use.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-172">Имя токена распознавателя является значением <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> свойство <xref:System.Speech.Recognition.RecognizerInfo> объект, возвращаемый <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> свойство распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-172">The token name of the recognizer is the value of the <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> property of the <xref:System.Speech.Recognition.RecognizerInfo> object returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property of the recognizer.</span></span> <span data-ttu-id="c02c7-173">Для получения коллекции всех установленных распознавателей, используйте статический <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-173">To get a collection of all the installed recognizers, use the static <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-174">Перед началом распознавания в распознаватель речи необходимо загрузить грамматики распознавания речи по крайней мере один и настроить входные данные для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-174">Before the speech recognizer can begin recognition, you must load at least one speech recognition grammar and configure the input for the recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-175">Чтобы загрузить грамматику, вызвать <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-175">To load a grammar, call the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-176">Для настройки входных звуковых данных, используйте один из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="c02c7-176">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-177">В следующем примере показано частью консольное приложение, которое демонстрирует основные речь и создает экземпляр класса 8.0 распознаватель речи для Windows (английский — США).</span><span class="sxs-lookup"><span data-stu-id="c02c7-177">The following example shows part of a console application that demonstrates basic speech recognition, and creates an instance of the Speech Recognizer 8.0 for Windows (English - US).</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-178">Отсутствует установленное средство распознавания речи с указанным именем токена или <paramref name="recognizerId" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-178">No speech recognizer with that token name is installed, or <paramref name="recognizerId" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-179"><paramref name="recognizerId" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-179"><paramref name="recognizerId" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioFormat As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ AudioFormat { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioFormat : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-180">Получает формат аудио, принимаемого объектом <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-180">Gets the format of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c02c7-181">Входной звуковой формат для экземпляра <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> или значение <see langword="null" />, если входные данные не настроены или они пустые.</span><span class="sxs-lookup"><span data-stu-id="c02c7-181">The format of audio at the input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance, or <see langword="null" /> if the input is not configured or set to the null input.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-182">Для настройки входных звуковых данных, используйте один из следующих методов:</span><span class="sxs-lookup"><span data-stu-id="c02c7-182">To configure the audio input, use one of the following methods:</span></span>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-183">В примере ниже используется <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> для получения и отображения данных звуковой формат.</span><span class="sxs-lookup"><span data-stu-id="c02c7-183">The example below uses <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> to obtain and display audio format data.</span></span>  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AudioLevel { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioLevel : int" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-184">Получает уровень звука, принимаемого объектом <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-184">Gets the level of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c02c7-185">Уровень звука ввода в распознаватель речи, от 0 до 100.</span><span class="sxs-lookup"><span data-stu-id="c02c7-185">The audio level of the input to the speech recognizer, from 0 through 100.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-186">Значение 0 представляет бездействия, а 100 максимальным объемом ввода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-186">The value 0 represents silence, and 100 represents the maximum input volume.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioLevelUpdated As EventHandler(Of AudioLevelUpdatedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioLevelUpdatedEventArgs ^&gt; ^ AudioLevelUpdated;" />
      <MemberSignature Language="F#" Value="member this.AudioLevelUpdated : EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " Usage="member this.AudioLevelUpdated : System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-187">Возникает, когда <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> сообщает об уровне аудиовхода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-187">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> reports the level of its audio input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-188"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Генерирует его несколько раз в секунду.</span><span class="sxs-lookup"><span data-stu-id="c02c7-188">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event multiple times per second.</span></span> <span data-ttu-id="c02c7-189">Частота, с которой события зависит от компьютера, на котором выполняется приложение.</span><span class="sxs-lookup"><span data-stu-id="c02c7-189">The frequency with which the event is raised depends on the computer on which the application is running.</span></span>  
  
 <span data-ttu-id="c02c7-190">Чтобы получить уровень звука, во время события, используйте <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> связанного <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-190">To get the audio level at the time of the event, use the <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> property of the associated <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>.</span></span> <span data-ttu-id="c02c7-191">Чтобы получить текущий уровень звука ввода в распознаватель, использовать распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-191">To get the current audio level of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-192">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> определяется метод обработки события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-192">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-193">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-193">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-194">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-194">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-195">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-195">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-196">В следующем примере добавляется обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> событие <xref:System.Speech.Recognition.SpeechRecognitionEngine> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-196">The following example adds a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> event to a <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.</span></span> <span data-ttu-id="c02c7-197">Обработчик выводит новый уровень звука на консоль.</span><span class="sxs-lookup"><span data-stu-id="c02c7-197">The handler outputs the new audio level to the console.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-198">Получает текущую позицию в аудиопотоке, создаваемом устройством, которое предоставляет входные данные для <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-198">Gets the current location in the audio stream being generated by the device that is providing input to the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c02c7-199">Текущее расположение в потоке звука, созданном устройством ввода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-199">The current location in the audio stream being generated by the input device.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-200"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> Свойство ссылается на устройстве ввода, позицию в созданный аудиопоток.</span><span class="sxs-lookup"><span data-stu-id="c02c7-200">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="c02c7-201">Напротив <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> свойство ссылается на позицию распознавателя в аудиовхода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-201">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the recognizer's position within its audio input.</span></span> <span data-ttu-id="c02c7-202">Эти позиции могут отличаться.</span><span class="sxs-lookup"><span data-stu-id="c02c7-202">These positions can be different.</span></span> <span data-ttu-id="c02c7-203">Например, если которую получил распознаватель ввода, для которого он имеет не еще создан результат распознавания, а затем значение <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> меньшим, чем значение <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-203">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-204">В следующем примере в распознаватель речи внутри процесса использует грамматику диктовки для соответствия текстовому вводу.</span><span class="sxs-lookup"><span data-stu-id="c02c7-204">In the following example, the in-process speech recognizer uses a dictation grammar to match speech input.</span></span> <span data-ttu-id="c02c7-205">Обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> событий выводит на консоль <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> когда распознаватель речи обнаруживает речи во входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-205">A handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event writes to the console the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, and  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> when the speech recognizer detects speech at its input.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioSignalProblemOccurred As EventHandler(Of AudioSignalProblemOccurredEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioSignalProblemOccurredEventArgs ^&gt; ^ AudioSignalProblemOccurred;" />
      <MemberSignature Language="F#" Value="member this.AudioSignalProblemOccurred : EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " Usage="member this.AudioSignalProblemOccurred : System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-206">Возникает, когда <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> обнаруживает проблему в аудиосигнале.</span><span class="sxs-lookup"><span data-stu-id="c02c7-206">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects a problem in the audio signal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-207">Чтобы получить, какая ошибка, используйте <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> связанного <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-207">To get which problem occurred, use the <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> property of the associated <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>.</span></span>  
  
 <span data-ttu-id="c02c7-208">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> определяется метод обработки события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-208">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-209">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-209">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-210">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-210">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-211">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-211">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-212">В следующем примере определяется обработчик событий, которая собирает данные о <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-212">The following example defines an event handler that gathers information about an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> event.</span></span>  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioState As AudioState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::AudioState AudioState { System::Speech::Recognition::AudioState get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioState : System.Speech.Recognition.AudioState" Usage="System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-213">Получает состояние звука, принимаемого объектом <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-213">Gets the state of the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c02c7-214">Состояние звукового ввода в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-214">The state of the audio input to the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-215"><xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> Свойство представляет состояние аудио с членом <xref:System.Speech.Recognition.AudioState> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-215">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property represents the audio state with a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AudioStateChanged As EventHandler(Of AudioStateChangedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::AudioStateChangedEventArgs ^&gt; ^ AudioStateChanged;" />
      <MemberSignature Language="F#" Value="member this.AudioStateChanged : EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " Usage="member this.AudioStateChanged : System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-216">Возникает, когда меняется состояние получаемого объектом <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> аудио.</span><span class="sxs-lookup"><span data-stu-id="c02c7-216">Raised when the state changes in the audio being received by the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-217">Чтобы получить состояние аудио во время события, используйте <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> связанного <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-217">To get the audio state at the time of the event, use the <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> property of the associated <xref:System.Speech.Recognition.AudioStateChangedEventArgs>.</span></span> <span data-ttu-id="c02c7-218">Чтобы получить текущее состояние звука ввода в распознаватель, использовать распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-218">To get the current audio state of the input to the recognizer, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> property.</span></span> <span data-ttu-id="c02c7-219">Дополнительные сведения о состоянии аудио, см. в разделе <xref:System.Speech.Recognition.AudioState> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-219">For more information about audio state, see the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
 <span data-ttu-id="c02c7-220">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> определяется метод обработки события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-220">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-221">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-221">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-222">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-222">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-223">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-223">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-224">В следующем примере используется обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> событие для записи в распознаватель для нового <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> в консоль при каждом изменения с помощью члена <xref:System.Speech.Recognition.AudioState> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-224">The following example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> event to write the recognizer's new <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> to the console each time it changes, using a member of the <xref:System.Speech.Recognition.AudioState> enumeration.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property BabbleTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BabbleTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.BabbleTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-225">Получает или задает интервал времени, в течение которого <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> принимает входные данные, содержащие только фоновый шум, прежде чем финализировать распознавание.</span><span class="sxs-lookup"><span data-stu-id="c02c7-225">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only background noise, before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="c02c7-226">Длительность интервала времени.</span><span class="sxs-lookup"><span data-stu-id="c02c7-226">The duration of the time interval.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-227">Каждый распознаватель речи реализует алгоритм для различения бездействия и речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-227">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="c02c7-228">Распознаватель классифицируются как фоновый шум, любой не бездействия входных данных, не соответствует начальное правило любого из распознавателя загружается и поддержкой грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-228">The recognizer classifies as background noise any non-silence input that does not match the initial rule of any of the recognizer's loaded and enabled speech recognition grammars.</span></span> <span data-ttu-id="c02c7-229">Если распознаватель получает только фоновый шум и бездействия в течение интервала истечением времени ожидания, распознаватель завершает операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-229">If the recognizer receives only background noise and silence within the babble timeout interval, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="c02c7-230">Для операций асинхронное распознавание вызывает распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий, где <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> свойство `true`и <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> свойство `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-230">For asynchronous recognition operations, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="c02c7-231">Для синхронного распознавания операций и эмуляции, возвращает распознаватель `null`, а не является допустимым <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-231">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="c02c7-232">Если истечением периода ожидания имеет значение 0, распознаватель не выполняет проверку истечением времени ожидания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-232">If the babble timeout period is set to 0, the recognizer does not perform a babble timeout check.</span></span> <span data-ttu-id="c02c7-233">Интервал времени ожидания может быть любым положительным значением.</span><span class="sxs-lookup"><span data-stu-id="c02c7-233">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="c02c7-234">Значение по умолчанию — 0 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-234">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-235">В следующем примере показано частью консольного приложения, демонстрирующий распознавания речи basic, который задает <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства <xref:System.Speech.Recognition.SpeechRecognitionEngine> перед запуском средства распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-235">The following example shows part of a console application that demonstrates basic speech recognition that sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="c02c7-236">Обработчики для распознавателя речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> события вывода сведений о событиях в консоль, чтобы продемонстрировать, каким образом <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства <xref:System.Speech.Recognition.SpeechRecognitionEngine> влияют на операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-236">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c02c7-237">Этому свойству задано значение меньше 0 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-237">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-238">Удаляет объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-238">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="speechRecognitionEngine.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-239">Удаляет объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-239">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="speechRecognitionEngine.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="c02c7-240">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-240"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="c02c7-241">Удаляет объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> и освобождает ресурсы, используемые во время сеанса.</span><span class="sxs-lookup"><span data-stu-id="c02c7-241">Disposes the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object and releases resources used during the session.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-242">Эмулирует ввод в распознаватель речи, используя текст вместо аудио для синхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-242">Emulates input to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-243">Эти методы обхода входных звуковых данных системы и введите текст в распознаватель как <xref:System.String> объектов или как массив <xref:System.Speech.Recognition.RecognizedWordUnit> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-243">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="c02c7-244">Это может быть полезно при тестировании или отладке приложения или грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-244">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="c02c7-245">Например можно использовать для определения, является ли слова в грамматике и какие семантику возвращаются в том случае, когда слово распознается эмуляции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-245">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="c02c7-246">Используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> метод для отключения звукового ввода распознавания речи во время операций эмуляции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-246">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="c02c7-247">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-247">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c02c7-248">Распознаватель новые строки и лишние пробелы не учитываются и рассматривает знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-248">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c02c7-249"><xref:System.Speech.Recognition.RecognitionResult> Объект, созданный распознавателем речи в ответ на эмулированного ввода имеет значение `null` для его <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-249">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-250">Чтобы эмулировать асинхронное распознавание, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-250">To emulate asynchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EmulateRecognize (inputText As String) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c02c7-251">Входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-251">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-252">Эмулирует ввод фразы в распознаватель речи, используя текст вместо аудио для синхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-252">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition.</span></span></summary>
        <returns><span data-ttu-id="c02c7-253">Результат операции распознавания или <see langword="null" />, если операция завершилась с ошибкой или распознаватель не включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-253">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-254">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-254">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="c02c7-255">Распознаватели, входящие в состав Vista и Windows 7 не учитывает регистр и ширины символов, при применении правил грамматики для входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-255">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="c02c7-256">Дополнительные сведения о такой тип сравнения, см. в разделе <xref:System.Globalization.CompareOptions> значений перечисления <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> и <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-256">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="c02c7-257">Распознаватели также игнорировать новые строки и лишние пробелы и обрабатывать знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-257">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-258">В примере кода является частью консольного приложения, демонстрирующий эмулированного ввода, результаты распознавания связанные и связанные события, вызываемые в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-258">The code example below is part of a console application that demonstrates emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="c02c7-259">Пример формирует следующие выходные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-259">The example generates the following output.</span></span>  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-260">Для распознавателя нет загруженных грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-260">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-261"><paramref name="inputText" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-261"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-262"><paramref name="inputText" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-262"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="c02c7-263">Массив единиц слов, содержащий входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-263">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c02c7-264">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-264">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-265">Эмулирует ввод конкретных слов в распознаватель речи, используя текст вместо аудио для синхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между словами и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-265">Emulates input of specific words to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="c02c7-266">Результат операции распознавания или <see langword="null" />, если операция завершилась с ошибкой или распознаватель не включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-266">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-267">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-267">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="c02c7-268">Использует распознаватель `compareOptions` когда его применяет правила грамматики входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-268">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c02c7-269">Распознаватели, входящие в состав Vista и Windows 7 не учитывать регистр, если <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase> значение присутствует.</span><span class="sxs-lookup"><span data-stu-id="c02c7-269">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c02c7-270">Распознаватель никогда не учитывает ширину символа и никогда не игнорирует тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-270">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="c02c7-271">Распознаватель также новые строки и лишние пробелы не учитываются и рассматривает знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-271">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="c02c7-272">Дополнительные сведения о ширину символа и тип японской азбуки, см. в разделе <xref:System.Globalization.CompareOptions> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-272">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-273">Для распознавателя нет загруженных грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-273">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-274"><paramref name="wordUnits" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-274"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-275"><paramref name="wordUnits" /> содержит один или несколько элементов <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-275"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c02c7-276"><paramref name="compareOptions" /> содержит флаг <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> или <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-276"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ EmulateRecognize(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognize : string * System.Globalization.CompareOptions -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.EmulateRecognize (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c02c7-277">Входная фраза для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-277">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c02c7-278">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-278">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-279">Эмулирует ввод фразы в распознаватель речи, используя текст вместо аудио для синхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между фразой и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-279">Emulates input of a phrase to the speech recognizer, using text in place of audio for synchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <returns><span data-ttu-id="c02c7-280">Результат операции распознавания или <see langword="null" />, если операция завершилась с ошибкой или распознаватель не включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-280">The result for the recognition operation, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-281">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-281">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span>  
  
 <span data-ttu-id="c02c7-282">Использует распознаватель `compareOptions` когда его применяет правила грамматики входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-282">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c02c7-283">Распознаватели, входящие в состав Vista и Windows 7 не учитывать регистр, если <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase> значение присутствует.</span><span class="sxs-lookup"><span data-stu-id="c02c7-283">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c02c7-284">Распознаватель никогда не учитывает ширину символа и никогда не игнорирует тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-284">The recognizer always ignores the character width and never ignores the Kana type.</span></span> <span data-ttu-id="c02c7-285">Распознаватель также новые строки и лишние пробелы не учитываются и рассматривает знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-285">The recognizer also ignores new lines and extra white space and treats punctuation as literal input.</span></span> <span data-ttu-id="c02c7-286">Дополнительные сведения о ширину символа и тип японской азбуки, см. в разделе <xref:System.Globalization.CompareOptions> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-286">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-287">Для распознавателя нет загруженных грамматик распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-287">The recognizer has no speech recognition grammars loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-288"><paramref name="inputText" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-288"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-289"><paramref name="inputText" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-289"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c02c7-290"><paramref name="compareOptions" /> содержит флаг <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> или <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-290"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-291">Эмулирует ввод в распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-291">Emulates input to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-292">Эти методы обхода входных звуковых данных системы и введите текст в распознаватель как <xref:System.String> объектов или как массив <xref:System.Speech.Recognition.RecognizedWordUnit> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-292">These methods bypass the system audio input and provide text to the recognizer as <xref:System.String> objects or as an array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="c02c7-293">Это может быть полезно при тестировании или отладке приложения или грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-293">This can be helpful when you are testing or debugging an application or grammar.</span></span> <span data-ttu-id="c02c7-294">Например можно использовать для определения, является ли слова в грамматике и какие семантику возвращаются в том случае, когда слово распознается эмуляции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-294">For example, you can use emulation to determine whether a word is in a grammar and what semantics are returned when the word is recognized.</span></span> <span data-ttu-id="c02c7-295">Используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> метод для отключения звукового ввода распознавания речи во время операций эмуляции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-295">Use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> method to disable audio input to the speech recognition engine during emulation operations.</span></span>  
  
 <span data-ttu-id="c02c7-296">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-296">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c02c7-297">Когда распознаватель завершает асинхронную операцию распознавания, он вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-297">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span> <span data-ttu-id="c02c7-298">Распознаватель новые строки и лишние пробелы не учитываются и рассматривает знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-298">The recognizer ignores new lines and extra white space and treats punctuation as literal input.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c02c7-299"><xref:System.Speech.Recognition.RecognitionResult> Объект, созданный распознавателем речи в ответ на эмулированного ввода имеет значение `null` для его <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-299">The <xref:System.Speech.Recognition.RecognitionResult> object generated by the speech recognizer in response to emulated input has a value of `null` for its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-300">Чтобы эмулировать синхронного распознавания, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-300">To emulate synchronous recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EmulateRecognizeAsync (inputText As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync inputText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c02c7-301">Входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-301">The input for the recognition operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-302">Эмулирует ввод фразы в распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-302">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-303">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-303">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c02c7-304">Когда распознаватель завершает асинхронную операцию распознавания, он вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-304">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="c02c7-305">Распознаватели, входящие в состав Vista и Windows 7 не учитывает регистр и ширины символов, при применении правил грамматики для входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-305">The recognizers that ship with Vista and Windows 7 ignore case and character width when applying grammar rules to the input phrase.</span></span> <span data-ttu-id="c02c7-306">Дополнительные сведения о такой тип сравнения, см. в разделе <xref:System.Globalization.CompareOptions> значений перечисления <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> и <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-306">For more information about this type of comparison, see the <xref:System.Globalization.CompareOptions> enumeration values <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> and <xref:System.Globalization.CompareOptions.IgnoreWidth>.</span></span> <span data-ttu-id="c02c7-307">Распознаватели также игнорировать новые строки и лишние пробелы и обрабатывать знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-307">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-308">В примере кода является частью консольного приложения, демонстрирующий асинхронной эмулированного ввода, результаты распознавания связанные и связанные события, вызываемые в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-308">The code example below is part of a console application that demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span> <span data-ttu-id="c02c7-309">Пример формирует следующие выходные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-309">The example generates the following output.</span></span>  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-310">Для распознавателя нет загруженных грамматик распознавания речи или распознаватель имеет асинхронную операцию распознавания, которая еще не завершена.</span><span class="sxs-lookup"><span data-stu-id="c02c7-310">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-311"><paramref name="inputText" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-311"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-312"><paramref name="inputText" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-312"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(cli::array &lt;System::Speech::Recognition::RecognizedWordUnit ^&gt; ^ wordUnits, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : System.Speech.Recognition.RecognizedWordUnit[] * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (wordUnits, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits"><span data-ttu-id="c02c7-313">Массив единиц слов, содержащий входные данные для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-313">An array of word units that contains the input for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c02c7-314">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-314">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-315">Эмулирует ввод конкретных слов в общий распознаватель речи, используя массив объектов <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> вместо аудио для асинхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между словами и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-315">Emulates input of specific words to the speech recognizer, using an array of <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> objects in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the words and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-316">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-316">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c02c7-317">Когда распознаватель завершает асинхронную операцию распознавания, он вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-317">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="c02c7-318">Использует распознаватель `compareOptions` когда его применяет правила грамматики входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-318">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c02c7-319">Распознаватели, входящие в состав Vista и Windows 7 не учитывать регистр, если <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase> значение присутствует.</span><span class="sxs-lookup"><span data-stu-id="c02c7-319">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c02c7-320">Распознаватель всегда игнорировать ширину символа и никогда не игнорируется тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-320">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="c02c7-321">Распознаватели также игнорировать новые строки и лишние пробелы и обрабатывать знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-321">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="c02c7-322">Дополнительные сведения о ширину символа и тип японской азбуки, см. в разделе <xref:System.Globalization.CompareOptions> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-322">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-323">Для распознавателя нет загруженных грамматик распознавания речи или распознаватель имеет асинхронную операцию распознавания, которая еще не завершена.</span><span class="sxs-lookup"><span data-stu-id="c02c7-323">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-324"><paramref name="wordUnits" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-324"><paramref name="wordUnits" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-325"><paramref name="wordUnits" /> содержит один или несколько элементов <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-325"><paramref name="wordUnits" /> contains one or more <see langword="null" /> elements.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c02c7-326"><paramref name="compareOptions" /> содержит флаг <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> или <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-326"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EmulateRecognizeAsync(System::String ^ inputText, System::Globalization::CompareOptions compareOptions);" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeAsync : string * System.Globalization.CompareOptions -&gt; unit" Usage="speechRecognitionEngine.EmulateRecognizeAsync (inputText, compareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText"><span data-ttu-id="c02c7-327">Входная фраза для операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-327">The input phrase for the recognition operation.</span></span></param>
        <param name="compareOptions"><span data-ttu-id="c02c7-328">Поразрядное сочетание значений перечисления, описывающих тип сравнения, который требуется использовать для эмулируемой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-328">A bitwise combination of the enumeration values that describe the type of comparison to use for the emulated recognition operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-329">Эмулирует ввод фразы в распознаватель речи, используя текст вместо аудио для асинхронного распознавания речи, и указывает способ обработки распознавателем сравнения Юникода между фразой и загруженными грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-329">Emulates input of a phrase to the speech recognizer, using text in place of audio for asynchronous speech recognition, and specifies how the recognizer handles Unicode comparison between the phrase and the loaded speech recognition grammars.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-330">Создает событие распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события так, как если бы не эмулируется операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-330">The speech recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events as if the recognition operation is not emulated.</span></span> <span data-ttu-id="c02c7-331">Когда распознаватель завершает асинхронную операцию распознавания, он вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-331">When the recognizer completes the asynchronous recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
 <span data-ttu-id="c02c7-332">Использует распознаватель `compareOptions` когда его применяет правила грамматики входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-332">The recognizer uses `compareOptions` when it applies grammar rules to the input phrase.</span></span> <span data-ttu-id="c02c7-333">Распознаватели, входящие в состав Vista и Windows 7 не учитывать регистр, если <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> или <xref:System.Globalization.CompareOptions.IgnoreCase> значение присутствует.</span><span class="sxs-lookup"><span data-stu-id="c02c7-333">The recognizers that ship with Vista and Windows 7 ignore case if the <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> or <xref:System.Globalization.CompareOptions.IgnoreCase> value is present.</span></span> <span data-ttu-id="c02c7-334">Распознаватель всегда игнорировать ширину символа и никогда не игнорируется тип японской азбуки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-334">The recognizers always ignore the character width and never ignore the Kana type.</span></span> <span data-ttu-id="c02c7-335">Распознаватели также игнорировать новые строки и лишние пробелы и обрабатывать знаки пунктуации как литерал входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-335">The recognizers also ignore new lines and extra white space and treat punctuation as literal input.</span></span> <span data-ttu-id="c02c7-336">Дополнительные сведения о ширину символа и тип японской азбуки, см. в разделе <xref:System.Globalization.CompareOptions> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-336">For more information about character width and Kana type, see the <xref:System.Globalization.CompareOptions> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-337">Для распознавателя нет загруженных грамматик распознавания речи или распознаватель имеет асинхронную операцию распознавания, которая еще не завершена.</span><span class="sxs-lookup"><span data-stu-id="c02c7-337">The recognizer has no speech recognition grammars loaded, or the recognizer has an asynchronous recognition operation that is not yet complete.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-338"><paramref name="inputText" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-338"><paramref name="inputText" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-339"><paramref name="inputText" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-339"><paramref name="inputText" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="c02c7-340"><paramref name="compareOptions" /> содержит флаг <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" /> или <see cref="F:System.Globalization.CompareOptions.StringSort" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-340"><paramref name="compareOptions" /> contains the <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, or <see cref="F:System.Globalization.CompareOptions.StringSort" /> flag.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event EmulateRecognizeCompleted As EventHandler(Of EmulateRecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::EmulateRecognizeCompletedEventArgs ^&gt; ^ EmulateRecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.EmulateRecognizeCompleted : EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " Usage="member this.EmulateRecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-341">Возникает, если <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> оформляет асинхронную операцию распознавания эмулированного ввода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-341">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation of emulated input.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-342">Каждый <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> метод начинает асинхронную операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-342">Each <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> method begins an asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-343"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событие, когда он завершает асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-343">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when it finalizes the asynchronous operation.</span></span>  
  
 <span data-ttu-id="c02c7-344"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> Операции могут вызывать <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-344">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> operation can raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events.</span></span> <span data-ttu-id="c02c7-345"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> Событий является последним такого события, что распознаватель создает для данной операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-345">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event is the last such event that the recognizer raises for a given operation.</span></span>  
  
 <span data-ttu-id="c02c7-346">При успешном выполнении эмулированного распознавания доступен результат распознавания, используя одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="c02c7-346">If emulated recognition was successful, you can access the recognition result using the either of the following:</span></span>  
  
-   <span data-ttu-id="c02c7-347"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> Свойство в <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> объекта в обработчике <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-347">The <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event.</span></span>  
  
-   <span data-ttu-id="c02c7-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> свойство в <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> объекта в обработчике <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-348"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property in the <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="c02c7-349">Если эмулированного распознавания не прошла, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событие не происходит и <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> будет иметь значение null.</span><span class="sxs-lookup"><span data-stu-id="c02c7-349">If emulated recognition was not successful, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event is not raised and the <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> will be null.</span></span>  
  
 <span data-ttu-id="c02c7-350">Интерфейс <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> является производным от интерфейса <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-350"><xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> derives from <xref:System.ComponentModel.AsyncCompletedEventArgs>.</span></span>  
  
 <span data-ttu-id="c02c7-351">Интерфейс <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> является производным от интерфейса <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-351"><xref:System.Speech.Recognition.SpeechRecognizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="c02c7-352">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> определяется метод обработки события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-352">When you create an <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-353">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-353">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-354">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-354">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-355">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-355">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-356">Следующий пример является частью консольное приложение, которое загружает грамматику распознавания речи и демонстрирует асинхронные эмулированного ввода, результаты распознавания связанные и связанные события, вызываемые в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-356">The following example is part of a console application that loads a speech recognition grammar and demonstrates asynchronous emulated input, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call matches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-357">Получает или задает интервал молчания, который <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> будет принимать в конце однозначных вводных данных, прежде чем финализировать операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-357">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of unambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="c02c7-358">Длительность периода молчания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-358">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-359">Распознаватель речи использует этот интервал времени ожидания при однозначном распознавания входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-359">The speech recognizer uses this timeout interval when the recognition input is unambiguous.</span></span> <span data-ttu-id="c02c7-360">Например, для грамматики распознавания речи, который поддерживает распознавание либо «новый игр.» или «новая игра», «новый игр обратитесь» является однозначным входными данными, а «новая игра» является неоднозначным входными данными.</span><span class="sxs-lookup"><span data-stu-id="c02c7-360">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="c02c7-361">Это свойство определяет время ожидания распознавания речи для дополнительных входных данных, прежде чем финализировать операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-361">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="c02c7-362">Интервал времени ожидания может составлять от 0 секунд до 10 секунд включительно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-362">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="c02c7-363">Значение по умолчанию — 150 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-363">The default is 150 milliseconds.</span></span>  
  
 <span data-ttu-id="c02c7-364">Чтобы задать интервал времени ожидания для неоднозначных входных данных, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-364">To set the timeout interval for ambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c02c7-365">Этому свойству задано значение меньше 0 или больше 10 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-365">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="VB.NET" Value="Public Property EndSilenceTimeoutAmbiguous As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan EndSilenceTimeoutAmbiguous { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.EndSilenceTimeoutAmbiguous : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-366">Получает или задает интервал молчания, который <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> будет принимать в конце неоднозначных входных данных, прежде чем финализировать операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-366">Gets or sets the interval of silence that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> will accept at the end of ambiguous input before finalizing a recognition operation.</span></span></summary>
        <value><span data-ttu-id="c02c7-367">Длительность периода молчания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-367">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-368">Распознаватель речи использует этот интервал времени ожидания при распознавания входных данных является неоднозначным.</span><span class="sxs-lookup"><span data-stu-id="c02c7-368">The speech recognizer uses this timeout interval when the recognition input is ambiguous.</span></span> <span data-ttu-id="c02c7-369">Например, для грамматики распознавания речи, который поддерживает распознавание либо «новый игр.» или «новая игра», «новый игр обратитесь» является однозначным входными данными, а «новая игра» является неоднозначным входными данными.</span><span class="sxs-lookup"><span data-stu-id="c02c7-369">For example, for a speech recognition grammar that supports recognition of either "new game please" or "new game", "new game please" is an unambiguous input, and "new game" is an ambiguous input.</span></span>  
  
 <span data-ttu-id="c02c7-370">Это свойство определяет время ожидания распознавания речи для дополнительных входных данных, прежде чем финализировать операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-370">This property determines how long the speech recognition engine will wait for additional input before finalizing a recognition operation.</span></span> <span data-ttu-id="c02c7-371">Интервал времени ожидания может составлять от 0 секунд до 10 секунд включительно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-371">The timeout interval can be from 0 seconds to 10 seconds, inclusive.</span></span> <span data-ttu-id="c02c7-372">Значение по умолчанию — 500 миллисекунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-372">The default is 500 milliseconds.</span></span>  
  
 <span data-ttu-id="c02c7-373">Чтобы задать интервал времени ожидания для однозначных вводных данных, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-373">To set the timeout interval for unambiguous input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c02c7-374">Этому свойству задано значение меньше 0 или больше 10 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-374">This property is set to less than 0 seconds or greater than 10 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Grammars As ReadOnlyCollection(Of Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ Grammars { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::Grammar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Grammars : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-375">Получает коллекцию объектов <see cref="T:System.Speech.Recognition.Grammar" />, загруженных в данных экземпляр <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-375">Gets a collection of the <see cref="T:System.Speech.Recognition.Grammar" /> objects that are loaded in this <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <value><span data-ttu-id="c02c7-376">Коллекция объектов <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-376">The collection of <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c02c7-377">В следующем примере выводятся сведения на консоль, для каждого грамматики распознавания речи, который в данный момент загружается распознавателем речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-377">The following example outputs information to the console for each speech recognition grammar that is currently loaded by a speech recognizer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c02c7-378">Скопируйте коллекцию грамматики, чтобы избежать ошибок, если коллекция была изменена, пока этот метод перечисляет элементы коллекции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-378">Copy the grammar collection to avoid errors if the collection is modified while this method enumerates the elements of the collection.</span></span>  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialSilenceTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan InitialSilenceTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.InitialSilenceTimeout : TimeSpan with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-379">Получает или задает интервал времени, в течение которого <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> принимает входные данные, содержащие только молчание, прежде чем финализировать распознавание.</span><span class="sxs-lookup"><span data-stu-id="c02c7-379">Gets or sets the time interval during which a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> accepts input containing only silence before finalizing recognition.</span></span></summary>
        <value><span data-ttu-id="c02c7-380">Длительность периода молчания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-380">The duration of the interval of silence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-381">Каждый распознаватель речи реализует алгоритм для различения бездействия и речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-381">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="c02c7-382">Если входные данные распознаватель бездействия во время истечения времени ожидания окончания начального молчания, распознаватель завершает операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-382">If the recognizer input is silence during the initial silence timeout period, then the recognizer finalizes that recognition operation.</span></span>  
  
-   <span data-ttu-id="c02c7-383">Для асинхронного распознавания операций и эмуляции, вызывает распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий, где <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> свойство `true`и <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> свойство `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-383">For asynchronous recognition operations and emulation, the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, where the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=nameWithType> property is `true`, and the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=nameWithType> property is `null`.</span></span>  
  
-   <span data-ttu-id="c02c7-384">Для синхронного распознавания операций и эмуляции, возвращает распознаватель `null`, а не является допустимым <xref:System.Speech.Recognition.RecognitionResult>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-384">For synchronous recognition operations and emulation, the recognizer returns `null`, instead of a valid <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="c02c7-385">Если интервал времени ожидания окончания начального молчания имеет значение 0, распознаватель не выполняет проверку времени ожидания окончания начального молчания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-385">If the initial silence timeout interval is set to 0, the recognizer does not perform an initial silence timeout check.</span></span> <span data-ttu-id="c02c7-386">Интервал времени ожидания может быть любым положительным значением.</span><span class="sxs-lookup"><span data-stu-id="c02c7-386">The timeout interval can be any non-negative value.</span></span> <span data-ttu-id="c02c7-387">Значение по умолчанию — 0 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-387">The default is 0 seconds.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-388">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-388">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-389">В примере задается <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства <xref:System.Speech.Recognition.SpeechRecognitionEngine> перед запуском средства распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-389">The example sets the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> before initiating speech recognition.</span></span> <span data-ttu-id="c02c7-390">Обработчики для распознавателя речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> события вывода сведений о событиях в консоль, чтобы продемонстрировать, каким образом <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства <xref:System.Speech.Recognition.SpeechRecognitionEngine> свойства влияют на операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-390">Handlers for the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> events output event information to the console to demonstrate how the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> properties affect recognition operations.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder. 
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c02c7-391">Этому свойству задано значение меньше 0 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-391">This property is set to less than 0 seconds.</span></span></exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InstalledRecognizers () As ReadOnlyCollection(Of RecognizerInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizerInfo ^&gt; ^ InstalledRecognizers();" />
      <MemberSignature Language="F#" Value="static member InstalledRecognizers : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;" Usage="System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-392">Возвращает сведения для всех установленных распознавателей речи в текущей системе.</span><span class="sxs-lookup"><span data-stu-id="c02c7-392">Returns information for all of the installed speech recognizers on the current system.</span></span></summary>
        <returns><span data-ttu-id="c02c7-393">Доступная только для чтения коллекция объектов <see cref="T:System.Speech.Recognition.RecognizerInfo" />, описывающих установленные распознаватели.</span><span class="sxs-lookup"><span data-stu-id="c02c7-393">A read-only collection of the <see cref="T:System.Speech.Recognition.RecognizerInfo" /> objects that describe the installed recognizers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-394">Чтобы получить сведения о текущем распознаватель, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-394">To get information about the current recognizer, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-395">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-395">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-396">В примере используется коллекция, возвращенная <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> способ поиска распознаватель речи, который поддерживает английского языка.</span><span class="sxs-lookup"><span data-stu-id="c02c7-396">The example uses the collection returned by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method to find a speech recognizer that supports the English language.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="c02c7-397">Объект грамматики для загрузки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-397">The grammar object to load.</span></span></param>
        <summary><span data-ttu-id="c02c7-398">Выполняет синхронную загрузку объекта <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-398">Synchronously loads a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-399">Распознаватель создает исключение, если <xref:System.Speech.Recognition.Grammar> объект уже загружен, загружается асинхронно или не удалось загрузить в любой распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-399">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="c02c7-400">Не удается загрузить же <xref:System.Speech.Recognition.Grammar> объекта в несколько экземпляров <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-400">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="c02c7-401">Вместо этого создайте новый <xref:System.Speech.Recognition.Grammar> для каждой <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-401">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="c02c7-402">Если выполняется распознаватель, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> приостановить модуль распознавания речи, прежде чем загрузка, выгрузка, включение или отключение грамматику.</span><span class="sxs-lookup"><span data-stu-id="c02c7-402">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="c02c7-403">Когда вы загружаете грамматику, оно включено по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-403">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="c02c7-404">Чтобы отключить загруженных грамматики, используйте <xref:System.Speech.Recognition.Grammar.Enabled%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-404">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-405">Загрузить <xref:System.Speech.Recognition.Grammar> асинхронно, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-405">To load a <xref:System.Speech.Recognition.Grammar> object asynchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-406">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-406">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-407">В примере создается <xref:System.Speech.Recognition.DictationGrammar> и загружает их в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-407">The example creates a <xref:System.Speech.Recognition.DictationGrammar> and loads it into a speech recognizer.</span></span>  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-408"><paramref name="Grammar" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-408"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-409">Состояние <paramref name="Grammar" /> недопустимо.</span><span class="sxs-lookup"><span data-stu-id="c02c7-409"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadGrammarAsync(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarAsync : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.LoadGrammarAsync grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="c02c7-410">Грамматика распознавания речи для загрузки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-410">The speech recognition grammar to load.</span></span></param>
        <summary><span data-ttu-id="c02c7-411">Выполняет асинхронную загрузку грамматики распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-411">Asynchronously loads a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-412">После завершения загрузки в распознаватель <xref:System.Speech.Recognition.Grammar> объекта, он выдает <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-412">When the recognizer completes loading a <xref:System.Speech.Recognition.Grammar> object, it raises a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> event.</span></span> <span data-ttu-id="c02c7-413">Распознаватель создает исключение, если <xref:System.Speech.Recognition.Grammar> объект уже загружен, загружается асинхронно или не удалось загрузить в любой распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-413">The recognizer throws an exception if the <xref:System.Speech.Recognition.Grammar> object is already loaded, is being asynchronously loaded, or has failed to load into any recognizer.</span></span> <span data-ttu-id="c02c7-414">Не удается загрузить же <xref:System.Speech.Recognition.Grammar> объекта в несколько экземпляров <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-414">You cannot load the same <xref:System.Speech.Recognition.Grammar> object into multiple instances of <xref:System.Speech.Recognition.SpeechRecognitionEngine>.</span></span> <span data-ttu-id="c02c7-415">Вместо этого создайте новый <xref:System.Speech.Recognition.Grammar> для каждой <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-415">Instead, create a new <xref:System.Speech.Recognition.Grammar> object for each <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="c02c7-416">Если выполняется распознаватель, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> приостановить модуль распознавания речи, прежде чем загрузка, выгрузка, включение или отключение грамматику.</span><span class="sxs-lookup"><span data-stu-id="c02c7-416">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="c02c7-417">Когда вы загружаете грамматику, оно включено по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-417">When you load a grammar, it is enabled by default.</span></span> <span data-ttu-id="c02c7-418">Чтобы отключить загруженных грамматики, используйте <xref:System.Speech.Recognition.Grammar.Enabled%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-418">To disable a loaded grammar, use the <xref:System.Speech.Recognition.Grammar.Enabled%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-419">Чтобы загрузить синхронно грамматики распознавания речи, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-419">To load a speech recognition grammar synchronously, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-420"><paramref name="Grammar" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-420"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-421">Состояние <paramref name="Grammar" /> недопустимо.</span><span class="sxs-lookup"><span data-stu-id="c02c7-421"><paramref name="Grammar" /> is not in a valid state.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="c02c7-422">Асинхронная операция была отменена.</span><span class="sxs-lookup"><span data-stu-id="c02c7-422">The asynchronous operation was canceled.</span></span></exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadGrammarCompleted As EventHandler(Of LoadGrammarCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::LoadGrammarCompletedEventArgs ^&gt; ^ LoadGrammarCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadGrammarCompleted : EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " Usage="member this.LoadGrammarCompleted : System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-423">Возникает при завершении <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> асинхронной загрузки объекта <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-423">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finishes the asynchronous loading of a <see cref="T:System.Speech.Recognition.Grammar" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-424">Распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метода запускает асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-424">The recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method initiates an asynchronous operation.</span></span> <span data-ttu-id="c02c7-425"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Вызывает это событие, если в результате этой операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-425">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it completes the operation.</span></span> <span data-ttu-id="c02c7-426">Чтобы получить <xref:System.Speech.Recognition.Grammar> загрузку распознаватель, используйте <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> связанного <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-426">To get the <xref:System.Speech.Recognition.Grammar> object that the recognizer loaded, use the <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> property of the associated <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>.</span></span> <span data-ttu-id="c02c7-427">Чтобы получить текущий <xref:System.Speech.Recognition.Grammar> объектов распознаватель загрузится, использовать распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-427">To get the current <xref:System.Speech.Recognition.Grammar> objects the recognizer has loaded, use the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-428">Если выполняется распознаватель, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> приостановить модуль распознавания речи, прежде чем загрузка, выгрузка, включение или отключение грамматику.</span><span class="sxs-lookup"><span data-stu-id="c02c7-428">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the speech recognition engine before loading, unloading,  enabling, or disabling a grammar.</span></span>  
  
 <span data-ttu-id="c02c7-429">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-429">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-430">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-430">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-431">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-431">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-432">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-432">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-433">Следующий пример создает распознаватель речи внутри процесса и затем создает два вида грамматики распознавания конкретных слов и принятия свободного диктовки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-433">The following example creates an in-process speech recognizer, and then creates two types of grammars for recognizing specific words and for accepting free dictation.</span></span> <span data-ttu-id="c02c7-434">В примере создается <xref:System.Speech.Recognition.Grammar> объекта из каждого грамматики распознавания речи, завершенные, затем асинхронно загружает <xref:System.Speech.Recognition.Grammar> объектов <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-434">The example constructs a <xref:System.Speech.Recognition.Grammar> object from each of the completed speech recognition grammars, then asynchronously loads the <xref:System.Speech.Recognition.Grammar> objects to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span> <span data-ttu-id="c02c7-435">Обработчики для распознавателя <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события записи в консоль имя <xref:System.Speech.Recognition.Grammar> объект, который был использован для выполнения распознавания и текст результата распознавания, соответственно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-435">Handlers for the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events write to the console the name of the <xref:System.Speech.Recognition.Grammar> object that was used to perform the recognition and the text of the recognition result, respectively.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxAlternates As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxAlternates { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxAlternates : int with get, set" Usage="System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-436">Получает или задает максимальное количество альтернативных результатов распознавания, которые <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> возвращает для каждой операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-436">Gets or sets the maximum number of alternate recognition results that the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> returns for each recognition operation.</span></span></summary>
        <value><span data-ttu-id="c02c7-437">Число альтернативных возвращаемых результатов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-437">The number of alternate results to return.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-438"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> Свойство <xref:System.Speech.Recognition.RecognitionResult> класс содержит коллекцию элементов <xref:System.Speech.Recognition.RecognizedPhrase> объекты, представляющие возможных варианта интерпретации входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-438">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property of the <xref:System.Speech.Recognition.RecognitionResult> class contains the collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent possible interpretations of the input.</span></span>  
  
 <span data-ttu-id="c02c7-439">Значение по умолчанию для <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> равно 10.</span><span class="sxs-lookup"><span data-stu-id="c02c7-439">The default value for <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> is 10.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c02c7-440">Для свойства <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> задано значение менее 0.</span><span class="sxs-lookup"><span data-stu-id="c02c7-440"><see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> is set to a value less than 0.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryRecognizerSetting (settingName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ QueryRecognizerSetting(System::String ^ settingName);" />
      <MemberSignature Language="F#" Value="member this.QueryRecognizerSetting : string -&gt; obj" Usage="speechRecognitionEngine.QueryRecognizerSetting settingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="c02c7-441">Имя возвращаемого параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-441">The name of the setting to return.</span></span></param>
        <summary><span data-ttu-id="c02c7-442">Возвращает значения параметров для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-442">Returns the values of settings for the recognizer.</span></span></summary>
        <returns><span data-ttu-id="c02c7-443">Значение параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-443">The value of the setting.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-444">Распознаватель параметров может содержать строку, 64-разрядное целое число или данные адреса памяти.</span><span class="sxs-lookup"><span data-stu-id="c02c7-444">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="c02c7-445">В следующей таблице описаны параметры, которые определены для Microsoft Speech API (SAPI)-совместимые распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-445">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="c02c7-446">Следующие параметры должны иметь такой же диапазон для каждого распознавателя, который поддерживает параметр.</span><span class="sxs-lookup"><span data-stu-id="c02c7-446">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="c02c7-447">Совместимые SAPI распознаватель не требуется для поддержки этих параметров и может поддерживать другие параметры.</span><span class="sxs-lookup"><span data-stu-id="c02c7-447">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="c02c7-448">name</span><span class="sxs-lookup"><span data-stu-id="c02c7-448">Name</span></span>|<span data-ttu-id="c02c7-449">Описание</span><span class="sxs-lookup"><span data-stu-id="c02c7-449">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="c02c7-450">Указывает распознаватель потребление ресурсов ЦП.</span><span class="sxs-lookup"><span data-stu-id="c02c7-450">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="c02c7-451">Диапазон составляет от 0 до 100.</span><span class="sxs-lookup"><span data-stu-id="c02c7-451">The range is from 0 to 100.</span></span> <span data-ttu-id="c02c7-452">Значение по умолчанию — 50.</span><span class="sxs-lookup"><span data-stu-id="c02c7-452">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="c02c7-453">Указывает длину бездействия в конце однозначных вводных данных, прежде чем в распознаватель речи завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-453">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c02c7-454">Диапазон составляет от 0 до 10 000 миллисекунд (мс).</span><span class="sxs-lookup"><span data-stu-id="c02c7-454">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="c02c7-455">Этот параметр соответствует в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-455">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span>  <span data-ttu-id="c02c7-456">По умолчанию = 150ms.</span><span class="sxs-lookup"><span data-stu-id="c02c7-456">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="c02c7-457">Указывает длину бездействия в конце неоднозначных входных данных, прежде чем в распознаватель речи завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-457">Indicates the length of silence at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c02c7-458">Диапазон составляет от 0 до 10 000 мс.</span><span class="sxs-lookup"><span data-stu-id="c02c7-458">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="c02c7-459">Этот параметр соответствует в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-459">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="c02c7-460">По умолчанию 500 мс.</span><span class="sxs-lookup"><span data-stu-id="c02c7-460">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="c02c7-461">Указывает, является ли адаптации акустическую модель ON (значение = `1`) или OFF (значение = `0`).</span><span class="sxs-lookup"><span data-stu-id="c02c7-461">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="c02c7-462">Значение по умолчанию — `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="c02c7-462">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="c02c7-463">Указывает, является ли фон адаптации ON (значение = `1`) или OFF (значение = `0`), и сохраняет параметр в реестре.</span><span class="sxs-lookup"><span data-stu-id="c02c7-463">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="c02c7-464">Значение по умолчанию — `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="c02c7-464">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="c02c7-465">Чтобы обновить параметр для распознавателя, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-465">To update a setting for the recognizer, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-466">Следующий пример является частью консольное приложение, которое выводит значения для некоторых параметров, определенных для распознавателя, который поддерживает этот языковой стандарт en US.</span><span class="sxs-lookup"><span data-stu-id="c02c7-466">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="c02c7-467">Пример формирует следующие выходные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-467">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-468"><paramref name="settingName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-468"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-469"><paramref name="settingName" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-469"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="c02c7-470">Распознаватель не имеет параметра с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="c02c7-470">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-471">Запускает синхронную операцию распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-471">Starts a synchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-472">Эти методы выполняют операцию один, синхронного распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-472">These methods perform a single, synchronous recognition operation.</span></span> <span data-ttu-id="c02c7-473">Распознаватель выполняет эту операцию от его загруженных и включенных грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-473">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c02c7-474">Во время вызова этого метода распознаватель может инициировать следующие события:</span><span class="sxs-lookup"><span data-stu-id="c02c7-474">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c02c7-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-475"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c02c7-476">Вызывается, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-476">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c02c7-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-477"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c02c7-478">Вызывается, когда входные данные создает неоднозначного соответствия с одним активным грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-478">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c02c7-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-479"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c02c7-480">Вызывается, когда распознаватель завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-480">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="c02c7-481">Распознаватель не вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий при использовании одной из <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-481">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 <span data-ttu-id="c02c7-482"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> Методы возвращают <xref:System.Speech.Recognition.RecognitionResult> объекта, или `null` Если операция завершилась неудачно или распознаватель не включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-482">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods return a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful or the recognizer is not enabled.</span></span>  
  
 <span data-ttu-id="c02c7-483">Операцию синхронной распознавания может завершиться ошибкой по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="c02c7-483">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c02c7-484">До истечения срока действия интервалы ожидания для не обнаруживается речь <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства, или для `initialSilenceTimeout` параметр <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-484">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties, or for the `initialSilenceTimeout` parameter of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> method.</span></span>  
  
-   <span data-ttu-id="c02c7-485">Механизм распознавания обнаруживает речи, но не находит совпадений, в любом из загруженных и включенных <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-485">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c02c7-486">Чтобы изменить как распознаватель обрабатывает время распознавания речи или бездействия, по отношению к распознавания, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-486">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="c02c7-487"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Должен иметь по крайней мере <xref:System.Speech.Recognition.Grammar> загружен объект, прежде чем выполнять распознавание.</span><span class="sxs-lookup"><span data-stu-id="c02c7-487">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="c02c7-488">Для загрузки грамматики распознавания речи, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-488">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-489">Чтобы выполнить асинхронное распознавание, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-489">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize () As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize();" />
      <MemberSignature Language="F#" Value="member this.Recognize : unit -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-490">Выполняет синхронную операцию распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-490">Performs a synchronous speech recognition operation.</span></span></summary>
        <returns><span data-ttu-id="c02c7-491">Результат распознавания для ввода или <see langword="null" />, если операция завершилась с ошибкой или распознаватель не включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-491">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-492">Этот метод выполняет операцию единый распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-492">This method performs a single recognition operation.</span></span> <span data-ttu-id="c02c7-493">Распознаватель выполняет эту операцию от его загруженных и включенных грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-493">The recognizer performs this operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c02c7-494">Во время вызова этого метода распознаватель может инициировать следующие события:</span><span class="sxs-lookup"><span data-stu-id="c02c7-494">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c02c7-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-495"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c02c7-496">Вызывается, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-496">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c02c7-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-497"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c02c7-498">Вызывается, когда входные данные создает неоднозначного соответствия с одним активным грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-498">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c02c7-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-499"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c02c7-500">Вызывается, когда распознаватель завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-500">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="c02c7-501">Распознаватель не вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий при использовании этого метода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-501">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="c02c7-502"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> Возвращает <xref:System.Speech.Recognition.RecognitionResult> объекта, или `null` Если операция не выполнена успешно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-502">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="c02c7-503">Операцию синхронной распознавания может завершиться ошибкой по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="c02c7-503">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c02c7-504">До истечения срока действия интервалы ожидания для не обнаруживается речь <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-504">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="c02c7-505">Механизм распознавания обнаруживает речи, но не находит совпадений, в любом из загруженных и включенных <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-505">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c02c7-506">Чтобы выполнить асинхронное распознавание, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-506">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-507">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-507">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-508">В примере создается <xref:System.Speech.Recognition.DictationGrammar>, загружает его в распознаватель речи в процесс и выполняет одну операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-508">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Recognize (initialSilenceTimeout As TimeSpan) As RecognitionResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognitionResult ^ Recognize(TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="F#" Value="member this.Recognize : TimeSpan -&gt; System.Speech.Recognition.RecognitionResult" Usage="speechRecognitionEngine.Recognize initialSilenceTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout"><span data-ttu-id="c02c7-509">Интервал времени, в течение которого распознаватель речи принимает входные данные, содержащие только тишину, перед завершением распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-509">The interval of time a speech recognizer accepts input containing only silence before finalizing recognition.</span></span></param>
        <summary><span data-ttu-id="c02c7-510">Выполняет синхронную операцию распознавания речи с указанным начальным временем ожидания бездействия.</span><span class="sxs-lookup"><span data-stu-id="c02c7-510">Performs a synchronous speech recognition operation with a specified initial silence timeout period.</span></span></summary>
        <returns><span data-ttu-id="c02c7-511">Результат распознавания для ввода или <see langword="null" />, если операция завершилась с ошибкой или распознаватель не включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-511">The recognition result for the input, or <see langword="null" /> if the operation is not successful or the recognizer is not enabled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-512">Если средство распознавания речи обнаруживает речи в интервал времени, заданный в параметре `initialSilenceTimeout` аргумент, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> выполняет операцию единый распознавания и затем прекращает работу.</span><span class="sxs-lookup"><span data-stu-id="c02c7-512">If the speech recognition engine detects speech within the time interval specified by `initialSilenceTimeout` argument, <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> performs a single recognition operation and then terminates.</span></span>  <span data-ttu-id="c02c7-513">`initialSilenceTimeout` Параметра заменяет распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-513">The `initialSilenceTimeout` parameter supersedes the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> property.</span></span>  
  
 <span data-ttu-id="c02c7-514">Во время вызова этого метода распознаватель может инициировать следующие события:</span><span class="sxs-lookup"><span data-stu-id="c02c7-514">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c02c7-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-515"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c02c7-516">Вызывается, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-516">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c02c7-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-517"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c02c7-518">Вызывается, когда входные данные создает неоднозначного соответствия с одним активным грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-518">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c02c7-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-519"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c02c7-520">Вызывается, когда распознаватель завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-520">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
 <span data-ttu-id="c02c7-521">Распознаватель не вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий при использовании этого метода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-521">The recognizer does not raise the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event when using this method.</span></span>  
  
 <span data-ttu-id="c02c7-522"><xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> Возвращает <xref:System.Speech.Recognition.RecognitionResult> объекта, или `null` Если операция не выполнена успешно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-522">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> method returns a <xref:System.Speech.Recognition.RecognitionResult> object, or `null` if the operation is not successful.</span></span>  
  
 <span data-ttu-id="c02c7-523">Операцию синхронной распознавания может завершиться ошибкой по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="c02c7-523">A synchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c02c7-524">До истечения срока действия интервалы ожидания для не обнаруживается речь <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> или `initialSilenceTimeout` параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-524">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or for the `initialSilenceTimeout` parameter.</span></span>  
  
-   <span data-ttu-id="c02c7-525">Механизм распознавания обнаруживает речи, но не находит совпадений, в любом из загруженных и включенных <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-525">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c02c7-526">Чтобы выполнить асинхронное распознавание, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-526">To perform asynchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-527">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-527">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-528">В примере создается <xref:System.Speech.Recognition.DictationGrammar>, загружает его в распознаватель речи в процесс и выполняет одну операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-528">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one recognition operation.</span></span>  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-529">Запускает асинхронную операцию распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-529">Starts an asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-530">Эти методы выполняют один или несколько операций асинхронного распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-530">These methods perform single or multiple, asynchronous recognition operations.</span></span> <span data-ttu-id="c02c7-531">Распознаватель выполняет каждую операцию от его загруженных и включенных грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-531">The recognizer performs each operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c02c7-532">Во время вызова этого метода распознаватель может инициировать следующие события:</span><span class="sxs-lookup"><span data-stu-id="c02c7-532">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c02c7-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-533"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c02c7-534">Вызывается, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-534">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c02c7-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-535"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c02c7-536">Вызывается, когда входные данные создает неоднозначного соответствия с одним активным грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-536">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c02c7-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-537"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c02c7-538">Вызывается, когда распознаватель завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-538">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="c02c7-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-539"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="c02c7-540">Вызывается, когда <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> завершения операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-540">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="c02c7-541">Чтобы получить результат асинхронную операцию распознавания, присоединить обработчик событий в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-541">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c02c7-542">Распознаватель вызывает это событие каждый раз, когда она успешно завершает операцию распознавания синхронным или асинхронным.</span><span class="sxs-lookup"><span data-stu-id="c02c7-542">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-543">Если распознавания не прошла, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> свойство <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> объекта, к которому можно получить в обработчике <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событие, будет `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-543">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="c02c7-544">Асинхронную операцию распознавания может завершиться ошибкой по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="c02c7-544">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c02c7-545">До истечения срока действия интервалы ожидания для не обнаруживается речь <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-545">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="c02c7-546">Механизм распознавания обнаруживает речи, но не находит совпадений, в любом из загруженных и включенных <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-546">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
-   <span data-ttu-id="c02c7-547"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Должен иметь по крайней мере <xref:System.Speech.Recognition.Grammar> загружен объект, прежде чем выполнять распознавание.</span><span class="sxs-lookup"><span data-stu-id="c02c7-547">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> must have at least one <xref:System.Speech.Recognition.Grammar> object loaded before performing recognition.</span></span> <span data-ttu-id="c02c7-548">Для загрузки грамматики распознавания речи, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-548">To load a speech recognition grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> method.</span></span>  
  
-   <span data-ttu-id="c02c7-549">Чтобы изменить как распознаватель обрабатывает время распознавания речи или бездействия, по отношению к распознавания, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-549">To modify how the recognizer handles the timing of speech or silence with respect to recognition, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
-   <span data-ttu-id="c02c7-550">Для выполнения синхронного распознавания, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-550">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-551">Выполняет одиночную, асинхронную операцию распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-551">Performs a single, asynchronous speech recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-552">Этот метод выполняет распознавание одиночную, асинхронную операцию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-552">This method performs a single, asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-553">Распознаватель выполняет операцию с его загруженных и включенных грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-553">The recognizer performs the operation against its loaded and enabled speech recognition grammars.</span></span>  
  
 <span data-ttu-id="c02c7-554">Во время вызова этого метода распознаватель может инициировать следующие события:</span><span class="sxs-lookup"><span data-stu-id="c02c7-554">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c02c7-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-555"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c02c7-556">Вызывается, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-556">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c02c7-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-557"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c02c7-558">Вызывается, когда входные данные создает неоднозначного соответствия с одним активным грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-558">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c02c7-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-559"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c02c7-560">Вызывается, когда распознаватель завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-560">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="c02c7-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-561"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="c02c7-562">Вызывается, когда <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> завершения операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-562">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="c02c7-563">Чтобы получить результат асинхронную операцию распознавания, присоединить обработчик событий в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-563">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c02c7-564">Распознаватель вызывает это событие каждый раз, когда она успешно завершает операцию распознавания синхронным или асинхронным.</span><span class="sxs-lookup"><span data-stu-id="c02c7-564">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-565">Если распознавания не прошла, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> свойство <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> объекта, к которому можно получить в обработчике <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событие, будет `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-565">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="c02c7-566">Для выполнения синхронного распознавания, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-566">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-567">В следующем примере показана часть консольное приложение, которое демонстрирует основные асинхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-567">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="c02c7-568">В примере создается <xref:System.Speech.Recognition.DictationGrammar>, загружает его в распознаватель речи в процесс и выполняет одну асинхронную операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-568">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs one asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-569">Обработчики событий, которые демонстрируют события, которые распознаватель вызывает во время операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-569">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsync (mode As RecognizeMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsync(System::Speech::Recognition::RecognizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsync : System.Speech.Recognition.RecognizeMode -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsync mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="c02c7-570">Указывает, нужно ли выполнить одну или несколько операций распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-570">Indicates whether to perform one or multiple recognition operations.</span></span></param>
        <summary><span data-ttu-id="c02c7-571">Выполняет одну или несколько асинхронных операций распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-571">Performs one or more asynchronous speech recognition operations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-572">Если `mode` — <xref:System.Speech.Recognition.RecognizeMode.Multiple>, распознаватель продолжает выполнение операций асинхронное распознавание до <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-572">If `mode` is <xref:System.Speech.Recognition.RecognizeMode.Multiple>, the recognizer continues performing asynchronous recognition operations until the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method is called.</span></span>  
  
 <span data-ttu-id="c02c7-573">Во время вызова этого метода распознаватель может инициировать следующие события:</span><span class="sxs-lookup"><span data-stu-id="c02c7-573">During a call to this method, the recognizer can raise the following events:</span></span>  
  
-   <span data-ttu-id="c02c7-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-574"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>.</span></span>  <span data-ttu-id="c02c7-575">Вызывается, когда средство распознавания обнаруживает ввод, который может быть идентифицирован как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-575">Raised when the recognizer detects input that it can identify as speech.</span></span>  
  
-   <span data-ttu-id="c02c7-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-576"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>.</span></span>  <span data-ttu-id="c02c7-577">Вызывается, когда входные данные создает неоднозначного соответствия с одним активным грамматики.</span><span class="sxs-lookup"><span data-stu-id="c02c7-577">Raised when input creates an ambiguous match with one of the active grammars.</span></span>  
  
-   <span data-ttu-id="c02c7-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-578"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>.</span></span> <span data-ttu-id="c02c7-579">Вызывается, когда распознаватель завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-579">Raised when the recognizer finalizes a recognition operation.</span></span>  
  
-   <span data-ttu-id="c02c7-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-580"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>.</span></span> <span data-ttu-id="c02c7-581">Вызывается, когда <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> завершения операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-581">Raised when a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> operation finishes.</span></span>  
  
 <span data-ttu-id="c02c7-582">Чтобы получить результат асинхронную операцию распознавания, присоединить обработчик событий в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-582">To retrieve the result of an asynchronous recognition operation, attach an event handler to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c02c7-583">Распознаватель вызывает это событие каждый раз, когда она успешно завершает операцию распознавания синхронным или асинхронным.</span><span class="sxs-lookup"><span data-stu-id="c02c7-583">The recognizer raises this event whenever it successfully completes a synchronous or asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-584">Если распознавания не прошла, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> свойство <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> объекта, к которому можно получить в обработчике <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событие, будет `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-584">If recognition was not successful, the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> property on <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object, which you can access in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, will be `null`.</span></span>  
  
 <span data-ttu-id="c02c7-585">Асинхронную операцию распознавания может завершиться ошибкой по следующим причинам:</span><span class="sxs-lookup"><span data-stu-id="c02c7-585">An asynchronous recognition operation can fail for the following reasons:</span></span>  
  
-   <span data-ttu-id="c02c7-586">До истечения срока действия интервалы ожидания для не обнаруживается речь <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-586">Speech is not detected before the timeout intervals expire for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> properties.</span></span>  
  
-   <span data-ttu-id="c02c7-587">Механизм распознавания обнаруживает речи, но не находит совпадений, в любом из загруженных и включенных <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-587">The recognition engine detects speech but finds no matches in any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span>  
  
 <span data-ttu-id="c02c7-588">Для выполнения синхронного распознавания, используйте один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-588">To perform synchronous recognition, use one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-589">В следующем примере показана часть консольное приложение, которое демонстрирует основные асинхронного распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-589">The following example shows part of a console application that demonstrates basic asynchronous speech recognition.</span></span> <span data-ttu-id="c02c7-590">В примере создается <xref:System.Speech.Recognition.DictationGrammar>, загружает его в распознаватель речи внутри процесса и выполняет несколько операций асинхронное распознавание.</span><span class="sxs-lookup"><span data-stu-id="c02c7-590">The example creates a <xref:System.Speech.Recognition.DictationGrammar>, loads it into an in-process speech recognizer, and performs multiple asynchronous recognition operations.</span></span> <span data-ttu-id="c02c7-591">Асинхронные операции, которые будут отменены после 30 секунд.</span><span class="sxs-lookup"><span data-stu-id="c02c7-591">The asynchronous operations are cancelled after 30 seconds.</span></span> <span data-ttu-id="c02c7-592">Обработчики событий, которые демонстрируют события, которые распознаватель вызывает во время операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-592">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncCancel : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-593">Останавливает асинхронное распознавание без ожидания завершения текущей операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-593">Terminates asynchronous recognition without waiting for the current recognition operation to complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-594">Этот метод немедленно завершает асинхронное распознавание.</span><span class="sxs-lookup"><span data-stu-id="c02c7-594">This method immediately finalizes asynchronous recognition.</span></span> <span data-ttu-id="c02c7-595">Если текущий асинхронную операцию распознавания получает входные данные, входные данные усечены, и операция завершается с существующие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-595">If the current asynchronous recognition operation is receiving input, the input is truncated and the operation completes with the existing input.</span></span> <span data-ttu-id="c02c7-596">Вызывает распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событие, когда асинхронная операция отменяется и задает <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> свойство <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> для `true`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-596">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is canceled, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="c02c7-597">Этот метод отменяет асинхронные операции, инициированные <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-597">This method cancels asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c02c7-598">Чтобы остановить асинхронное распознавание без усечения входных данных, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-598">To stop asynchronous recognition without truncating the input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-599">В следующем примере показано частью консольное приложение, которое демонстрирует использование <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-599">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span> <span data-ttu-id="c02c7-600">Пример создает и загружает грамматику распознавания речи, инициирует продолжение асинхронную операцию распознавания и затем приостанавливает 2 секунд, прежде чем отменить операцию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-600">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it cancels the operation.</span></span> <span data-ttu-id="c02c7-601">Распознаватель получает входные данные из файла, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="c02c7-601">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="c02c7-602">Обработчики событий, которые демонстрируют события, которые распознаватель вызывает во время операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-602">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberSignature Language="VB.NET" Value="Public Sub RecognizeAsyncStop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RecognizeAsyncStop();" />
      <MemberSignature Language="F#" Value="member this.RecognizeAsyncStop : unit -&gt; unit" Usage="speechRecognitionEngine.RecognizeAsyncStop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-603">Останавливает асинхронное распознавание после завершения текущей операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-603">Stops asynchronous recognition after the current recognition operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-604">Этот метод завершает асинхронное распознавание без усечения входных данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-604">This method finalizes asynchronous recognition without truncating input.</span></span> <span data-ttu-id="c02c7-605">Если текущая операция асинхронное распознавание получает входные данные, распознаватель продолжает принимать входные данные до завершения текущей операции распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-605">If the current asynchronous recognition operation is receiving input, the recognizer continues accepting input until the current recognition operation is completed.</span></span> <span data-ttu-id="c02c7-606">Вызывает распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> событие, когда асинхронная операция прекращается и задает <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> свойство <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> для `true`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-606">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> event when an asynchronous operation is stopped, and sets the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> to `true`.</span></span> <span data-ttu-id="c02c7-607">Этот метод останавливает асинхронных операций, инициированные <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-607">This method stops asynchronous operations initiated by the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c02c7-608">Чтобы немедленно отменить асинхронное распознавание с только существующие входные данные, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-608">To immediately cancel asynchronous recognition with only the existing input, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-609">В следующем примере показано частью консольное приложение, которое демонстрирует использование <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-609">The following example shows part of a console application that demonstrates the use of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> method.</span></span> <span data-ttu-id="c02c7-610">Пример создает и загружает грамматику распознавания речи, инициирует продолжение асинхронную операцию распознавания и затем приостанавливает 2 секунд, прежде чем он останавливает операцию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-610">The example creates and loads a speech recognition grammar, initiates a continuing asynchronous recognition operation, and then pauses 2 seconds before it stops the operation.</span></span> <span data-ttu-id="c02c7-611">Распознаватель получает входные данные из файла, c:\temp\audioinput\sample.wav.</span><span class="sxs-lookup"><span data-stu-id="c02c7-611">The recognizer receives input from the file, c:\temp\audioinput\sample.wav.</span></span> <span data-ttu-id="c02c7-612">Обработчики событий, которые демонстрируют события, которые распознаватель вызывает во время операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-612">Event handlers are included to demonstrate the events that the recognizer raises during the operation.</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizeCompleted As EventHandler(Of RecognizeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizeCompletedEventArgs ^&gt; ^ RecognizeCompleted;" />
      <MemberSignature Language="F#" Value="member this.RecognizeCompleted : EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " Usage="member this.RecognizeCompleted : System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-613">Возникает, если <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> оформляет асинхронную операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-613">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> finalizes an asynchronous recognition operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-614"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Объекта <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> метод инициирует асинхронную операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-614">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> method initiates an asynchronous recognition operation.</span></span> <span data-ttu-id="c02c7-615">Когда распознаватель завершает асинхронную операцию, он выдает это событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-615">When the recognizer finalizes the asynchronous operation, it raises this event.</span></span>  
  
 <span data-ttu-id="c02c7-616">С помощью обработчика для <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий, вы можете получить доступ к <xref:System.Speech.Recognition.RecognitionResult> в <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-616">Using the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event, you can access the <xref:System.Speech.Recognition.RecognitionResult> in the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> object.</span></span> <span data-ttu-id="c02c7-617">Если распознавания не прошла, <xref:System.Speech.Recognition.RecognitionResult> будет `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-617">If recognition was not successful, <xref:System.Speech.Recognition.RecognitionResult> will be `null`.</span></span> <span data-ttu-id="c02c7-618">Чтобы определить, связана ли время ожидания или прерывании звукового ввода распознавания переход на другой, можно получить доступ к свойства <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, или <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-618">To determine whether a timeout or an interruption in audio input caused recognition to fail, you can access the properties for <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, or <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>.</span></span>  
  
 <span data-ttu-id="c02c7-619">Дополнительные сведения см. в описании класса <xref:System.Speech.Recognition.RecognizeCompletedEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-619">See the <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> class for more information.</span></span>  
  
 <span data-ttu-id="c02c7-620">Чтобы получить сведения о лучших кандидатов отклоненных распознавания, присоединить обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-620">To obtain details on the best rejected recognition candidates, attach a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event.</span></span>  
  
 <span data-ttu-id="c02c7-621">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-621">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-622">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-622">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-623">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-623">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-624">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-624">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-625">Следующий пример распознает фраз, таких как «Отобразить список исполнителей в джазовые категории» или «Отобразить gospel альбомов».</span><span class="sxs-lookup"><span data-stu-id="c02c7-625">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="c02c7-626">В примере используется обработчик <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> событий для отображения сведений о результатах распознавания в консоли.</span><span class="sxs-lookup"><span data-stu-id="c02c7-626">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> event to display information about the results of recognition in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerAudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan RecognizerAudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerAudioPosition : TimeSpan" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-627">Получает текущую позицию <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> в обрабатываемых им входных аудиоданных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-627">Gets the current location of the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> in the audio input that it is processing.</span></span></summary>
        <value><span data-ttu-id="c02c7-628">Позиция распознавателя в обрабатываемых входных звуковых данных.</span><span class="sxs-lookup"><span data-stu-id="c02c7-628">The position of the recognizer in the audio input that it is processing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-629">Положение аудио относится только к каждой распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-629">The audio position is specific to each speech recognizer.</span></span> <span data-ttu-id="c02c7-630">Нулевое значение входного потока устанавливается в том случае, если он включен.</span><span class="sxs-lookup"><span data-stu-id="c02c7-630">The zero value of an input stream is established when it is enabled.</span></span>  
  
 <span data-ttu-id="c02c7-631"><xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> Ссылок на свойства <xref:System.Speech.Recognition.SpeechRecognitionEngine> положение объекта в пределах аудиовхода.</span><span class="sxs-lookup"><span data-stu-id="c02c7-631">The <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property references the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object's position within its audio input.</span></span> <span data-ttu-id="c02c7-632">Напротив <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> свойство ссылается на устройстве ввода, позицию в созданный аудиопоток.</span><span class="sxs-lookup"><span data-stu-id="c02c7-632">By contrast, the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property references the input device's position in its generated audio stream.</span></span> <span data-ttu-id="c02c7-633">Эти позиции могут отличаться.</span><span class="sxs-lookup"><span data-stu-id="c02c7-633">These positions can be different.</span></span> <span data-ttu-id="c02c7-634">Например, если которую получил распознаватель ввода, для которого он имеет не еще создан результат распознавания, а затем значение <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> меньшим, чем значение <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-634">For example, if the recognizer has received input for which it has not yet generated a recognition result then the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property is less than the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecognizerInfo As RecognizerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizerInfo ^ RecognizerInfo { System::Speech::Recognition::RecognizerInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizerInfo : System.Speech.Recognition.RecognizerInfo" Usage="System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-635">Получает сведения о текущем экземпляре <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-635">Gets information about the current instance of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span></span></summary>
        <value><span data-ttu-id="c02c7-636">Сведения о текущем распознавателе речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-636">Information about the current speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-637">Чтобы получить сведения обо всех установленных распознавателей речи для текущей системы, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-637">To get information about all of the installed speech recognizers for the current system, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-638">Следующий пример возвращает неполный список данных для текущего модуля распознавания речи внутри процесса.</span><span class="sxs-lookup"><span data-stu-id="c02c7-638">The following example gets a partial list of data for the current in-process speech recognition engine.</span></span> <span data-ttu-id="c02c7-639">Дополнительные сведения см. в разделе <xref:System.Speech.Recognition.RecognizerInfo>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-639">For more information, see <xref:System.Speech.Recognition.RecognizerInfo>.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberSignature Language="VB.NET" Value="Public Event RecognizerUpdateReached As EventHandler(Of RecognizerUpdateReachedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::RecognizerUpdateReachedEventArgs ^&gt; ^ RecognizerUpdateReached;" />
      <MemberSignature Language="F#" Value="member this.RecognizerUpdateReached : EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " Usage="member this.RecognizerUpdateReached : System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-640">Вызывается, когда исполняемый механизм <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> приостанавливается, чтобы принять изменения.</span><span class="sxs-lookup"><span data-stu-id="c02c7-640">Raised when a running <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> pauses to accept modifications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-641">Приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> приостановить работающего экземпляра <xref:System.Speech.Recognition.SpeechRecognitionEngine> перед изменением его параметры или его <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-641">Applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause a running instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine> before modifying its settings or its <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c02c7-642"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Вызывает это событие, когда она готова принять изменения.</span><span class="sxs-lookup"><span data-stu-id="c02c7-642">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises this event when it is ready to accept modifications.</span></span>  
  
 <span data-ttu-id="c02c7-643">Например, хотя <xref:System.Speech.Recognition.SpeechRecognitionEngine> является выполнение приостановлено, вы можете загрузить, выгрузить, включения и отключения <xref:System.Speech.Recognition.Grammar> объектов и изменение значений <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-643">For example, while the <xref:System.Speech.Recognition.SpeechRecognitionEngine> is paused, you can load, unload, enable, and disable <xref:System.Speech.Recognition.Grammar> objects, and modify values for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> properties.</span></span> <span data-ttu-id="c02c7-644">Дополнительные сведения см. в описании метода <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-644">For more information, see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-645">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-645">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-646">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-646">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-647">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-647">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-648">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-648">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-649">В следующем примере показано консольное приложение, которое загружает и выгружает <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-649">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c02c7-650">Приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> метод для запроса распознавания речи для приостановки позволяет получать обновления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-650">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="c02c7-651">Приложения, а затем загружает или выгружает <xref:System.Speech.Recognition.Grammar> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-651">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="c02c7-652">При каждом обновлении обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий записывает имя и состояние текущего загруженного <xref:System.Speech.Recognition.Grammar> объектов на консоль.</span><span class="sxs-lookup"><span data-stu-id="c02c7-652">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="c02c7-653">При загрузке и выгрузке грамматики, сначала распознает имена животных фермы, а затем имена животных фермы и имена Фрукты, а затем имена только Фрукты.</span><span class="sxs-lookup"><span data-stu-id="c02c7-653">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-654">Запрашивает, чтобы распознаватель приостановил обновления состояния.</span><span class="sxs-lookup"><span data-stu-id="c02c7-654">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-655">Этот метод можно используйте для синхронизации изменений в распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-655">Use this method to synchronize changes to the recognizer.</span></span> <span data-ttu-id="c02c7-656">Например, при загрузке или выгрузке грамматики распознавания речи, во время обработки распознаватель входных данных, используйте этот метод и <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событие для синхронизации поведение приложений с состоянием распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-656">For example, if you load or unload a speech recognition grammar while the recognizer is processing input, use this method and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event to synchronize your application behavior with the state of the recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-657">Когда этот метод вызывается, чтобы распознаватель приостановил или завершения асинхронных операций и создает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-657">When this method is called, the recognizer pauses or completes asynchronous operations and generates a <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span> <span data-ttu-id="c02c7-658">Объект <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> обработчика событий затем может изменить состояние распознавателя между операций распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-658">A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event handler can then modify the state of the recognizer in between recognition operations.</span></span> <span data-ttu-id="c02c7-659">При обработке <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> события, чтобы распознаватель приостановил пока обработчик событий возвращает.</span><span class="sxs-lookup"><span data-stu-id="c02c7-659">When handling <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> events, the recognizer pauses until the event handler returns.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c02c7-660">Если ввод в распознаватель изменяется перед вызывает распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий, запрос отклоняется.</span><span class="sxs-lookup"><span data-stu-id="c02c7-660">If the input to the recognizer is changed before the recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the request is discarded.</span></span>  
  
 <span data-ttu-id="c02c7-661">При вызове этого метода:</span><span class="sxs-lookup"><span data-stu-id="c02c7-661">When this method is called:</span></span>  
  
-   <span data-ttu-id="c02c7-662">Если распознаватель не обрабатывает входные данные, распознаватель немедленно выдает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-662">If the recognizer is not processing input, the recognizer immediately generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="c02c7-663">Если распознаватель обрабатывает входные данные, состоящий из тишины или фонового шума, чтобы распознаватель приостановил операции распознавания и приводит к возникновению ошибки <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-663">If the recognizer is processing input that consists of silence or background noise, the recognizer pauses the recognition operation and generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
-   <span data-ttu-id="c02c7-664">Если распознаватель обрабатывает входные данные, которые не состоит из тишины или фонового шума, распознаватель завершает операцию распознавания, а затем создает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-664">If the recognizer is processing input that does not consist of silence or background noise, the recognizer completes the recognition operation and then generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event.</span></span>  
  
 <span data-ttu-id="c02c7-665">Во время обработки распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий:</span><span class="sxs-lookup"><span data-stu-id="c02c7-665">While the recognizer is handling the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event:</span></span>  
  
-   <span data-ttu-id="c02c7-666">Распознаватель не обрабатывает входные данные, а значение <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> свойства остается неизменным.</span><span class="sxs-lookup"><span data-stu-id="c02c7-666">The recognizer does not process input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> property remains the same.</span></span>  
  
-   <span data-ttu-id="c02c7-667">Распознаватель продолжает собирать входные данные, а значение <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> свойства можно изменить.</span><span class="sxs-lookup"><span data-stu-id="c02c7-667">The recognizer continues to collect input, and the value of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> property can change.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate();" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : unit -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-668">Запрашивает, чтобы распознаватель приостановил обновления состояния.</span><span class="sxs-lookup"><span data-stu-id="c02c7-668">Requests that the recognizer pauses to update its state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-669">Когда распознаватель создает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий, <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> свойство <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> является `null`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-669">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> is `null`.</span></span>  
  
 <span data-ttu-id="c02c7-670">Чтобы предоставить токен пользователя, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-670">To provide a user token, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span> <span data-ttu-id="c02c7-671">Чтобы указать смещение позиции аудио, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-671">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-672">В следующем примере показано консольное приложение, которое загружает и выгружает <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-672">The following example shows a console application that loads and unloads <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c02c7-673">Приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> метод для запроса распознавания речи для приостановки позволяет получать обновления.</span><span class="sxs-lookup"><span data-stu-id="c02c7-673">The application uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method to request the speech recognition engine to pause so it can receive an update.</span></span> <span data-ttu-id="c02c7-674">Приложения, а затем загружает или выгружает <xref:System.Speech.Recognition.Grammar> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-674">The application then loads or unloads a <xref:System.Speech.Recognition.Grammar> object.</span></span>  
  
 <span data-ttu-id="c02c7-675">При каждом обновлении обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий записывает имя и состояние текущего загруженного <xref:System.Speech.Recognition.Grammar> объектов на консоль.</span><span class="sxs-lookup"><span data-stu-id="c02c7-675">At each update, a handler for <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event writes the name and status of the currently loaded <xref:System.Speech.Recognition.Grammar> objects to the console.</span></span> <span data-ttu-id="c02c7-676">При загрузке и выгрузке грамматики, сначала распознает имена животных фермы, а затем имена животных фермы и имена Фрукты, а затем имена только Фрукты.</span><span class="sxs-lookup"><span data-stu-id="c02c7-676">As grammars are loaded and unloaded, the application first recognizes the names of farm animals, then the names of farm animals and the names of fruits, then only the names of fruits.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate userToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="c02c7-677">Пользовательский объект, содержащий сведения для данной операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-677">User-defined information that contains information for the operation.</span></span></param>
        <summary><span data-ttu-id="c02c7-678">Запрашивает, чтобы распознаватель приостановил обновление состояния и предоставил токен пользователя для связанного события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-678">Requests that the recognizer pauses to update its state and provides a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-679">Когда распознаватель создает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий, <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> свойство <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> содержит значение `userToken` параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-679">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 <span data-ttu-id="c02c7-680">Чтобы указать смещение позиции аудио, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-680">To specify an audio position offset, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RequestRecognizerUpdate (userToken As Object, audioPositionAheadToRaiseUpdate As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RequestRecognizerUpdate(System::Object ^ userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="F#" Value="member this.RequestRecognizerUpdate : obj * TimeSpan -&gt; unit" Usage="speechRecognitionEngine.RequestRecognizerUpdate (userToken, audioPositionAheadToRaiseUpdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken"><span data-ttu-id="c02c7-681">Пользовательский объект, содержащий сведения для данной операции.</span><span class="sxs-lookup"><span data-stu-id="c02c7-681">User-defined information that contains information for the operation.</span></span></param>
        <param name="audioPositionAheadToRaiseUpdate"><span data-ttu-id="c02c7-682">Смещение от текущего <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />, чтобы отложить запрос.</span><span class="sxs-lookup"><span data-stu-id="c02c7-682">The offset from the current <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> to delay the request.</span></span></param>
        <summary><span data-ttu-id="c02c7-683">Запрашивает, чтобы распознаватель приостановил обновление состояния и предоставил смещение и токен пользователя для связанного события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-683">Requests that the recognizer pauses to update its state and provides an offset and a user token for the associated event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-684">Распознаватель не инициирует запрос на обновление распознаватель до распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> равно текущего <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> , а также `audioPositionAheadToRaiseUpdate`.</span><span class="sxs-lookup"><span data-stu-id="c02c7-684">The recognizer does not initiate the recognizer update request until the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> equals the current <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`.</span></span>  
  
 <span data-ttu-id="c02c7-685">Когда распознаватель создает <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> событий, <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> свойство <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> содержит значение `userToken` параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-685">When the recognizer generates the <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> event, the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> property of the <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> contains the value of the `userToken` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToAudioStream (audioSource As Stream, audioFormat As SpeechAudioFormatInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToAudioStream(System::IO::Stream ^ audioSource, System::Speech::AudioFormat::SpeechAudioFormatInfo ^ audioFormat);" />
      <MemberSignature Language="F#" Value="member this.SetInputToAudioStream : System.IO.Stream * System.Speech.AudioFormat.SpeechAudioFormatInfo -&gt; unit" Usage="speechRecognitionEngine.SetInputToAudioStream (audioSource, audioFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="c02c7-686">Входной поток звука.</span><span class="sxs-lookup"><span data-stu-id="c02c7-686">The audio input stream.</span></span></param>
        <param name="audioFormat"><span data-ttu-id="c02c7-687">Входной звуковой формат.</span><span class="sxs-lookup"><span data-stu-id="c02c7-687">The format of the audio input.</span></span></param>
        <summary><span data-ttu-id="c02c7-688">Настраивает объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> для получения входных данных из аудиопотока.</span><span class="sxs-lookup"><span data-stu-id="c02c7-688">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from an audio stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-689">Если распознаватель достигает конца потока входных данных во время операции распознавания, операции распознавания завершает с доступными входными данными.</span><span class="sxs-lookup"><span data-stu-id="c02c7-689">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="c02c7-690">Все последующие распознавания операции может явиться источником исключения, пока разработчик не обновит ввода в распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-690">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-691">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-691">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-692">В примере используются входные данные из звуковой файл, example.wav, содержащий фразы «тестирование, тестирование, один два три» и «mister Купер», разделенные паузы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-692">The example uses input from an audio file, example.wav, that contains the phrases, "testing testing one two three" and "mister cooper", separated by a pause.</span></span> <span data-ttu-id="c02c7-693">Пример формирует следующие выходные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-693">The example generates the following output.</span></span>  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToDefaultAudioDevice ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToDefaultAudioDevice();" />
      <MemberSignature Language="F#" Value="member this.SetInputToDefaultAudioDevice : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToDefaultAudioDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-694">Настраивает объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> для получения входных данных от аудиоустройства по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-694">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from the default audio device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c02c7-695">Приведенный ниже показана часть консольное приложение, которое демонстрирует основные речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-695">The following example shows part of a console application that demonstrates basic speech recognition.</span></span> <span data-ttu-id="c02c7-696">Пример использует выходные данные от аудиоустройства по умолчанию, выполняет несколько операций асинхронное распознавание и завершает работу, когда пользователь utters фразу «exit».</span><span class="sxs-lookup"><span data-stu-id="c02c7-696">The example uses output from the default audio device, performs multiple, asynchronous recognition operations, and exits when a user utters the phrase, "exit".</span></span>  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToNull();" />
      <MemberSignature Language="F#" Value="member this.SetInputToNull : unit -&gt; unit" Usage="speechRecognitionEngine.SetInputToNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-697">Отключает ввод в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-697">Disables the input to the speech recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-698">Настройка <xref:System.Speech.Recognition.SpeechRecognitionEngine> объект отсутствие ввода при использовании <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> методов, или при создании механизма распознавания временно автономно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-698">Configure the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object for no input when using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods, or when taking a recognition engine temporarily off line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveFile (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveFile(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveFile : string -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c02c7-699">Путь к файлу, который требуется использовать как входные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-699">The path of the file to use as input.</span></span></param>
        <summary><span data-ttu-id="c02c7-700">Настраивает объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> для получения входных данных из файла аудиоформата WAV.</span><span class="sxs-lookup"><span data-stu-id="c02c7-700">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a Waveform audio format (.wav) file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-701">Если распознаватель достигает конца входного файла во время операции распознавания, операции распознавания завершает с доступными входными данными.</span><span class="sxs-lookup"><span data-stu-id="c02c7-701">If the recognizer reaches the end of the input file during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="c02c7-702">Все последующие распознавания операции может явиться источником исключения, пока разработчик не обновит ввода в распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-702">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-703">В следующем примере выполняет распознавание аудио в WAV-файл и записывает распознанный текст в консоль.</span><span class="sxs-lookup"><span data-stu-id="c02c7-703">The following example performs recognition on the audio in a .wav file and writes the recognized text to the console.</span></span>  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetInputToWaveStream (audioSource As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetInputToWaveStream(System::IO::Stream ^ audioSource);" />
      <MemberSignature Language="F#" Value="member this.SetInputToWaveStream : System.IO.Stream -&gt; unit" Usage="speechRecognitionEngine.SetInputToWaveStream audioSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource"><span data-ttu-id="c02c7-704">Поток, содержащий звуковые данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-704">The stream containing the audio data.</span></span></param>
        <summary><span data-ttu-id="c02c7-705">Настраивает объект <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> для получения входных данных от потока, содержащего аудиоформата WAV.</span><span class="sxs-lookup"><span data-stu-id="c02c7-705">Configures the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> object to receive input from a stream that contains Waveform audio format (.wav) data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-706">Если распознаватель достигает конца потока входных данных во время операции распознавания, операции распознавания завершает с доступными входными данными.</span><span class="sxs-lookup"><span data-stu-id="c02c7-706">If the recognizer reaches the end of the input stream during a recognition operation, the recognition operation finalizes with the available input.</span></span> <span data-ttu-id="c02c7-707">Все последующие распознавания операции может явиться источником исключения, пока разработчик не обновит ввода в распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-707">Any subsequent recognition operations can generate an exception, unless you update the input to the recognizer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechDetected As EventHandler(Of SpeechDetectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechDetectedEventArgs ^&gt; ^ SpeechDetected;" />
      <MemberSignature Language="F#" Value="member this.SpeechDetected : EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " Usage="member this.SpeechDetected : System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-708">Возникает, когда <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> обнаруживает введенные данные, которые могут быть идентифицированы как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-708">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> detects input that it can identify as speech.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-709">Каждый распознаватель речи реализует алгоритм для различения бездействия и речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-709">Each speech recognizer has an algorithm to distinguish between silence and speech.</span></span> <span data-ttu-id="c02c7-710">Когда <xref:System.Speech.Recognition.SpeechRecognitionEngine> выполняет операцию распознавания речи, он выдает <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> событие, когда свой алгоритм идентифицирует входные данные как речь.</span><span class="sxs-lookup"><span data-stu-id="c02c7-710">When the <xref:System.Speech.Recognition.SpeechRecognitionEngine> performs a speech recognition operation, it raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event when its algorithm identifies the input as speech.</span></span> <span data-ttu-id="c02c7-711"><xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> Связанного <xref:System.Speech.Recognition.SpeechDetectedEventArgs> возвращает расположение объекта во входном потоке, где распознаватель обнаружено речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-711">The <xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> property of the associated <xref:System.Speech.Recognition.SpeechDetectedEventArgs> object indicates location in the input stream where the recognizer detected speech.</span></span> <span data-ttu-id="c02c7-712"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Вызывает <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> событие, прежде чем он выдает любой из <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, или <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> события.</span><span class="sxs-lookup"><span data-stu-id="c02c7-712">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event before it raises any of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, or <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> events.</span></span>  
  
 <span data-ttu-id="c02c7-713">Дополнительные сведения см. в разделе <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-713">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c02c7-714">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-714">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-715">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-715">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-716">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-716">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-717">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-717">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-718">Следующий пример является частью консольного приложения для выбора назначения и городов рейса.</span><span class="sxs-lookup"><span data-stu-id="c02c7-718">The following example is part of a console application for choosing origin and destination cities for a flight.</span></span> <span data-ttu-id="c02c7-719">Приложение распознает фраз, такие как «Я хочу летать из Майами в Чикаго».</span><span class="sxs-lookup"><span data-stu-id="c02c7-719">The application recognizes phrases such as "I want to fly from Miami to Chicago."</span></span>  <span data-ttu-id="c02c7-720">В примере используется <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> событие, чтобы отслеживать <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> обнаруживается речь каждый раз.</span><span class="sxs-lookup"><span data-stu-id="c02c7-720">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> event to report the <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> each time speech is detected.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SpeechHypothesized As EventHandler(Of SpeechHypothesizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechHypothesizedEventArgs ^&gt; ^ SpeechHypothesized;" />
      <MemberSignature Language="F#" Value="member this.SpeechHypothesized : EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " Usage="member this.SpeechHypothesized : System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-721">Возникает, когда <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> распознал слово или слова, которые могут являться нескольких составных фраз в грамматике.</span><span class="sxs-lookup"><span data-stu-id="c02c7-721">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> has recognized a word or words that may be a component of multiple complete phrases in a grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-722"><xref:System.Speech.Recognition.SpeechRecognitionEngine> Создает многочисленные <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> события, так как он пытается определить входная фраза.</span><span class="sxs-lookup"><span data-stu-id="c02c7-722">The <xref:System.Speech.Recognition.SpeechRecognitionEngine> generates numerous <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> events as it attempts to identify an input phrase.</span></span> <span data-ttu-id="c02c7-723">Можно обратиться к тексту частично распознанной фразы в <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> свойство <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> объекта в обработчике <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-723">You can access the text of partially recognized phrases in the <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> object in the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event.</span></span> <span data-ttu-id="c02c7-724">Как правило обработка этих событий полезно только для отладки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-724">Typically, handling these events is useful only for debugging.</span></span>  
  
 <span data-ttu-id="c02c7-725">Интерфейс <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> является производным от интерфейса <xref:System.Speech.Recognition.RecognitionEventArgs>.</span><span class="sxs-lookup"><span data-stu-id="c02c7-725"><xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> derives from <xref:System.Speech.Recognition.RecognitionEventArgs>.</span></span>  
  
 <span data-ttu-id="c02c7-726">Дополнительные сведения см. в разделе <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойство и <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-726">For more information see the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property and the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods.</span></span>  
  
 <span data-ttu-id="c02c7-727">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-727">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-728">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-728">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-729">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-729">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-730">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-730">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-731">Следующий пример распознает фразах, таких как «Display список исполнителей в джазовые категории».</span><span class="sxs-lookup"><span data-stu-id="c02c7-731">The following example recognizes phrases such as "Display the list of artists in the jazz category".</span></span> <span data-ttu-id="c02c7-732">В примере используется <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> событий для отображения фрагментов неполные фразы в консоли, как они распознаются.</span><span class="sxs-lookup"><span data-stu-id="c02c7-732">The example uses the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> event to display incomplete phrase fragments in the console as they are recognized.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognitionRejected As EventHandler(Of SpeechRecognitionRejectedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognitionRejectedEventArgs ^&gt; ^ SpeechRecognitionRejected;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognitionRejected : EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " Usage="member this.SpeechRecognitionRejected : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-733">Возникает, когда <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> получает ввод, не соответствующий ни одному из загруженных и включенных объектов <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-733">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that does not match any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-734">Распознаватель это событие вызывается, если определит, что входные данные не соответствуют достаточно надежно любой из загруженных и включенных <xref:System.Speech.Recognition.Grammar> объектов.</span><span class="sxs-lookup"><span data-stu-id="c02c7-734">The recognizer raises this event if it determines that input does not match with sufficient confidence any of its loaded and enabled <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="c02c7-735"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> Свойство <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> содержит отклоненного <xref:System.Speech.Recognition.RecognitionResult> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-735">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the rejected <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="c02c7-736">Можно использовать обработчик <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> событий для получения распознавания <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> , были отклонены и их <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> оценок.</span><span class="sxs-lookup"><span data-stu-id="c02c7-736">You can use the handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to retrieve recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected and their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> scores.</span></span>  
  
 <span data-ttu-id="c02c7-737">Если приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляр, можно изменить уровень достоверности которого речь принят или отклонен с одним из входных данных <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-737">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="c02c7-738">Можно изменить, как распознавание речи реагирует на ввод с помощью без речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-738">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="c02c7-739">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-739">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-740">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-740">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-741">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-741">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-742">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-742">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-743">Следующий пример распознает фраз, таких как «Отобразить список исполнителей в джазовые категории» или «Отобразить gospel альбомов».</span><span class="sxs-lookup"><span data-stu-id="c02c7-743">The following example recognizes phrases such as "Display the list of artists in the jazz category" or "Display albums gospel".</span></span> <span data-ttu-id="c02c7-744">В примере используется обработчик для <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> событий, чтобы отображать уведомления в консоли, когда речи входные данные не могут быть сопоставлены содержимое грамматики располагает достаточными <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> для получения был успешно распознан.</span><span class="sxs-lookup"><span data-stu-id="c02c7-744">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> event to display a notification in the console when the speech input cannot be matched to the contents of the grammar with sufficient <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> to produce a successful recognition.</span></span> <span data-ttu-id="c02c7-745">Обработчик также отображает результат распознавания <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> , были отклонены из-за низкой достоверности.</span><span class="sxs-lookup"><span data-stu-id="c02c7-745">The handler also displays recognition result <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> that were rejected because of low confidence scores.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberSignature Language="VB.NET" Value="Public Event SpeechRecognized As EventHandler(Of SpeechRecognizedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Speech::Recognition::SpeechRecognizedEventArgs ^&gt; ^ SpeechRecognized;" />
      <MemberSignature Language="F#" Value="member this.SpeechRecognized : EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " Usage="member this.SpeechRecognized : System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c02c7-746">Возникает, когда <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> получает ввод, соответствующий любому из загруженных и включенных объектов <see cref="T:System.Speech.Recognition.Grammar" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-746">Raised when the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> receives input that matches any of its loaded and enabled <see cref="T:System.Speech.Recognition.Grammar" /> objects.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-747">Инициируйте операцию распознавания, используя один из <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> или <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-747">You can initiate a recognition operation using the one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> methods.</span></span> <span data-ttu-id="c02c7-748">Вызывает распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событие, если определит, что входные данные совпадает с одним из ее загрузить <xref:System.Speech.Recognition.Grammar> объектов с достаточный уровень достоверности для использования в качестве распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-748">The recognizer raises the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event if it determines that input matches one of its loaded <xref:System.Speech.Recognition.Grammar> objects with a sufficient level of confidence to constitute recognition.</span></span> <span data-ttu-id="c02c7-749"><xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> Свойство <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> содержит допустимое <xref:System.Speech.Recognition.RecognitionResult> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-749">The <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> property of the <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> contains the accepted <xref:System.Speech.Recognition.RecognitionResult> object.</span></span> <span data-ttu-id="c02c7-750">Обработчики <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> события можно получить распознанной фразы, а также список распознавания <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> с нижней достоверности.</span><span class="sxs-lookup"><span data-stu-id="c02c7-750">Handlers of <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> events can obtain the recognized phrase as well as a list of recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> with lower confidence scores.</span></span>  
  
 <span data-ttu-id="c02c7-751">Если приложение использует <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляр, можно изменить уровень достоверности которого речь принят или отклонен с одним из входных данных <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="c02c7-751">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span>  <span data-ttu-id="c02c7-752">Можно изменить, как распознавание речи реагирует на ввод с помощью без речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-752">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 <span data-ttu-id="c02c7-753">Когда распознаватель получает входные данные, соответствующие грамматику, <xref:System.Speech.Recognition.Grammar> объект может вызывать его <xref:System.Speech.Recognition.Grammar.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-753">When the recognizer receives input that matches a grammar, the <xref:System.Speech.Recognition.Grammar> object can raise its <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span> <span data-ttu-id="c02c7-754"><xref:System.Speech.Recognition.Grammar> Объекта <xref:System.Speech.Recognition.Grammar.SpeechRecognized> события до распознаватель речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-754">The <xref:System.Speech.Recognition.Grammar> object's <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event is raised prior to the speech recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c02c7-755">Всегда следует выполнять любые задачи, относящиеся к конкретной грамматики обработчиком для <xref:System.Speech.Recognition.Grammar.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-755">Any tasks specific to a particular grammar should always be performed by a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="c02c7-756">При создании делегата <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> необходимо указать метод, обрабатывающий событие.</span><span class="sxs-lookup"><span data-stu-id="c02c7-756">When you create a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> delegate, you identify the method that will handle the event.</span></span> <span data-ttu-id="c02c7-757">Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата.</span><span class="sxs-lookup"><span data-stu-id="c02c7-757">To associate the event with your event handler, add an instance of the delegate to the event.</span></span> <span data-ttu-id="c02c7-758">Обработчик событий вызывается всякий раз, когда происходит событие, если делегат не удален.</span><span class="sxs-lookup"><span data-stu-id="c02c7-758">The event handler is called whenever the event occurs, unless you remove the delegate.</span></span> <span data-ttu-id="c02c7-759">Дополнительные сведения о делегатов обработчиков событий, см. в разделе [события и делегаты](https://go.microsoft.com/fwlink/?LinkId=162418).</span><span class="sxs-lookup"><span data-stu-id="c02c7-759">For more information about event-handler delegates, see [Events and Delegates](https://go.microsoft.com/fwlink/?LinkId=162418).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-760">Следующий пример является частью консольное приложение, которое создает грамматики распознавания речи, конструкции <xref:System.Speech.Recognition.Grammar> объекта и загружает их в <xref:System.Speech.Recognition.SpeechRecognitionEngine> для выполнения распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-760">The following example is part of a console application that creates speech recognition grammar, constructs a <xref:System.Speech.Recognition.Grammar> object, and loads it into the <xref:System.Speech.Recognition.SpeechRecognitionEngine> to perform recognition.</span></span> <span data-ttu-id="c02c7-761">В примере речевого ввода для <xref:System.Speech.Recognition.SpeechRecognitionEngine>, результаты распознавания связанные и связанные события, вызываемые в распознаватель речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-761">The example demonstrates speech input to a <xref:System.Speech.Recognition.SpeechRecognitionEngine>, the associated recognition results, and the associated events raised by the speech recognizer.</span></span>  
  
 <span data-ttu-id="c02c7-762">Голосовые входные данные, такие как «Я хочу следует из Чикаго Майами» будет активировать <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-762">Spoken input such as "I want to fly from Chicago to Miami" will trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span> <span data-ttu-id="c02c7-763">Говоря фразу «Летать me из Хьюстон в Чикаго» не вызовет <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий.</span><span class="sxs-lookup"><span data-stu-id="c02c7-763">Speaking the phrase "Fly me from Houston to Chicago " will not trigger a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event.</span></span>  
  
 <span data-ttu-id="c02c7-764">В примере используется обработчик <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> событий для отображения успешно распознан фраз и семантики, они содержат в консоли.</span><span class="sxs-lookup"><span data-stu-id="c02c7-764">The example uses a handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event to display successfully recognized phrases and the semantics they contain in the console.</span></span>  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnloadAllGrammars ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadAllGrammars();" />
      <MemberSignature Language="F#" Value="member this.UnloadAllGrammars : unit -&gt; unit" Usage="speechRecognitionEngine.UnloadAllGrammars " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c02c7-765">Выгружает все объекты <see cref="T:System.Speech.Recognition.Grammar" /> из распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-765">Unloads all <see cref="T:System.Speech.Recognition.Grammar" /> objects from the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-766">Если распознаватель в данный момент загружает <xref:System.Speech.Recognition.Grammar> асинхронно, этот метод ожидает, пока <xref:System.Speech.Recognition.Grammar> загружается, прежде чем он выгружает все <xref:System.Speech.Recognition.Grammar> объектов из <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-766">If the recognizer is currently loading a <xref:System.Speech.Recognition.Grammar> asynchronously, this method waits until the <xref:System.Speech.Recognition.Grammar> is loaded, before it unloads all of the <xref:System.Speech.Recognition.Grammar> objects from the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance.</span></span>  
  
 <span data-ttu-id="c02c7-767">Чтобы выгрузить грамматики, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-767">To unload a specific grammar, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-768">В следующем примере показана часть консольное приложение, которое демонстрирует синхронную загрузку и выгрузку грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-768">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnloadGrammar(System::Speech::Recognition::Grammar ^ grammar);" />
      <MemberSignature Language="F#" Value="member this.UnloadGrammar : System.Speech.Recognition.Grammar -&gt; unit" Usage="speechRecognitionEngine.UnloadGrammar grammar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar"><span data-ttu-id="c02c7-769">Объект грамматики для выгрузки.</span><span class="sxs-lookup"><span data-stu-id="c02c7-769">The grammar object to unload.</span></span></param>
        <summary><span data-ttu-id="c02c7-770">Выгружает заданный объект <see cref="T:System.Speech.Recognition.Grammar" /> из экземпляра <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-770">Unloads a specified <see cref="T:System.Speech.Recognition.Grammar" /> object from the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-771">Если выполняется распознаватель, приложения должны использовать <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> приостановить <xref:System.Speech.Recognition.SpeechRecognitionEngine> экземпляра до загрузки, выгрузки, включение или отключение <xref:System.Speech.Recognition.Grammar> объекта.</span><span class="sxs-lookup"><span data-stu-id="c02c7-771">If the recognizer is running, applications must use <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> to pause the <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance before loading, unloading,  enabling, or disabling a <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="c02c7-772">Выгрузив весь <xref:System.Speech.Recognition.Grammar> объекты, используют <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-772">To unload all <xref:System.Speech.Recognition.Grammar> objects, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-773">В следующем примере показана часть консольное приложение, которое демонстрирует синхронную загрузку и выгрузку грамматиками распознавания речи.</span><span class="sxs-lookup"><span data-stu-id="c02c7-773">The following example shows part of a console application that demonstrates the synchronous loading and unloading of speech recognition grammars.</span></span>  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-774"><paramref name="Grammar" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-774"><paramref name="Grammar" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c02c7-775">Грамматика не загружена в этот распознаватель или этот распознаватель в данный момент загружает грамматику асинхронно.</span><span class="sxs-lookup"><span data-stu-id="c02c7-775">The grammar is not loaded in this recognizer, or this recognizer is currently loading the grammar asynchronously.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c02c7-776">Обновляет значение параметра для распознавателя.</span><span class="sxs-lookup"><span data-stu-id="c02c7-776">Updates the value of a setting for the recognizer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-777">Распознаватель параметров может содержать строку, 64-разрядное целое число или данные адреса памяти.</span><span class="sxs-lookup"><span data-stu-id="c02c7-777">Recognizer settings can contain string, 64-bit integer, or memory address data.</span></span> <span data-ttu-id="c02c7-778">В следующей таблице описаны параметры, которые определены для Microsoft Speech API (SAPI)-совместимые распознаватель.</span><span class="sxs-lookup"><span data-stu-id="c02c7-778">The following table describes the settings that are defined for a Microsoft Speech API (SAPI)-compliant recognizer.</span></span> <span data-ttu-id="c02c7-779">Следующие параметры должны иметь такой же диапазон для каждого распознавателя, который поддерживает параметр.</span><span class="sxs-lookup"><span data-stu-id="c02c7-779">The following settings must have the same range for each recognizer that supports the setting.</span></span> <span data-ttu-id="c02c7-780">Совместимые SAPI распознаватель не требуется для поддержки этих параметров и может поддерживать другие параметры.</span><span class="sxs-lookup"><span data-stu-id="c02c7-780">A SAPI-compliant recognizer is not required to support these settings and can support other settings.</span></span>  
  
|<span data-ttu-id="c02c7-781">name</span><span class="sxs-lookup"><span data-stu-id="c02c7-781">Name</span></span>|<span data-ttu-id="c02c7-782">Описание</span><span class="sxs-lookup"><span data-stu-id="c02c7-782">Description</span></span>|  
|----------|-----------------|  
|`ResourceUsage`|<span data-ttu-id="c02c7-783">Указывает распознаватель потребление ресурсов ЦП.</span><span class="sxs-lookup"><span data-stu-id="c02c7-783">Specifies the recognizer's CPU consumption.</span></span> <span data-ttu-id="c02c7-784">Диапазон составляет от 0 до 100.</span><span class="sxs-lookup"><span data-stu-id="c02c7-784">The range is from 0 to 100.</span></span> <span data-ttu-id="c02c7-785">Значение по умолчанию — 50.</span><span class="sxs-lookup"><span data-stu-id="c02c7-785">The default value is 50.</span></span>|  
|`ResponseSpeed`|<span data-ttu-id="c02c7-786">Указывает длину бездействия в конце однозначных вводных данных, прежде чем в распознаватель речи завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-786">Indicates the length of silence at the end of unambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c02c7-787">Диапазон составляет от 0 до 10 000 миллисекунд (мс).</span><span class="sxs-lookup"><span data-stu-id="c02c7-787">The range is from 0 to 10,000 milliseconds (ms).</span></span> <span data-ttu-id="c02c7-788">Этот параметр соответствует в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-788">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> property.</span></span> <span data-ttu-id="c02c7-789">По умолчанию = 150ms.</span><span class="sxs-lookup"><span data-stu-id="c02c7-789">Default = 150ms.</span></span>|  
|`ComplexResponseSpeed`|<span data-ttu-id="c02c7-790">Указывает длину бездействия в миллисекундах (мс) в конце неоднозначных входных данных, прежде чем в распознаватель речи завершает операцию распознавания.</span><span class="sxs-lookup"><span data-stu-id="c02c7-790">Indicates the length of silence in milliseconds (ms) at the end of ambiguous input before the speech recognizer completes a recognition operation.</span></span> <span data-ttu-id="c02c7-791">Диапазон составляет от 0 до 10 000 мс.</span><span class="sxs-lookup"><span data-stu-id="c02c7-791">The range is from 0 to 10,000ms.</span></span> <span data-ttu-id="c02c7-792">Этот параметр соответствует в распознаватель <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="c02c7-792">This setting corresponds to the recognizer's <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> property.</span></span> <span data-ttu-id="c02c7-793">По умолчанию 500 мс.</span><span class="sxs-lookup"><span data-stu-id="c02c7-793">Default = 500ms.</span></span>|  
|`AdaptationOn`|<span data-ttu-id="c02c7-794">Указывает, является ли адаптации акустическую модель ON (значение = `1`) или OFF (значение = `0`).</span><span class="sxs-lookup"><span data-stu-id="c02c7-794">Indicates whether adaptation of the acoustic model is ON (value = `1`) or OFF (value = `0`).</span></span> <span data-ttu-id="c02c7-795">Значение по умолчанию — `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="c02c7-795">The default value is `1` (ON).</span></span>|  
|`PersistedBackgroundAdaptation`|<span data-ttu-id="c02c7-796">Указывает, является ли фон адаптации ON (значение = `1`) или OFF (значение = `0`), и сохраняет параметр в реестре.</span><span class="sxs-lookup"><span data-stu-id="c02c7-796">Indicates whether background adaptation is ON (value = `1`) or OFF (value = `0`), and persists the setting in the registry.</span></span> <span data-ttu-id="c02c7-797">Значение по умолчанию — `1` (ON).</span><span class="sxs-lookup"><span data-stu-id="c02c7-797">The default value is `1` (ON).</span></span>|  
  
 <span data-ttu-id="c02c7-798">Чтобы вернуть один из параметров распознавателя, используйте <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="c02c7-798">To return one of the recognizer's settings, use the <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> method.</span></span>  
  
 <span data-ttu-id="c02c7-799">За исключением элемента `PersistedBackgroundAdaptation`, значения свойств, заданные с помощью <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> методы действуют только для текущего экземпляра <xref:System.Speech.Recognition.SpeechRecognitionEngine>, после которого они вернуться к параметрам по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-799">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span>  
  
 <span data-ttu-id="c02c7-800">Можно изменить, как распознавание речи реагирует на ввод с помощью без речи <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, и <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="c02c7-800">You can modify how the speech recognition responds to non-speech input using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, and <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> properties.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, int updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * int -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="c02c7-801">Имя обновляемого параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-801">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="c02c7-802">Новое значение для параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-802">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="c02c7-803">Обновляет заданный параметр для <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> с указанным целым числом.</span><span class="sxs-lookup"><span data-stu-id="c02c7-803">Updates the specified setting for the <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> with the specified integer value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-804">За исключением элемента `PersistedBackgroundAdaptation`, значения свойств, заданные с помощью <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> метод действуют только для текущего экземпляра <xref:System.Speech.Recognition.SpeechRecognitionEngine>, после которого они вернуться к параметрам по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-804">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="c02c7-805">См. в разделе <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> описание поддерживаемых параметров.</span><span class="sxs-lookup"><span data-stu-id="c02c7-805">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c02c7-806">Следующий пример является частью консольное приложение, которое выводит значения для некоторых параметров, определенных для распознавателя, который поддерживает этот языковой стандарт en US.</span><span class="sxs-lookup"><span data-stu-id="c02c7-806">The following example is part of a console application that outputs the values for a number of the settings defined for the recognizer that supports the en-US locale.</span></span> <span data-ttu-id="c02c7-807">Пример обновляет параметры уровня надежности, а затем запрашивает распознаватель, чтобы проверить обновленные значения.</span><span class="sxs-lookup"><span data-stu-id="c02c7-807">The example updates the confidence level settings, and then queries the recognizer to check the updated values.</span></span> <span data-ttu-id="c02c7-808">Пример формирует следующие выходные данные.</span><span class="sxs-lookup"><span data-stu-id="c02c7-808">The example generates the following output.</span></span>  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-809"><paramref name="settingName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-809"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-810"><paramref name="settingName" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-810"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="c02c7-811">Распознаватель не имеет параметра с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="c02c7-811">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateRecognizerSetting (settingName As String, updatedValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateRecognizerSetting(System::String ^ settingName, System::String ^ updatedValue);" />
      <MemberSignature Language="F#" Value="member this.UpdateRecognizerSetting : string * string -&gt; unit" Usage="speechRecognitionEngine.UpdateRecognizerSetting (settingName, updatedValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName"><span data-ttu-id="c02c7-812">Имя обновляемого параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-812">The name of the setting to update.</span></span></param>
        <param name="updatedValue"><span data-ttu-id="c02c7-813">Новое значение для параметра.</span><span class="sxs-lookup"><span data-stu-id="c02c7-813">The new value for the setting.</span></span></param>
        <summary><span data-ttu-id="c02c7-814">Обновляет указанный параметр механизма распознавания речи с заданным стоковым  значением.</span><span class="sxs-lookup"><span data-stu-id="c02c7-814">Updates the specified speech recognition engine setting with the specified string value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c02c7-815">За исключением элемента `PersistedBackgroundAdaptation`, значения свойств, заданные с помощью <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> метод действуют только для текущего экземпляра <xref:System.Speech.Recognition.SpeechRecognitionEngine>, после которого они вернуться к параметрам по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c02c7-815">With the exception of `PersistedBackgroundAdaptation`, property values set using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> method remain in effect only for the current instance of <xref:System.Speech.Recognition.SpeechRecognitionEngine>, after which they revert to their default settings.</span></span> <span data-ttu-id="c02c7-816">См. в разделе <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> описание поддерживаемых параметров.</span><span class="sxs-lookup"><span data-stu-id="c02c7-816">See <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> for descriptions of supported settings.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c02c7-817"><paramref name="settingName" /> — <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="c02c7-817"><paramref name="settingName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c02c7-818"><paramref name="settingName" /> является пустой строкой ("").</span><span class="sxs-lookup"><span data-stu-id="c02c7-818"><paramref name="settingName" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="c02c7-819">Распознаватель не имеет параметра с указанным именем.</span><span class="sxs-lookup"><span data-stu-id="c02c7-819">The recognizer does not have a setting by that name.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>