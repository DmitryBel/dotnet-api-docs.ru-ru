<Type Name="CompositionContext" FullName="System.Composition.CompositionContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29ea0a7154ef4af995e71142a854bfdd56ce0a4a" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56788902" /></Metadata><TypeSignature Language="C#" Value="public abstract class CompositionContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CompositionContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Composition.CompositionContext" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CompositionContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionContext abstract" />
  <TypeSignature Language="F#" Value="type CompositionContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Composition.Runtime</AssemblyName>
    <AssemblyVersion>1.0.31.0</AssemblyVersion>
    <AssemblyVersion>1.0.32.0</AssemblyVersion>
    <AssemblyVersion>1.0.33.0</AssemblyVersion>
    <AssemblyVersion>1.0.34.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5fa92-101">Предоставляет методы для получения экспортов из композиции.</span><span class="sxs-lookup"><span data-stu-id="5fa92-101">Provides methods to retrieve exports from the composition.</span></span></summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CompositionContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CompositionContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5fa92-102">Инициализирует новый экземпляр класса <see cref="T:System.Composition.CompositionContext" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-102">Initializes a new instance of the <see cref="T:System.Composition.CompositionContext" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<span data-ttu-id="5fa92-103">Обратите внимание на то, что данный конструктор является защищенным; может вызываться только в классах, производных от <see cref="T:System.Composition.CompositionContext"/> класса.</span><span class="sxs-lookup"><span data-stu-id="5fa92-103">Note that this constructor is protected; it can only be called by classes derived from the <see cref="T:System.Composition.CompositionContext"/> class.</span></span> 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public object GetExport (System.Composition.Hosting.Core.CompositionContract contract);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExport(class System.Composition.Hosting.Core.CompositionContract contract) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport(System.Composition.Hosting.Core.CompositionContract)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport (contract As CompositionContract) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExport(System::Composition::Hosting::Core::CompositionContract ^ contract);" />
      <MemberSignature Language="F#" Value="member this.GetExport : System.Composition.Hosting.Core.CompositionContract -&gt; obj" Usage="compositionContext.GetExport contract" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="5fa92-104">Контракт для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-104">The contract to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-105">Извлекает экспорт, соответствующий заданному контракту.</span><span class="sxs-lookup"><span data-stu-id="5fa92-105">Retrieves the export that matches the specified contract.</span></span></summary>
        <returns><span data-ttu-id="5fa92-106">Экспортированное значение.</span><span class="sxs-lookup"><span data-stu-id="5fa92-106">The exported value.</span></span></returns>
        <remarks></remarks>
        <exception cref="T:System.Composition.Hosting.CompositionFailedException"><span data-ttu-id="5fa92-107">Не найдено экспорта для <paramref name="contract" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-107">No export found for <paramref name="contract" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public object GetExport (Type exportType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExport(class System.Type exportType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport (exportType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExport(Type ^ exportType);" />
      <MemberSignature Language="F#" Value="member this.GetExport : Type -&gt; obj" Usage="compositionContext.GetExport exportType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="5fa92-108">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-108">The type to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-109">Извлекает экспорт, соответствующий заданному типу.</span><span class="sxs-lookup"><span data-stu-id="5fa92-109">Retrieves the export that matches the specified type.</span></span></summary>
        <returns><span data-ttu-id="5fa92-110">Экспортированное значение.</span><span class="sxs-lookup"><span data-stu-id="5fa92-110">The exported value.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public object GetExport (Type exportType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetExport(class System.Type exportType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport (exportType As Type, contractName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetExport(Type ^ exportType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : Type * string -&gt; obj" Usage="compositionContext.GetExport (exportType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="5fa92-111">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-111">The type to match.</span></span></param>
        <param name="contractName"><span data-ttu-id="5fa92-112">Сопоставляемое имя.</span><span class="sxs-lookup"><span data-stu-id="5fa92-112">The name to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-113">Извлекает экспорт, соответствующий заданному имени и типу.</span><span class="sxs-lookup"><span data-stu-id="5fa92-113">Retrieves the export that matches the specified name and type.</span></span></summary>
        <returns><span data-ttu-id="5fa92-114">Экспортированное значение.</span><span class="sxs-lookup"><span data-stu-id="5fa92-114">The exported value.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public TExport GetExport&lt;TExport&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TExport GetExport&lt;TExport&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of TExport) () As TExport" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; TExport GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; 'Export" Usage="compositionContext.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TExport</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="5fa92-115">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-115">The type to match.</span></span></typeparam>
        <summary><span data-ttu-id="5fa92-116">Извлекает экспорт, соответствующий заданному параметру универсального типа.</span><span class="sxs-lookup"><span data-stu-id="5fa92-116">Retrieves the export that matches the specified generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="5fa92-117">Экспортированное значение.</span><span class="sxs-lookup"><span data-stu-id="5fa92-117">The exported value.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public TExport GetExport&lt;TExport&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TExport GetExport&lt;TExport&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of TExport) (contractName As String) As TExport" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; TExport GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; 'Export" Usage="compositionContext.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TExport</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="5fa92-118">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-118">The type to match.</span></span></typeparam>
        <param name="contractName"><span data-ttu-id="5fa92-119">Сопоставляемое имя.</span><span class="sxs-lookup"><span data-stu-id="5fa92-119">The name to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-120">Извлекает экспорт, который соответствует заданному параметру универсального типа и имени контракта.</span><span class="sxs-lookup"><span data-stu-id="5fa92-120">Retrieves the export that matches the specified generic type parameter and contract name.</span></span></summary>
        <returns><span data-ttu-id="5fa92-121">Экспортированное значение.</span><span class="sxs-lookup"><span data-stu-id="5fa92-121">The exported value.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetExports (Type exportType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetExports(class System.Type exportType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (exportType As Type) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetExports(Type ^ exportType);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type -&gt; seq&lt;obj&gt;" Usage="compositionContext.GetExports exportType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="5fa92-122">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-122">The type to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-123">Извлекает коллекцию всех экспортов, соответствующих заданному типу.</span><span class="sxs-lookup"><span data-stu-id="5fa92-123">Retrieves a collection of all exports that match the specified type.</span></span></summary>
        <returns><span data-ttu-id="5fa92-124">Коллекция экспортированных значений.</span><span class="sxs-lookup"><span data-stu-id="5fa92-124">A collection of exported values.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetExports (Type exportType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetExports(class System.Type exportType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports(System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (exportType As Type, contractName As String) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetExports(Type ^ exportType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * string -&gt; seq&lt;obj&gt;" Usage="compositionContext.GetExports (exportType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="5fa92-125">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-125">The type to match.</span></span></param>
        <param name="contractName"><span data-ttu-id="5fa92-126">Сопоставляемое имя.</span><span class="sxs-lookup"><span data-stu-id="5fa92-126">The name to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-127">Извлекает все экспорты, соответствующие заданному типу и имени контракта.</span><span class="sxs-lookup"><span data-stu-id="5fa92-127">Retrieves all exports that match the specified contract name and type.</span></span></summary>
        <returns><span data-ttu-id="5fa92-128">Коллекция экспортированных значений.</span><span class="sxs-lookup"><span data-stu-id="5fa92-128">A collection of exported values.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TExport&gt; GetExports&lt;TExport&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TExport&gt; GetExports&lt;TExport&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of TExport) () As IEnumerable(Of TExport)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TExport&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;'Export&gt;" Usage="compositionContext.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TExport&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="5fa92-129">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-129">The type to match.</span></span></typeparam>
        <summary><span data-ttu-id="5fa92-130">Извлекает все экспорты, соответствующие заданному параметру универсального типа.</span><span class="sxs-lookup"><span data-stu-id="5fa92-130">Retrieves all exports that match the specified generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="5fa92-131">Коллекция экспортированных значений.</span><span class="sxs-lookup"><span data-stu-id="5fa92-131">A collection of exported values.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TExport&gt; GetExports&lt;TExport&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TExport&gt; GetExports&lt;TExport&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of TExport) (contractName As String) As IEnumerable(Of TExport)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TExport&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;'Export&gt;" Usage="compositionContext.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TExport&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="5fa92-132">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-132">The type to match.</span></span></typeparam>
        <param name="contractName"><span data-ttu-id="5fa92-133">Сопоставляемое имя.</span><span class="sxs-lookup"><span data-stu-id="5fa92-133">The name to match.</span></span></param>
        <summary><span data-ttu-id="5fa92-134">Извлекает все экспорты, соответствующие заданному параметру универсального типа и имени контракта.</span><span class="sxs-lookup"><span data-stu-id="5fa92-134">Retrieves all exports that match the specified generic type parameter and contract name.</span></span></summary>
        <returns><span data-ttu-id="5fa92-135">Коллекция экспортированных значений.</span><span class="sxs-lookup"><span data-stu-id="5fa92-135">A collection of exported values.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public abstract bool TryGetExport (System.Composition.Hosting.Core.CompositionContract contract, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetExport(class System.Composition.Hosting.Core.CompositionContract contract, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport(System.Composition.Hosting.Core.CompositionContract,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryGetExport (contract As CompositionContract, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool TryGetExport(System::Composition::Hosting::Core::CompositionContract ^ contract, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="abstract member TryGetExport : System.Composition.Hosting.Core.CompositionContract *  -&gt; bool" Usage="compositionContext.TryGetExport (contract, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contract" Type="System.Composition.Hosting.Core.CompositionContract" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="contract"><span data-ttu-id="5fa92-136">Контракт для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-136">The contract to match.</span></span></param>
        <param name="export"><span data-ttu-id="5fa92-137">При возвращении данного метода содержит найденный экспорт или <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-137">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa92-138">Возвращает экспорт, соответствующий определенному контракту, или возвращает значение <see langword="null" />, если он не найден.</span><span class="sxs-lookup"><span data-stu-id="5fa92-138">Returns the export that matches the specified contract, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="5fa92-139">Значение <see langword="true" />, если экспорт найден; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-139"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public bool TryGetExport (Type exportType, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport(class System.Type exportType, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport(System.Type,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport (exportType As Type, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExport(Type ^ exportType, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : Type *  -&gt; bool" Usage="compositionContext.TryGetExport (exportType, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="5fa92-140">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-140">The type to match.</span></span></param>
        <param name="export"><span data-ttu-id="5fa92-141">При возвращении данного метода содержит найденный экспорт или <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-141">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa92-142">Возвращает экспорт, соответствующий определенному типу, или возвращает значение <see langword="null" />, если он не найден.</span><span class="sxs-lookup"><span data-stu-id="5fa92-142">Returns the export that matches the specified type, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="5fa92-143">Значение <see langword="true" />, если экспорт найден; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-143"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public bool TryGetExport (Type exportType, string contractName, out object export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport(class System.Type exportType, string contractName, [out] object&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport(System.Type,System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport (exportType As Type, contractName As String, ByRef export As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExport(Type ^ exportType, System::String ^ contractName, [Runtime::InteropServices::Out] System::Object ^ % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : Type * string *  -&gt; bool" Usage="compositionContext.TryGetExport (exportType, contractName, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="export" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="exportType"><span data-ttu-id="5fa92-144">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-144">The type to match.</span></span></param>
        <param name="contractName"><span data-ttu-id="5fa92-145">Сопоставляемое имя.</span><span class="sxs-lookup"><span data-stu-id="5fa92-145">The name to match.</span></span></param>
        <param name="export"><span data-ttu-id="5fa92-146">При возвращении данного метода содержит найденный экспорт или <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-146">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa92-147">Возвращает экспорт, соответствующий определенному имени и типу контракта, или возвращает значение <see langword="null" />, если он не найден.</span><span class="sxs-lookup"><span data-stu-id="5fa92-147">Returns the export that matches the specified contract name and type, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="5fa92-148">Значение <see langword="true" />, если экспорт найден; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-148"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetExport&lt;TExport&gt; (out TExport export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport&lt;TExport&gt;([out] !!TExport&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport``1(``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport(Of TExport) (ByRef export As TExport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; bool TryGetExport([Runtime::InteropServices::Out] TExport % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport :  -&gt; bool" Usage="compositionContext.TryGetExport export" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="export" Type="TExport" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="5fa92-149">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-149">The type to match.</span></span></typeparam>
        <param name="export"><span data-ttu-id="5fa92-150">При возвращении данного метода содержит найденный экспорт или <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-150">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa92-151">Возвращает экспорт, соответствующий определенному параметру универсального типа, или возвращает значение <see langword="null" />, если он не найден.</span><span class="sxs-lookup"><span data-stu-id="5fa92-151">Returns the export that matches the specified generic type parameter, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="5fa92-152">Значение <see langword="true" />, если экспорт найден; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-152"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport&lt;TExport&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetExport&lt;TExport&gt; (string contractName, out TExport export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExport&lt;TExport&gt;(string contractName, [out] !!TExport&amp; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Composition.CompositionContext.TryGetExport``1(System.String,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetExport(Of TExport) (contractName As String, ByRef export As TExport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TExport&gt;&#xA; bool TryGetExport(System::String ^ contractName, [Runtime::InteropServices::Out] TExport % export);" />
      <MemberSignature Language="F#" Value="member this.TryGetExport : string *  -&gt; bool" Usage="compositionContext.TryGetExport (contractName, export)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Composition.Runtime</AssemblyName>
        <AssemblyVersion>1.0.31.0</AssemblyVersion>
        <AssemblyVersion>1.0.32.0</AssemblyVersion>
        <AssemblyVersion>1.0.33.0</AssemblyVersion>
        <AssemblyVersion>1.0.34.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TExport" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="export" Type="TExport" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TExport"><span data-ttu-id="5fa92-153">Тип для сопоставления.</span><span class="sxs-lookup"><span data-stu-id="5fa92-153">The type to match.</span></span></typeparam>
        <param name="contractName"><span data-ttu-id="5fa92-154">Сопоставляемое имя.</span><span class="sxs-lookup"><span data-stu-id="5fa92-154">The name to match.</span></span></param>
        <param name="export"><span data-ttu-id="5fa92-155">При возвращении данного метода содержит найденный экспорт или <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-155">When this method returns, contains the matched export or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="5fa92-156">Возвращает экспорт, соответствующий определенному параметру универсального типа и имени контракта, или возвращает значение <see langword="null" />, если он не найден.</span><span class="sxs-lookup"><span data-stu-id="5fa92-156">Returns the export that matches the specified generic type parameter and contract name, or returns <see langword="null" /> if no match is found.</span></span></summary>
        <returns><span data-ttu-id="5fa92-157">Значение <see langword="true" />, если экспорт найден; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5fa92-157"><see langword="true" /> if an export was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>