<Type Name="Window" FullName="System.Windows.Window">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bafa1024a0a7ce66d57d19750ab4c0f6d3bfe2ae" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56385128" /></Metadata><TypeSignature Language="C#" Value="public class Window : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Window extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Window" />
  <TypeSignature Language="VB.NET" Value="Public Class Window&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Window : System::Windows::Controls::ContentControl" />
  <TypeSignature Language="F#" Value="type Window = class&#xA;    inherit ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7a718-101">Предоставляет возможность создавать, настраивать, показывать обычные и диалоговые окна, а также управлять временем их существования.</span><span class="sxs-lookup"><span data-stu-id="7a718-101">Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-102">Точка взаимодействия между пользователем и автономное приложение — это окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-102">The point of interaction between a user and a standalone application is a window.</span></span> <span data-ttu-id="7a718-103">Объект [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] окно состоит из двух различных областей:</span><span class="sxs-lookup"><span data-stu-id="7a718-103">A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:</span></span>  
  
-   <span data-ttu-id="7a718-104">Неклиентской области, где размещается элементов оформления windows, включая значок, название, системное меню, свернуть, развернуть кнопки, кнопки "Восстановить", кнопка "Закрыть" и границы.</span><span class="sxs-lookup"><span data-stu-id="7a718-104">A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.</span></span>  
  
-   <span data-ttu-id="7a718-105">Клиентская область, где размещается содержимое конкретного приложения.</span><span class="sxs-lookup"><span data-stu-id="7a718-105">A client area, which hosts application-specific content.</span></span>  
  
 <span data-ttu-id="7a718-106">Стандартное окно показан на следующем рисунке:</span><span class="sxs-lookup"><span data-stu-id="7a718-106">A standard window is shown in the following figure:</span></span>  
  
 <span data-ttu-id="7a718-107">![Элементы окна](~/add/media/windowoverviewfigure1.PNG "элементы окна")</span><span class="sxs-lookup"><span data-stu-id="7a718-107">![Window elements](~/add/media/windowoverviewfigure1.PNG "Window elements")</span></span>  
  
 <span data-ttu-id="7a718-108"><xref:System.Windows.Window> Инкапсулирует возможность создавать, настраивать, отображения и управления жизненным циклом и диалоговые окна и предоставляет следующие основные службы:</span><span class="sxs-lookup"><span data-stu-id="7a718-108"><xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:</span></span>  
  
 <span data-ttu-id="7a718-109">**Управление жизненным циклом**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span><span class="sxs-lookup"><span data-stu-id="7a718-109">**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.</span></span>  
  
 <span data-ttu-id="7a718-110">**Управление окнами**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-110">**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.</span></span>  
  
 <span data-ttu-id="7a718-111">**Внешний вид и поведение**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span><span class="sxs-lookup"><span data-stu-id="7a718-111">**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A></span></span>  
  
 <span data-ttu-id="7a718-112">**Диалоговые окна**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-112">**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7a718-113">Кроме того <xref:System.Windows.Application> предоставляет специальную поддержку для всех окон в приложении управления:</span><span class="sxs-lookup"><span data-stu-id="7a718-113">Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:</span></span>  
  
-   <span data-ttu-id="7a718-114">Приложение поддерживает список всех окон, которые в данный момент созданы в приложении.</span><span class="sxs-lookup"><span data-stu-id="7a718-114">Application maintains a list of all the windows that are currently instantiated in the application.</span></span> <span data-ttu-id="7a718-115">Этот список возвращается командлетом <xref:System.Windows.Application.Windows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-115">This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.</span></span>  
  
-   <span data-ttu-id="7a718-116">По умолчанию <xref:System.Windows.Application.MainWindow%2A> автоматически устанавливается со ссылкой на первый <xref:System.Windows.Window> , созданный в приложении.</span><span class="sxs-lookup"><span data-stu-id="7a718-116">By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application.</span></span> <span data-ttu-id="7a718-117">Это в результате чего в окне главного окна приложения.</span><span class="sxs-lookup"><span data-stu-id="7a718-117">This thereby making the window the main application window.</span></span>  
  
 <span data-ttu-id="7a718-118">Объект <xref:System.Windows.Window> может осуществляться с помощью разметки, разметки и кода или кода.</span><span class="sxs-lookup"><span data-stu-id="7a718-118">A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.</span></span>  
  
 <span data-ttu-id="7a718-119"><xref:System.Windows.Window> в основном используется для отображения окна и диалоговые окна для автономных приложений.</span><span class="sxs-lookup"><span data-stu-id="7a718-119"><xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications.</span></span> <span data-ttu-id="7a718-120">Тем не менее, для приложений, требующих навигации на уровне окна, например мастера, можно использовать <xref:System.Windows.Navigation.NavigationWindow> вместо; <xref:System.Windows.Navigation.NavigationWindow> является производным от <xref:System.Windows.Window> и расширяет его с поддержкой навигации в стиле браузера.</span><span class="sxs-lookup"><span data-stu-id="7a718-120">However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-121">О-ва содержимого с поддержкой навигации могут быть включены в другие контейнеры содержимого и содержимого с помощью <xref:System.Windows.Controls.Frame>.</span><span class="sxs-lookup"><span data-stu-id="7a718-121">Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.</span></span>  
  
 <span data-ttu-id="7a718-122"><xref:System.Windows.Window> требуется `UnmanagedCode` создания разрешения безопасности.</span><span class="sxs-lookup"><span data-stu-id="7a718-122"><xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated.</span></span> <span data-ttu-id="7a718-123">Это приводит к следующим последствиям:</span><span class="sxs-lookup"><span data-stu-id="7a718-123">This has the following consequences:</span></span>  
  
-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]<span data-ttu-id="7a718-124">-развернутой автономные приложения будет запрашивать повышение уровня разрешений при запуске из зон локальной интрасети или Интернета.</span><span class="sxs-lookup"><span data-stu-id="7a718-124">-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.</span></span>  
  
-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] <span data-ttu-id="7a718-125">запрашивающие меньше, чем полные права доступа, не смогут создать экземпляр окна или диалоговые.</span><span class="sxs-lookup"><span data-stu-id="7a718-125">that request anything less than full permissions will not be able to instantiate windows or dialog boxes.</span></span>  
  
 <span data-ttu-id="7a718-126">Сведения о автономное развертывание приложения и вопросы безопасности, см. в разделе [стратегия безопасности WPF — безопасность платформы](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span><span class="sxs-lookup"><span data-stu-id="7a718-126">For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).</span></span>  
  
 <span data-ttu-id="7a718-127">Объект <xref:System.Windows.Window> является <xref:System.Windows.Controls.ContentControl>, означающее, что она может содержать объект любого типа (например, строки, изображения или панели).</span><span class="sxs-lookup"><span data-stu-id="7a718-127">A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel).</span></span> <span data-ttu-id="7a718-128">Дополнительные сведения см. в описании класса <xref:System.Windows.Controls.ContentControl>.</span><span class="sxs-lookup"><span data-stu-id="7a718-128">For more information, see the <xref:System.Windows.Controls.ContentControl> class.</span></span> <span data-ttu-id="7a718-129">Кроме того <xref:System.Windows.Window> является корневым элементом, и, следовательно, не может быть частью содержимого другого элемента.</span><span class="sxs-lookup"><span data-stu-id="7a718-129">Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-130"><xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, И <xref:System.Windows.Window.Left%2A> свойства, заданные <xref:System.Windows.Window> через style не будут применяться во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="7a718-130">The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.</span></span>  
  
## <a name="customizing-the-window-control"></a><span data-ttu-id="7a718-131">Настройка элементов управления окна</span><span class="sxs-lookup"><span data-stu-id="7a718-131">Customizing the Window Control</span></span>  
 <span data-ttu-id="7a718-132">Чтобы применить значения свойств к нескольким <xref:System.Windows.Window> можно использовать элементы управления <xref:System.Windows.FrameworkElement.Style%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-132">To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="7a718-133">Вы можете изменить значение по умолчанию <xref:System.Windows.Controls.ControlTemplate> предоставить уникальный внешний вид элемента управления.</span><span class="sxs-lookup"><span data-stu-id="7a718-133">You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance.</span></span> <span data-ttu-id="7a718-134">Дополнительные сведения о создании <xref:System.Windows.Controls.ControlTemplate>, см. в разделе [Настройка внешнего вида существующего элемента управления путем создания объекта ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span><span class="sxs-lookup"><span data-stu-id="7a718-134">For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).</span></span>  <span data-ttu-id="7a718-135">Чтобы увидеть части и состояния, относящиеся к <xref:System.Windows.Window>, см. в разделе [окно Стили и шаблоны](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span><span class="sxs-lookup"><span data-stu-id="7a718-135">To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).</span></span>  
  
 <span data-ttu-id="7a718-136">Свойства зависимостей для данного элемента управления могут быть заданы посредством стиля элемента управления по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-136">Dependency properties for this control might be set by the control's default style.</span></span>  <span data-ttu-id="7a718-137">Если свойство имеет значение стилем по умолчанию, может измениться со значения по умолчанию, когда элемент управления отображается в приложении.</span><span class="sxs-lookup"><span data-stu-id="7a718-137">If a property is set by a default style, the property might change from its default value when the control appears in the application.</span></span> <span data-ttu-id="7a718-138">Стиль по умолчанию определяется, какая тема рабочего стола используется, когда приложение выполняется.</span><span class="sxs-lookup"><span data-stu-id="7a718-138">The default style is determined by which desktop theme is used when the application is running.</span></span>  <span data-ttu-id="7a718-139">Дополнительные сведения см. в разделе [темы WPF по умолчанию](https://go.microsoft.com/fwlink/?LinkID=158252).</span><span class="sxs-lookup"><span data-stu-id="7a718-139">For more information, see [Default WPF Themes](https://go.microsoft.com/fwlink/?LinkID=158252).</span></span>  
  
[!INCLUDE[setting-a-visual-property](~/includes/visual-property-note.md)]  
  
## Examples  
 <span data-ttu-id="7a718-140">В следующем примере показано, как стандартное окно — с использованием одной разметки:</span><span class="sxs-lookup"><span data-stu-id="7a718-140">The following example shows how a standard window is defined using only markup:</span></span>  
  
 [!code-xaml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  
  
 <span data-ttu-id="7a718-141">В следующем примере показан как стандартное окно определяется с использованием только кода:</span><span class="sxs-lookup"><span data-stu-id="7a718-141">The following example shows how a standard window is defined using only code:</span></span>  
  
 [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]
 [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  
  
 <span data-ttu-id="7a718-142">В следующем примере показано, как стандартное окно — с использованием комбинации разметки и кода.</span><span class="sxs-lookup"><span data-stu-id="7a718-142">The following example shows how a standard window is defined using a combination of markup and code-behind.</span></span>  
  
 [!code-xaml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  
  
 [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]
 [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Window.Show" />
    <altmember cref="M:System.Windows.Window.ShowDialog" />
    <altmember cref="P:System.Windows.Window.DialogResult" />
    <altmember cref="T:System.Windows.Application" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Window ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Window();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-143">Инициализирует новый экземпляр класса <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-143">Initializes a new instance of the <see cref="T:System.Windows.Window" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-144">Конструктор инициализирует <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, и <xref:System.Windows.Window.Left%2A> свойства по умолчанию для соответствующих <xref:System.Windows.Window> значения.</span><span class="sxs-lookup"><span data-stu-id="7a718-144">The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.</span></span>  
  
 <span data-ttu-id="7a718-145">Если окно создается в пределах <xref:System.AppDomain> с <xref:System.Windows.Application> объекта, конструктор добавляет <xref:System.Windows.Window> объект к набору <xref:System.Windows.Application>-управляемые windows с помощью <xref:System.Windows.Application.Windows%2A> свойство <xref:System.Windows.Application> объекта.</span><span class="sxs-lookup"><span data-stu-id="7a718-145">If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="7a718-146">для разрешения для этого объекта для вызова небезопасного собственных методов.</span><span class="sxs-lookup"><span data-stu-id="7a718-146">for permission for this object to call unsafe native methods.</span></span> <span data-ttu-id="7a718-147">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="7a718-147">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public bool Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Function Activate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Activate();" />
      <MemberSignature Language="F#" Value="member this.Activate : unit -&gt; bool" Usage="window.Activate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-148">Пытается переместить окно на передний план и активирует его.</span><span class="sxs-lookup"><span data-stu-id="7a718-148">Attempts to bring the window to the foreground and activates it.</span></span></summary>
        <returns><span data-ttu-id="7a718-149"><see langword="true" />, если окно <see cref="T:System.Windows.Window" /> было успешно активировано; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-149"><see langword="true" /> if the <see cref="T:System.Windows.Window" /> was successfully activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-150">Правила, определяющие, активирована ли окна совпадают с используемыми приложением [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` функция (User32.dll).</span><span class="sxs-lookup"><span data-stu-id="7a718-150">The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).</span></span>  
  
 <span data-ttu-id="7a718-151">Если окно активируется в приложении Windows Presentation Foundation, которое не является приложением пользователя переднего плана, <xref:System.Windows.Application.Activated> события.</span><span class="sxs-lookup"><span data-stu-id="7a718-151">If the window is activated in a Windows Presentation Foundation application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-152">Этот метод не может вызываться, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-152">This method cannot be called when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-153">для разрешения для активации окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-153">for permission to activate a window.</span></span> <span data-ttu-id="7a718-154">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-154">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Activated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Activated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Activated;" />
      <MemberSignature Language="F#" Value="member this.Activated : EventHandler " Usage="member this.Activated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-155">Происходит при выведении окна на передний план.</span><span class="sxs-lookup"><span data-stu-id="7a718-155">Occurs when a window becomes the foreground window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-156">Окно активировано (выведении окна на передний план) при:</span><span class="sxs-lookup"><span data-stu-id="7a718-156">A window is activated (becomes the foreground window) when:</span></span>  
  
-   <span data-ttu-id="7a718-157">Окно открывается в первый раз.</span><span class="sxs-lookup"><span data-stu-id="7a718-157">The window is first opened.</span></span>  
  
-   <span data-ttu-id="7a718-158">Пользователь переключается на окно, выбрав его с помощью мыши, нажав сочетание клавиш ALT + TAB, или в диспетчере задач.</span><span class="sxs-lookup"><span data-stu-id="7a718-158">A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.</span></span>  
  
-   <span data-ttu-id="7a718-159">Пользователь щелкает кнопку панели задач.</span><span class="sxs-lookup"><span data-stu-id="7a718-159">A user clicks the window's taskbar button.</span></span>  
  
 <span data-ttu-id="7a718-160">Windows, которые необходимо обнаружить, когда они становятся активировать может обрабатывать <xref:System.Windows.Window.Activated> событий.</span><span class="sxs-lookup"><span data-stu-id="7a718-160">Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="7a718-161">После активации окна он может деактивировать и повторно много раз во время его существования.</span><span class="sxs-lookup"><span data-stu-id="7a718-161">After a window is first activated, it may be deactivated and reactivated many times during its lifetime.</span></span> <span data-ttu-id="7a718-162">Если поведение или состояние приложения зависит от состояния его активации, можно изучить <xref:System.Windows.Window.IsActive%2A> чтобы определить, какое состояние активации в.</span><span class="sxs-lookup"><span data-stu-id="7a718-162">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="7a718-163">Приложение также может быть <xref:System.Windows.Application.Activated>.</span><span class="sxs-lookup"><span data-stu-id="7a718-163">An application can also be <xref:System.Windows.Application.Activated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Deactivated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparency">
      <MemberSignature Language="C#" Value="public bool AllowsTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.AllowsTransparency" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowsTransparency As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowsTransparency { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowsTransparency : bool with get, set" Usage="System.Windows.Window.AllowsTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-164">Возвращает или задает значение, указывающее, поддерживает ли клиентская область окна прозрачность.</span><span class="sxs-lookup"><span data-stu-id="7a718-164">Gets or sets a value that indicates whether a window's client area supports transparency.</span></span></summary>
        <value><span data-ttu-id="7a718-165"><see langword="true" />, если окно поддерживает прозрачность; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-165"><see langword="true" /> if the window supports transparency; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-166">Когда <xref:System.Windows.Controls.Control.Background%2A> окна свойству прозрачного цвета, с помощью <xref:System.Windows.Media.Brushes.Transparent%2A> к примеру, окно остается непрозрачный.</span><span class="sxs-lookup"><span data-stu-id="7a718-166">When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque.</span></span> <span data-ttu-id="7a718-167">Это значит, рабочий стол и любые выполняемые с «вен» окна не видны.</span><span class="sxs-lookup"><span data-stu-id="7a718-167">This means that the desktop and any running applications "beneath" the window cannot be seen.</span></span> <span data-ttu-id="7a718-168">Чтобы разрешить такой тип прозрачности, <xref:System.Windows.Window.AllowsTransparency%2A> должно быть присвоено `true`.</span><span class="sxs-lookup"><span data-stu-id="7a718-168">To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.</span></span>  
  
 <span data-ttu-id="7a718-169"><xref:System.Windows.Window.AllowsTransparency%2A> существует для упрощения создания непрямоугольных окон и, следовательно, при <xref:System.Windows.Window.AllowsTransparency%2A> присваивается `true`, окна <xref:System.Windows.Window.WindowStyle%2A> свойству должно быть присвоено <xref:System.Windows.WindowStyle.None>.</span><span class="sxs-lookup"><span data-stu-id="7a718-169"><xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowAllowsTransparency"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-170">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-170">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-171">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-171">Identifier field</span></span>|<xref:System.Windows.Window.AllowsTransparencyProperty>|  
|<span data-ttu-id="7a718-172">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-172">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-173">None</span><span class="sxs-lookup"><span data-stu-id="7a718-173">None</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-174">Окно, значение свойства <see cref="P:System.Windows.Window.WindowStyle" /> которого отлично от <see cref="F:System.Windows.WindowStyle.None" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-174">A window that has a <see cref="P:System.Windows.Window.WindowStyle" /> value of anything other than <see cref="F:System.Windows.WindowStyle.None" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowsTransparencyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty AllowsTransparencyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.AllowsTransparencyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly AllowsTransparencyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ AllowsTransparencyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable AllowsTransparencyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.AllowsTransparencyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-175">Определяет свойство зависимостей <see cref="P:System.Windows.Window.AllowsTransparency" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-175">Identifies the <see cref="P:System.Windows.Window.AllowsTransparency" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size arrangeBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ArrangeOverride (arrangeBounds As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size ArrangeOverride(System::Windows::Size arrangeBounds);" />
      <MemberSignature Language="F#" Value="override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.ArrangeOverride arrangeBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrangeBounds" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="arrangeBounds"><span data-ttu-id="7a718-176">Объект <see cref="T:System.Windows.Size" />, отражающий окончательный размер, который следует использовать окну для упорядочения себя и своих дочерних окон.</span><span class="sxs-lookup"><span data-stu-id="7a718-176">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="7a718-177">Переопределив данный метод, можно упорядочить окно и его дочерние элементы, а также изменить их размер.</span><span class="sxs-lookup"><span data-stu-id="7a718-177">Override this method to arrange and size a window and its child elements.</span></span></summary>
        <returns><span data-ttu-id="7a718-178">Объект <see cref="T:System.Windows.Size" />, отражающий фактический размер, который использовался.</span><span class="sxs-lookup"><span data-stu-id="7a718-178">A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-179"><xref:System.Windows.Window.ArrangeOverride%2A> не вызывается, когда <xref:System.Windows.UIElement.Visibility%2A> свойство имеет значение <xref:System.Windows.Visibility.Collapsed>.</span><span class="sxs-lookup"><span data-stu-id="7a718-179"><xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="7a718-180">Если значение <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Visibility.Hidden> или <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-180">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-181">Когда либо <xref:System.Windows.Window.Show%2A> или <xref:System.Windows.Window.ShowDialog%2A> вызываются, <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Window> присваивается <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="7a718-181">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="window.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-182">Вручную закрывает окно <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-182">Manually closes a <see cref="T:System.Windows.Window" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-183">Объект <xref:System.Windows.Window> может быть закрыто с помощью одного из нескольких хорошо известных, предоставляемых системой механизмов, расположенных в его заголовке, включая:</span><span class="sxs-lookup"><span data-stu-id="7a718-183">A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:</span></span>  
  
-   <span data-ttu-id="7a718-184">ALT + F4.</span><span class="sxs-lookup"><span data-stu-id="7a718-184">ALT+F4.</span></span>  
  
-   <span data-ttu-id="7a718-185">Системное меню &#124; **закрыть**.</span><span class="sxs-lookup"><span data-stu-id="7a718-185">System menu &#124; **Close**.</span></span>  
  
-   <span data-ttu-id="7a718-186">**Закрыть** кнопки.</span><span class="sxs-lookup"><span data-stu-id="7a718-186">**Close** button.</span></span>  
  
 <span data-ttu-id="7a718-187">Объект <xref:System.Windows.Window> может быть закрыто с помощью одного из нескольких хорошо известных механизмов в клиентской области, предоставленных разработчиками, включая:</span><span class="sxs-lookup"><span data-stu-id="7a718-187">A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:</span></span>  
  
-   <span data-ttu-id="7a718-188">**Файл** &#124; **выхода** в главном окне.</span><span class="sxs-lookup"><span data-stu-id="7a718-188">**File** &#124; **Exit** on a main window.</span></span>  
  
-   <span data-ttu-id="7a718-189">**Файл** &#124; **закрыть** или **закрыть** кнопки в дочернем окне.</span><span class="sxs-lookup"><span data-stu-id="7a718-189">**File** &#124; **Close** or a **Close** button on a child window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-190">**ОК** и **отменить** кнопки в диалоговом окне также являются предоставляемой разработчиком, несмотря на то что будет скорее всего набора <xref:System.Windows.Window.DialogResult%2A>, который автоматически закрывает окно, которое было открыто посредством вызова <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-190">**OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7a718-191">Эти механизмы требуется явно вызывать <xref:System.Windows.Window.Close%2A> закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-191">These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-192">Если окно, открытое посредством вызова <xref:System.Windows.Window.ShowDialog%2A>и с <xref:System.Windows.Controls.Button> с его <xref:System.Windows.Controls.Button.IsCancel%2A> свойства задано значение true, будет автоматически закрыто, либо нажатии кнопки или нажатия клавиши ESC.</span><span class="sxs-lookup"><span data-stu-id="7a718-192">If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed.</span></span> <span data-ttu-id="7a718-193">Если окна был открыт с помощью <xref:System.Windows.Window.Show%2A>, но при этом <xref:System.Windows.Window.Close%2A> должен быть явно вызываемые, например, в <xref:System.Windows.Controls.Primitives.ButtonBase.Click> обработчик событий для <xref:System.Windows.Controls.Button>.</span><span class="sxs-lookup"><span data-stu-id="7a718-193">If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="7a718-194">Закрытие окна вызывает <xref:System.Windows.Window.Closing> возникает событие.</span><span class="sxs-lookup"><span data-stu-id="7a718-194">Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised.</span></span> <span data-ttu-id="7a718-195">Если <xref:System.Windows.Window.Closing> событие не отменяется, то происходит следующее:</span><span class="sxs-lookup"><span data-stu-id="7a718-195">If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:</span></span>  
  
-   <span data-ttu-id="7a718-196"><xref:System.Windows.Window> Удаляется из <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (если <xref:System.Windows.Application> объект существует).</span><span class="sxs-lookup"><span data-stu-id="7a718-196">The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=nameWithType> (if an <xref:System.Windows.Application> object exists).</span></span>  
  
-   <span data-ttu-id="7a718-197"><xref:System.Windows.Window> Удаляется из владельца <xref:System.Windows.Window> Если владельца/собственного связь установлена перед принадлежащий <xref:System.Windows.Window> отображался и после владельца <xref:System.Windows.Window> был открыт.</span><span class="sxs-lookup"><span data-stu-id="7a718-197">The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.</span></span>  
  
-   <span data-ttu-id="7a718-198">Возникает событие <xref:System.Windows.Window.Closed>.</span><span class="sxs-lookup"><span data-stu-id="7a718-198">The <xref:System.Windows.Window.Closed> event is raised.</span></span>  
  
-   <span data-ttu-id="7a718-199">Неуправляемые ресурсы, созданные <xref:System.Windows.Window> удаляются.</span><span class="sxs-lookup"><span data-stu-id="7a718-199">Unmanaged resources created by the <xref:System.Windows.Window> are disposed.</span></span>  
  
-   <span data-ttu-id="7a718-200">Если <xref:System.Windows.Window.ShowDialog%2A> был вызван для отображения <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> возвращает.</span><span class="sxs-lookup"><span data-stu-id="7a718-200">If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.</span></span>  
  
 <span data-ttu-id="7a718-201">Закрытие <xref:System.Windows.Window> предписывает принадлежащих ему будет закрыта.</span><span class="sxs-lookup"><span data-stu-id="7a718-201">Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed.</span></span> <span data-ttu-id="7a718-202">Кроме того, закрытие <xref:System.Windows.Window> может привести к остановке выполнения в зависимости от приложения <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> свойству.</span><span class="sxs-lookup"><span data-stu-id="7a718-202">Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=nameWithType> property is set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-203">Этот метод не может вызываться, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-203">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-204">В следующем примере показан **файл** &#124; **выхода** меню, обрабатываемое явно вызвать <xref:System.Windows.Window.Close%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-204">The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.</span></span>  
  
 [!code-xaml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  
  
 [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]
 [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-205">для разрешения использования все окна и события пользовательского ввода без ограничений.</span><span class="sxs-lookup"><span data-stu-id="7a718-205">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="7a718-206">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-206">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="P:System.Windows.Window.DialogResult" />
        <altmember cref="P:System.Windows.Window.Owner" />
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C#" Value="public event EventHandler Closed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Closed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Closed;" />
      <MemberSignature Language="F#" Value="member this.Closed : EventHandler " Usage="member this.Closed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-207">Происходит, когда окно готово к закрытию.</span><span class="sxs-lookup"><span data-stu-id="7a718-207">Occurs when the window is about to close.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-208">Как только это событие возникает, окна невозможно предотвратить закрытие.</span><span class="sxs-lookup"><span data-stu-id="7a718-208">Once this event is raised, a window cannot be prevented from closing.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-209">Задано свойство <see cref="P:System.Windows.UIElement.Visibility" /> либо вызван один из методов <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" /> или <see cref="M:System.Windows.Window.Hide" /> во время закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-209"><see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Hide" /> is called while a window is closing.</span></span></exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closing" />
        <altmember cref="M:System.Windows.Application.Shutdown" />
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="E:System.Windows.Application.SessionEnding" />
      </Docs>
    </Member>
    <Member MemberName="Closing">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Closing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Closing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Closing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Closing As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Closing;" />
      <MemberSignature Language="F#" Value="member this.Closing : System.ComponentModel.CancelEventHandler " Usage="member this.Closing : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-210">Происходит непосредственно после вызова метода <see cref="M:System.Windows.Window.Close" /> и может быть обработано с отменой закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-210">Occurs directly after <see cref="M:System.Windows.Window.Close" /> is called, and can be handled to cancel window closure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-211"><xref:System.Windows.Window.Closing> можно обрабатывать для обнаружения при закрытии окна (например, в том случае, когда <xref:System.Windows.Window.Close%2A> вызывается).</span><span class="sxs-lookup"><span data-stu-id="7a718-211"><xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called).</span></span> <span data-ttu-id="7a718-212">Кроме того <xref:System.Windows.Window.Closing> может использоваться для предотвращения закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-212">Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing.</span></span> <span data-ttu-id="7a718-213">Чтобы предотвратить закрытие окна, можно задать <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> свойство <xref:System.ComponentModel.CancelEventArgs> аргумент `true`.</span><span class="sxs-lookup"><span data-stu-id="7a718-213">To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.</span></span>  
  
 <span data-ttu-id="7a718-214"><xref:System.Windows.Window.Closing> События при <xref:System.Windows.Window.Close%2A> вызывается, при нажатии кнопки закрытия окна или при нажатии клавиш ALT + F4.</span><span class="sxs-lookup"><span data-stu-id="7a718-214">The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.</span></span>  
  
 <span data-ttu-id="7a718-215">Если собственное окно был открыт с помощью окна его владельца <xref:System.Windows.Window.Show%2A>и владелец закрывается окно, окно во владении <xref:System.Windows.Window.Closing> событие не происходит.</span><span class="sxs-lookup"><span data-stu-id="7a718-215">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span> <span data-ttu-id="7a718-216">Если закрывается владелец окна (см. в разделе <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> не возникает на окно во владении.</span><span class="sxs-lookup"><span data-stu-id="7a718-216">If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.</span></span>  
  
 <span data-ttu-id="7a718-217">Если <xref:System.Windows.Application.Shutdown%2A> вызове <xref:System.Windows.Window.Closing> событие для каждого окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-217">If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised.</span></span> <span data-ttu-id="7a718-218">Тем не менее если <xref:System.Windows.Window.Closing> будет отменена, отмены учитывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-218">However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.</span></span>  
  
 <span data-ttu-id="7a718-219">Если сеанс завершается, так как пользователь выходит из системы или завершает работу, <xref:System.Windows.Window.Closing> не возникает; обработка <xref:System.Windows.Application.SessionEnding> реализовать код, отменяющий закрытия приложения.</span><span class="sxs-lookup"><span data-stu-id="7a718-219">If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.</span></span>  
  
 <span data-ttu-id="7a718-220">Если вы хотите показать или скрыть окно несколько раз в течение времени существования приложения, и вы не хотите каждый раз, повторного создания экземпляра окна то отобразить, можно обрабатывать <xref:System.Windows.Window.Closing> событий, отменить его, а также вызвать <xref:System.Windows.Window.Hide%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7a718-220">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="7a718-221">Затем можно вызвать <xref:System.Windows.Window.Show%2A> на тот же экземпляр, чтобы снова открыть его.</span><span class="sxs-lookup"><span data-stu-id="7a718-221">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-222">В следующем примере демонстрируется <xref:System.Windows.Window> , определяющий, требуется ли вмешательство пользователя, чтобы закрыть.</span><span class="sxs-lookup"><span data-stu-id="7a718-222">The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.</span></span>  
  
 [!code-xaml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  
  
 [!code-csharp[WindowClosingSnippets](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs)]
 [!code-vb[WindowClosingSnippets](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-223">Задано свойство <see cref="P:System.Windows.UIElement.Visibility" /> либо вызван один из методов <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" /> или <see cref="M:System.Windows.Window.Close" /> во время закрытия окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-223"><see cref="P:System.Windows.UIElement.Visibility" /> is set, or <see cref="M:System.Windows.Window.Show" />, <see cref="M:System.Windows.Window.ShowDialog" />, or <see cref="M:System.Windows.Window.Close" /> is called while a window is closing.</span></span></exception>
        <altmember cref="P:System.Windows.Application.ShutdownMode" />
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="E:System.Windows.Window.Closed" />
      </Docs>
    </Member>
    <Member MemberName="ContentRendered">
      <MemberSignature Language="C#" Value="public event EventHandler ContentRendered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContentRendered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.ContentRendered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContentRendered As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ContentRendered;" />
      <MemberSignature Language="F#" Value="member this.ContentRendered : EventHandler " Usage="member this.ContentRendered : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-224">Происходит после завершения отображения содержимого окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-224">Occurs after a window's content has been rendered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-225">Если окно не имеет содержимого, это событие не возникает.</span><span class="sxs-lookup"><span data-stu-id="7a718-225">If the window has no content, this event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.ContentControl.Content" />
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.Deactivated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deactivated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Deactivated;" />
      <MemberSignature Language="F#" Value="member this.Deactivated : EventHandler " Usage="member this.Deactivated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-226">Происходит при перемещении окна на задний план.</span><span class="sxs-lookup"><span data-stu-id="7a718-226">Occurs when a window becomes a background window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-227">Окно деактивируется (попадает на задний план) при:</span><span class="sxs-lookup"><span data-stu-id="7a718-227">A window is deactivated (becomes a background window) when:</span></span>  
  
-   <span data-ttu-id="7a718-228">Пользователь переключается на другое окно в текущем приложении.</span><span class="sxs-lookup"><span data-stu-id="7a718-228">A user switches to another window in the current application.</span></span>  
  
-   <span data-ttu-id="7a718-229">Пользователь переключается на окно в другое приложение, с помощью клавиши ALT + TAB или с помощью диспетчера задач.</span><span class="sxs-lookup"><span data-stu-id="7a718-229">A user switches to the window in another application by using ALT+TAB or by using Task Manager.</span></span>  
  
-   <span data-ttu-id="7a718-230">Пользователь нажимает кнопку в панели задач окна в другое приложение.</span><span class="sxs-lookup"><span data-stu-id="7a718-230">A user clicks the taskbar button for a window in another application.</span></span>  
  
 <span data-ttu-id="7a718-231">Windows, которые необходимо обнаружить, когда они деактивации путем обработки <xref:System.Windows.Window.Deactivated> событий.</span><span class="sxs-lookup"><span data-stu-id="7a718-231">Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="7a718-232">После деактивации окна ее повторной активации и деактивации много раз во время его существования.</span><span class="sxs-lookup"><span data-stu-id="7a718-232">After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.</span></span> <span data-ttu-id="7a718-233">Если поведение или состояние приложения зависит от состояния его активации, можно изучить <xref:System.Windows.Window.IsActive%2A> чтобы определить, какое состояние активации в.</span><span class="sxs-lookup"><span data-stu-id="7a718-233">If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.</span></span>  
  
 <span data-ttu-id="7a718-234">Приложение также может быть <xref:System.Windows.Application.Deactivated>.</span><span class="sxs-lookup"><span data-stu-id="7a718-234">An application can also be <xref:System.Windows.Application.Deactivated>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="P:System.Windows.Window.IsActive" />
      </Docs>
    </Member>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;bool&gt; DialogResult { Nullable&lt;bool&gt; get(); void set(Nullable&lt;bool&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : Nullable&lt;bool&gt; with get, set" Usage="System.Windows.Window.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-235">Возвращает или задает результирующее значение диалоговое окна, то есть значение, которое будет возвращено методом <see cref="M:System.Windows.Window.ShowDialog" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-235">Gets or sets the dialog result value, which is the value that is returned from the <see cref="M:System.Windows.Window.ShowDialog" /> method.</span></span></summary>
        <value><span data-ttu-id="7a718-236">Значение <see cref="T:System.Nullable`1" /> типа <see cref="T:System.Boolean" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-236">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" />.</span></span> <span data-ttu-id="7a718-237">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-237">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-238"><xref:System.Windows.Window.DialogResult%2A> можно использовать из кода, в которой было показано диалоговое окно, чтобы определить, приняли ли пользователь (`true`) или отменена (`false`) диалоговое окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-238"><xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box.</span></span> <span data-ttu-id="7a718-239">Если диалоговое окно было принято, это сигнализирует код, открывающий диалоговое окно, чтобы получить данные, собранные этим пользователем и обработать его.</span><span class="sxs-lookup"><span data-stu-id="7a718-239">If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.</span></span> <span data-ttu-id="7a718-240">Если диалоговое окно было отменено, тем не менее, это означает, что вызывающий код должен остановить дальнейшую обработку.</span><span class="sxs-lookup"><span data-stu-id="7a718-240">If a dialog box was canceled, however, this signifies that calling code should stop any further processing.</span></span>  
  
 <span data-ttu-id="7a718-241">По умолчанию диалоговое окно отменяется, когда пользователь выполняет одно из следующих:</span><span class="sxs-lookup"><span data-stu-id="7a718-241">By default, a dialog box is canceled when a user does one of the following:</span></span>  
  
-   <span data-ttu-id="7a718-242">PressesALT + F4.</span><span class="sxs-lookup"><span data-stu-id="7a718-242">PressesALT+F4.</span></span>  
  
-   <span data-ttu-id="7a718-243">Нажимает кнопку **закрыть** кнопки.</span><span class="sxs-lookup"><span data-stu-id="7a718-243">Clicks the **Close** button.</span></span>  
  
-   <span data-ttu-id="7a718-244">Выбирает **закрыть** в системном меню.</span><span class="sxs-lookup"><span data-stu-id="7a718-244">Selects **Close** from the System menu.</span></span>  
  
 <span data-ttu-id="7a718-245">Во всех этих случаях <xref:System.Windows.Window.DialogResult%2A> является `false` по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-245">In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.</span></span>  
  
 <span data-ttu-id="7a718-246">Диалоговое окно, как правило, предоставляет специальные кнопка закрытия диалога, который является кнопкой, <xref:System.Windows.Controls.Button.IsCancel%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="7a718-246">A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`.</span></span> <span data-ttu-id="7a718-247">Кнопка, настроенная таким образом автоматически закроет окно при нажатии, или при нажатии клавиши ESC.</span><span class="sxs-lookup"><span data-stu-id="7a718-247">A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.</span></span> <span data-ttu-id="7a718-248">В любом из этих случаев <xref:System.Windows.Window.DialogResult%2A> остается `false`.</span><span class="sxs-lookup"><span data-stu-id="7a718-248">In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.</span></span>  
  
 <span data-ttu-id="7a718-249">Диалоговое окно также обычно предоставляет кнопки «принять», который является кнопкой, <xref:System.Windows.Controls.Button.IsDefault%2A> свойству `true`.</span><span class="sxs-lookup"><span data-stu-id="7a718-249">A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`.</span></span> <span data-ttu-id="7a718-250">Кнопка, настроенная таким образом будет вызывать его <xref:System.Windows.Controls.Primitives.ButtonBase.Click> событие при нажатии ее или клавишу ВВОД.</span><span class="sxs-lookup"><span data-stu-id="7a718-250">A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed.</span></span> <span data-ttu-id="7a718-251">Однако он не будет автоматически закрыто диалоговое окно, и не установит его <xref:System.Windows.Window.DialogResult%2A> для `true`.</span><span class="sxs-lookup"><span data-stu-id="7a718-251">However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`.</span></span> <span data-ttu-id="7a718-252">Необходимо вручную написать следующий код, обычно из <xref:System.Windows.Controls.Primitives.ButtonBase.Click> обработчик событий для кнопки по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-252">You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.</span></span>  
  
 <span data-ttu-id="7a718-253"><xref:System.Windows.Window.DialogResult%2A> является `null` при отображении диалогового но принятые ни отменена.</span><span class="sxs-lookup"><span data-stu-id="7a718-253"><xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.</span></span>  
  
 <span data-ttu-id="7a718-254">После закрытия диалогового окна можно получить результат диалогового окна из значения, возвращенного <xref:System.Windows.Window.ShowDialog%2A> метод, или путем проверки <xref:System.Windows.Window.DialogResult%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-254">After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.</span></span>  
  
 <span data-ttu-id="7a718-255"><xref:System.Windows.Window.DialogResult%2A> можно задать только при <xref:System.Windows.Window> открывается путем вызова его <xref:System.Windows.Window.ShowDialog%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7a718-255"><xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-256">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-256">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-257">Приведенный ниже показано, как настроить кнопку "ОК" и "Отмена" для возврата соответствующего <xref:System.Windows.Window.DialogResult%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-257">The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 [!code-xaml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  
  
 [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]
 [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-258"><see cref="P:System.Windows.Window.DialogResult" /> задан, до того как окно открывается путем вызова <see cref="M:System.Windows.Window.ShowDialog" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-258"><see cref="P:System.Windows.Window.DialogResult" /> is set before a window is opened by calling <see cref="M:System.Windows.Window.ShowDialog" />.</span></span>  
  
<span data-ttu-id="7a718-259">-или-</span><span class="sxs-lookup"><span data-stu-id="7a718-259">-or-</span></span> 
 <span data-ttu-id="7a718-260"><see cref="P:System.Windows.Window.DialogResult" /> задан для окна, которое открывается путем вызова <see cref="M:System.Windows.Window.Show" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-260"><see cref="P:System.Windows.Window.DialogResult" /> is set on a window that is opened by calling <see cref="M:System.Windows.Window.Show" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DpiChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DpiChangedEventHandler DpiChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DpiChangedEventHandler DpiChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.DpiChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChanged As DpiChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DpiChangedEventHandler ^ DpiChanged;" />
      <MemberSignature Language="F#" Value="member this.DpiChanged : System.Windows.DpiChangedEventHandler " Usage="member this.DpiChanged : System.Windows.DpiChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DpiChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-261">Происходит после изменения значения DPI для экрана, на котором отображается Window.</span><span class="sxs-lookup"><span data-stu-id="7a718-261">Occurs after the DPI of the screen on which the Window is displayed changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent DpiChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent DpiChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.DpiChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DpiChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ DpiChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable DpiChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.Window.DpiChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-262"><see cref="T:System.Windows.RoutedEvent" />, если разрешение (DPI) экрана Window изменяется.</span><span class="sxs-lookup"><span data-stu-id="7a718-262">A <see cref="T:System.Windows.RoutedEvent" /> for when the DPI of the screen the Window is on changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragMove">
      <MemberSignature Language="C#" Value="public void DragMove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DragMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.DragMove" />
      <MemberSignature Language="VB.NET" Value="Public Sub DragMove ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DragMove();" />
      <MemberSignature Language="F#" Value="member this.DragMove : unit -&gt; unit" Usage="window.DragMove " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-263">Позволяет перетаскивать окно мышью с зажатой левой кнопкой над открытой частью клиентской области окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-263">Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-264">Левая кнопка мыши должно быть работу, если <xref:System.Windows.Window.DragMove%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-264">The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called.</span></span> <span data-ttu-id="7a718-265">Один из способов определить, когда нажата левая кнопка мыши — для обработки <xref:System.Windows.UIElement.MouseLeftButtonDown> событий.</span><span class="sxs-lookup"><span data-stu-id="7a718-265">One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.</span></span>  
  
 <span data-ttu-id="7a718-266">Когда <xref:System.Windows.Window.DragMove%2A> вызывается слева должны нажата кнопка мыши над открытой клиентской области окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-266">When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-267">Этот метод не может вызываться, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-267">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-268">В следующем примере показано, как переопределить <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> для вызова <xref:System.Windows.Window.DragMove%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-268">The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.</span></span>  
  
 [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]
 [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-269">Левая кнопка мыши не нажата.</span><span class="sxs-lookup"><span data-stu-id="7a718-269">The left mouse button is not down.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-270">для разрешения для перетаскивания окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-270">for permission to drag a window.</span></span> <span data-ttu-id="7a718-271">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-271">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="E:System.Windows.Window.LocationChanged" />
      </Docs>
    </Member>
    <Member MemberName="GetWindow">
      <MemberSignature Language="C#" Value="public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Window GetWindow(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Window ^ GetWindow(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="static member GetWindow : System.Windows.DependencyObject -&gt; System.Windows.Window" Usage="System.Windows.Window.GetWindow dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="7a718-272">Объект зависимостей.</span><span class="sxs-lookup"><span data-stu-id="7a718-272">The dependency object.</span></span></param>
        <summary><span data-ttu-id="7a718-273">Возвращает ссылку на объект <see cref="T:System.Windows.Window" />, содержащий дерево содержимого, в котором расположен объект зависимостей.</span><span class="sxs-lookup"><span data-stu-id="7a718-273">Returns a reference to the <see cref="T:System.Windows.Window" /> object that hosts the content tree within which the dependency object is located.</span></span></summary>
        <returns><span data-ttu-id="7a718-274">Ссылка <see cref="T:System.Windows.Window" /> на окно-хранилище.</span><span class="sxs-lookup"><span data-stu-id="7a718-274">A <see cref="T:System.Windows.Window" /> reference to the host window.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a718-275">Параметр <paramref name="dependencyObject" /> имеет значение null.</span><span class="sxs-lookup"><span data-stu-id="7a718-275"><paramref name="dependencyObject" /> is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="window.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-276">Делает окно невидимым.</span><span class="sxs-lookup"><span data-stu-id="7a718-276">Makes a window invisible.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-277">Окно закрывается, не был скрыт и ни одна из <xref:System.Windows.Window.Closing> , ни <xref:System.Windows.Window.Closed> события.</span><span class="sxs-lookup"><span data-stu-id="7a718-277">A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised.</span></span> <span data-ttu-id="7a718-278">Вместо этого окна <xref:System.Windows.UIElement.Visibility%2A> свойству <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7a718-278">Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility.Hidden?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7a718-279">Если окно приложения <xref:System.Windows.Application.MainWindow%2A> и приложения <xref:System.Windows.Application.ShutdownMode%2A> является <xref:System.Windows.ShutdownMode.OnMainWindowClose>, приложение не завершает работу.</span><span class="sxs-lookup"><span data-stu-id="7a718-279">If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down.</span></span> <span data-ttu-id="7a718-280">Аналогичным образом, приложение не завершена, если окно является окном только и режим завершения работы приложения является <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span><span class="sxs-lookup"><span data-stu-id="7a718-280">Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.</span></span>  
  
 <span data-ttu-id="7a718-281">Если вы хотите показать или скрыть окно несколько раз в течение времени существования приложения, и вы не хотите повторно создать экземпляр окна при каждом отображении, можно обрабатывать <xref:System.Windows.Window.Closing> событий, отменить его, а также вызвать <xref:System.Windows.Window.Hide%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="7a718-281">If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method.</span></span> <span data-ttu-id="7a718-282">Затем можно вызвать <xref:System.Windows.Window.Show%2A> на тот же экземпляр, чтобы снова открыть его.</span><span class="sxs-lookup"><span data-stu-id="7a718-282">Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-283">Метод <see cref="M:System.Windows.Window.Hide" /> вызывается для окна, которое закрывается (<see cref="E:System.Windows.Window.Closing" />) или закрыто (<see cref="E:System.Windows.Window.Closed" />).</span><span class="sxs-lookup"><span data-stu-id="7a718-283"><see cref="M:System.Windows.Window.Hide" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <altmember cref="M:System.Windows.Window.Show" />
        <altmember cref="M:System.Windows.Window.ShowDialog" />
        <altmember cref="M:System.Windows.Window.Close" />
      </Docs>
    </Member>
    <Member MemberName="Icon">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ImageSource Icon { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.ImageSource Icon" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Icon" />
      <MemberSignature Language="VB.NET" Value="Public Property Icon As ImageSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::ImageSource ^ Icon { System::Windows::Media::ImageSource ^ get(); void set(System::Windows::Media::ImageSource ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Icon : System.Windows.Media.ImageSource with get, set" Usage="System.Windows.Window.Icon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ImageSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-284">Получение или установка значка окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-284">Gets or sets a window's icon.</span></span></summary>
        <value><span data-ttu-id="7a718-285">Объект <see cref="T:System.Windows.Media.ImageSource" />, представляющий значок.</span><span class="sxs-lookup"><span data-stu-id="7a718-285">An <see cref="T:System.Windows.Media.ImageSource" /> object that represents the icon.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-286">Автономные приложения Windows Presentation Foundation (WPF) имеет два типа значков:</span><span class="sxs-lookup"><span data-stu-id="7a718-286">Windows Presentation Foundation (WPF) standalone applications have two types of icons:</span></span>  
  
-   <span data-ttu-id="7a718-287">Значок одной сборки, который задается с помощью `<ApplicationIcon>` файл сборки свойство в проекте приложения.</span><span class="sxs-lookup"><span data-stu-id="7a718-287">One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file.</span></span> <span data-ttu-id="7a718-288">Этот значок используется в качестве значка на рабочем столе для сборки.</span><span class="sxs-lookup"><span data-stu-id="7a718-288">This icon is used as the desktop icon for an assembly.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7a718-289">При отладке в Visual Studio, значок может не отображаться из-за процесс размещения.</span><span class="sxs-lookup"><span data-stu-id="7a718-289">When debugging in Visual Studio, your icon may not appear due to the hosting process.</span></span> <span data-ttu-id="7a718-290">Если вы запустите исполняемый файл, появится значок.</span><span class="sxs-lookup"><span data-stu-id="7a718-290">If you run the executable, the icon will appear.</span></span> <span data-ttu-id="7a718-291">Дополнительные сведения см. в статье [Ведущий процесс (vshost.exe)](https://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span><span class="sxs-lookup"><span data-stu-id="7a718-291">For more information, see [Hosting Process (vshost.exe)](https://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).</span></span>  
  
-   <span data-ttu-id="7a718-292">Один значок каждого окна, который задается параметром <xref:System.Windows.Window.Icon%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-292">One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>.</span></span> <span data-ttu-id="7a718-293">Для каждого окна этот значок используется в заголовке окна кнопке панели задач и в его запись списка выбора приложения ALT-TAB.</span><span class="sxs-lookup"><span data-stu-id="7a718-293">For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.</span></span>  
  
 <span data-ttu-id="7a718-294">Окно WPF всегда отображается значок.</span><span class="sxs-lookup"><span data-stu-id="7a718-294">A WPF window always displays an icon.</span></span> <span data-ttu-id="7a718-295">Если значение не указано, задав <xref:System.Windows.Window.Icon%2A>, WPF выбирает значок для отображения на основе следующих правил:</span><span class="sxs-lookup"><span data-stu-id="7a718-295">When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, WPF chooses an icon to display based on the following rules:</span></span>  
  
1.  <span data-ttu-id="7a718-296">Используйте значок сборки, если указан.</span><span class="sxs-lookup"><span data-stu-id="7a718-296">Use the assembly icon, if specified.</span></span>  
  
2.  <span data-ttu-id="7a718-297">Если значок сборки не указан, используется значок по умолчанию Microsoft Windows.</span><span class="sxs-lookup"><span data-stu-id="7a718-297">If the assembly icon is not specified, use the default Microsoft Windows icon.</span></span>  
  
 <span data-ttu-id="7a718-298">Если вы используете <xref:System.Windows.Window.Icon%2A> указать значок, пользовательских окон, можно восстановить стандартный значок приложения, задав <xref:System.Windows.Window.Icon%2A> для `null`.</span><span class="sxs-lookup"><span data-stu-id="7a718-298">If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.</span></span>  
  
 <span data-ttu-id="7a718-299">Один значок может использоваться различными способами в Windows, включая отображение в строке заголовка окна, панели задач для окна, список выбора файлов ALT + TAB.</span><span class="sxs-lookup"><span data-stu-id="7a718-299">A single icon can be used in a variety of ways in Windows, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.</span></span> <span data-ttu-id="7a718-300">Каждый из них отображается значок, с помощью другого размера; значок 16 x 16 пикселей отображается в строке заголовка окна и на панели задач, а в списке выбора файлов ALT + TAB значок в виде 32 x 32 точки.</span><span class="sxs-lookup"><span data-stu-id="7a718-300">Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.</span></span> <span data-ttu-id="7a718-301">Некоторые приложения, такие как [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], предоставляют **представление** меню, в котором можно выбрать размер значка, который вы хотите просмотреть.</span><span class="sxs-lookup"><span data-stu-id="7a718-301">Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.</span></span>  
  
 <span data-ttu-id="7a718-302">Предназначенные для различных размеров экрана, файл значка состоит из одного или нескольких реальных значков, каждый из которых представляет версию значок, который предназначен для определенного размера и глубины цвета.</span><span class="sxs-lookup"><span data-stu-id="7a718-302">To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.</span></span> <span data-ttu-id="7a718-303">Например один значок может иметь только один значок 16 x 16 пикселей с 16 цветами, а другой — 16 x 16 пикселей и значки 32 x 32 точки с 256 цветов и 16 цветов.</span><span class="sxs-lookup"><span data-stu-id="7a718-303">For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.</span></span>  
  
 <span data-ttu-id="7a718-304">Если существует значки для всех возможных размеров и цветов в файле значка, <xref:System.Windows.Window> будет использовать соответствующий значок.</span><span class="sxs-lookup"><span data-stu-id="7a718-304">If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon.</span></span> <span data-ttu-id="7a718-305">Если файл значка содержит только подмножество всех возможных значков, <xref:System.Windows.Window> используется наиболее подходящий значок "Далее" в порядке уменьшения размеров и цветов.</span><span class="sxs-lookup"><span data-stu-id="7a718-305">If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.</span></span>  
  
 <span data-ttu-id="7a718-306">Результатом является то, что значок будет всегда использоваться <xref:System.Windows.Window>, несмотря на то, что значок, используемый должно быть предназначено для не требуется размера и глубины цвета.</span><span class="sxs-lookup"><span data-stu-id="7a718-306">The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth.</span></span> <span data-ttu-id="7a718-307">Например значок 16 x 16 пикселей с 16 цветами может использоваться для отображения как значок в виде 32 x 32 точки с 256 цветами.</span><span class="sxs-lookup"><span data-stu-id="7a718-307">For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.</span></span> <span data-ttu-id="7a718-308">Это может привести к нежелательным визуальные эффекты, такие как пиксиляцию, но можно избежать, создавая значки для всех целевых размеров и цветов.</span><span class="sxs-lookup"><span data-stu-id="7a718-308">This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-309">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-309">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIcon"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-310">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-310">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-311">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-311">Identifier field</span></span>|<xref:System.Windows.Window.IconProperty>|  
|<span data-ttu-id="7a718-312">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-312">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-313">None</span><span class="sxs-lookup"><span data-stu-id="7a718-313">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7a718-314">В следующем примере показано, как задать значок окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-314">The following example shows how to set a window icon.</span></span>  
  
 [!code-xaml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  
  
 [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]
 [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-315">для разрешения для выбора значка.</span><span class="sxs-lookup"><span data-stu-id="7a718-315">for permission to set the icon.</span></span> <span data-ttu-id="7a718-316">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-316">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IconProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IconProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IconProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IconProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IconProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IconProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IconProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IconProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-317">Определяет свойство зависимостей <see cref="P:System.Windows.Window.Icon" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-317">Identifies the <see cref="P:System.Windows.Window.Icon" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.IsActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsActive : bool" Usage="System.Windows.Window.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-318">Возвращает значение, указывающее, активно ли окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-318">Gets a value that indicates whether the window is active.</span></span></summary>
        <value><span data-ttu-id="7a718-319"><see langword="true" />, если окно активно; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-319"><see langword="true" /> if the window is active; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7a718-320">Значение по умолчанию — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-320">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-321">Активное окно пользователя текущее окно переднего плана и имеет фокус, что подтверждается active внешний вид строки заголовка.</span><span class="sxs-lookup"><span data-stu-id="7a718-321">An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.</span></span> <span data-ttu-id="7a718-322">Активного окна также будет самый верхний всех окон верхнего уровня, которые не задан явным образом <xref:System.Windows.Window.Topmost%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-322">An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.</span></span>  
  
<a name="dependencyPropertyInfo_WindowIsActive"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-323">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-323">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-324">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-324">Identifier field</span></span>|<xref:System.Windows.Window.IsActiveProperty>|  
|<span data-ttu-id="7a718-325">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-325">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-326">None</span><span class="sxs-lookup"><span data-stu-id="7a718-326">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.Activate" />
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="IsActiveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsActiveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsActiveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.IsActiveProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsActiveProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsActiveProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsActiveProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.IsActiveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-327">Определяет свойство зависимостей <see cref="P:System.Windows.Window.IsActive" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-327">Identifies the <see cref="P:System.Windows.Window.IsActive" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Left : double with get, set" Usage="System.Windows.Window.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-328">Возвращает или задает позицию левого края окна относительно рабочего стола.</span><span class="sxs-lookup"><span data-stu-id="7a718-328">Gets or sets the position of the window's left edge, in relation to the desktop.</span></span></summary>
        <value><span data-ttu-id="7a718-329">Позиция левого края окна в логических единицах (1/96 дюйма).</span><span class="sxs-lookup"><span data-stu-id="7a718-329">The position of the window's left edge, in logical units (1/96th of an inch).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-330">Когда <xref:System.Windows.Window> свернуто или развернуто, это значение соответствует точкой левого края восстановления <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="7a718-330">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="7a718-331">Это свойство нельзя установить через style.</span><span class="sxs-lookup"><span data-stu-id="7a718-331">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="7a718-332">Если вы не укажете значение, <xref:System.Windows.Window.Left%2A> присваивается значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-332">If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value.</span></span> <span data-ttu-id="7a718-333">Можно также указать значение по умолчанию, задав <xref:System.Windows.Window.Left%2A> для <xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="7a718-333">You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="7a718-334">Ни <xref:System.Double.NegativeInfinity> , ни <xref:System.Double.PositiveInfinity> является допустимым значением для <xref:System.Windows.Window.Left%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-334">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-335">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-335">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowLeft"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-336">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-336">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-337">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-337">Identifier field</span></span>|<xref:System.Windows.Window.LeftProperty>|  
|<span data-ttu-id="7a718-338">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-338">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-339">None</span><span class="sxs-lookup"><span data-stu-id="7a718-339">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="LeftProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LeftProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LeftProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.LeftProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LeftProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LeftProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LeftProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.LeftProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-340">Определяет свойство зависимостей <see cref="P:System.Windows.Window.Left" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-340">Identifies the <see cref="P:System.Windows.Window.Left" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-341">Происходит при изменении местоположения окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-341">Occurs when the window's location changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-342">Расположение окна изменяется, когда:</span><span class="sxs-lookup"><span data-stu-id="7a718-342">A window's location changes when:</span></span>  
  
-   <span data-ttu-id="7a718-343">Пользователь перемещает окно, перетащив его с помощью заголовка окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-343">A user moves a window by dragging it with the window's title bar.</span></span>  
  
-   <span data-ttu-id="7a718-344">После перемещения окна <xref:System.Windows.Window.DragMove%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-344">A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.</span></span>  
  
-   <span data-ttu-id="7a718-345">Либо <xref:System.Windows.Window.Left%2A> или <xref:System.Windows.Window.Top%2A> свойству программным способом.</span><span class="sxs-lookup"><span data-stu-id="7a718-345">Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.</span></span>  
  
-   <span data-ttu-id="7a718-346">**Переместить** выбирается элемент меню в системном меню окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-346">The **Move** menu item of a window's System menu is chosen.</span></span>  
  
-   <span data-ttu-id="7a718-347"><xref:System.Windows.Window.WindowState%2A> Изменении свойства.</span><span class="sxs-lookup"><span data-stu-id="7a718-347">The <xref:System.Windows.Window.WindowState%2A> property is changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.Window.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-348">Возвращает перечислитель для логических дочерних элементов окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-348">Gets an enumerator for a window's logical child elements.</span></span></summary>
        <value><span data-ttu-id="7a718-349">Перечислитель <see cref="T:System.Collections.IEnumerator" /> для логических дочерних элементов окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-349">An <see cref="T:System.Collections.IEnumerator" /> a window's logical child elements.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.FrameworkElement.LogicalChildren" />
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="window.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="7a718-350">Объект <see cref="T:System.Windows.Size" />, отражающий доступный размер, который данное окно может выделить своим дочерним окнам.</span><span class="sxs-lookup"><span data-stu-id="7a718-350">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child.</span></span> <span data-ttu-id="7a718-351">Можно задать бесконечное значение, указав, что окно будет масштабироваться в соответствии с любым содержимым.</span><span class="sxs-lookup"><span data-stu-id="7a718-351">Infinity can be given as a value to indicate that the window will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="7a718-352">Переопределив данный метод, можно измерить размер окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-352">Override this method to measure the size of a window.</span></span></summary>
        <returns><span data-ttu-id="7a718-353">Объект <see cref="T:System.Windows.Size" />, отражающий размер, потребности в котором данное окно определяет во время структурирования, основываясь на вычисленных размерах дочерних окон.</span><span class="sxs-lookup"><span data-stu-id="7a718-353">A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-354"><xref:System.Windows.Window.MeasureOverride%2A> не вызывается, когда <xref:System.Windows.UIElement.Visibility%2A> свойство имеет значение <xref:System.Windows.Visibility.Collapsed>.</span><span class="sxs-lookup"><span data-stu-id="7a718-354"><xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>.</span></span> <span data-ttu-id="7a718-355">Если значение <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Visibility.Hidden> или <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> вызывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-355">If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-356">Когда либо <xref:System.Windows.Window.Show%2A> или <xref:System.Windows.Window.ShowDialog%2A> вызываются, <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Window> присваивается <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="7a718-356">When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
      </Docs>
    </Member>
    <Member MemberName="OnActivated">
      <MemberSignature Language="C#" Value="protected virtual void OnActivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnActivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnActivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnActivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnActivated : EventArgs -&gt; unit&#xA;override this.OnActivated : EventArgs -&gt; unit" Usage="window.OnActivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-357">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-357">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-358">Создает событие <see cref="E:System.Windows.Window.Activated" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-358">Raises the <see cref="E:System.Windows.Window.Activated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-359">Метод <xref:System.Windows.Window.OnActivated%2A> формирует событие <xref:System.Windows.Window.Activated>.</span><span class="sxs-lookup"><span data-stu-id="7a718-359"><xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.</span></span>  
  
 <span data-ttu-id="7a718-360">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnActivated%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-360">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>.</span></span> <span data-ttu-id="7a718-361">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnActivated%2A> в базовом классе, если <xref:System.Windows.Window.Activated> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-361">The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnClosed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosed : EventArgs -&gt; unit&#xA;override this.OnClosed : EventArgs -&gt; unit" Usage="window.OnClosed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-362">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-362">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-363">Создает событие <see cref="E:System.Windows.Window.Closed" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-363">Raises the <see cref="E:System.Windows.Window.Closed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-364">Метод <xref:System.Windows.Window.OnClosed%2A> формирует событие <xref:System.Windows.Window.Closed>.</span><span class="sxs-lookup"><span data-stu-id="7a718-364"><xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.</span></span>  
  
 <span data-ttu-id="7a718-365">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnClosed%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-365">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>.</span></span> <span data-ttu-id="7a718-366">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnClosed%2A> в базовом классе, если <xref:System.Windows.Window.Closed> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-366">The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosing(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClosing (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClosing(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnClosing : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="window.OnClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-367">Объект <see cref="T:System.ComponentModel.CancelEventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-367">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-368">Создает событие <see cref="E:System.Windows.Window.Closing" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-368">Raises the <see cref="E:System.Windows.Window.Closing" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-369">Метод <xref:System.Windows.Window.OnClosing%2A> формирует событие <xref:System.Windows.Window.Closing>.</span><span class="sxs-lookup"><span data-stu-id="7a718-369"><xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.</span></span>  
  
 <span data-ttu-id="7a718-370">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnClosing%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-370">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>.</span></span> <span data-ttu-id="7a718-371">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnClosing%2A> в базовом классе, если <xref:System.Windows.Window.Closing> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-371">The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnClosed(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnContentChanged">
      <MemberSignature Language="C#" Value="protected override void OnContentChanged (object oldContent, object newContent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnContentChanged(object oldContent, object newContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnContentChanged (oldContent As Object, newContent As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnContentChanged(System::Object ^ oldContent, System::Object ^ newContent);" />
      <MemberSignature Language="F#" Value="override this.OnContentChanged : obj * obj -&gt; unit" Usage="window.OnContentChanged (oldContent, newContent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldContent" Type="System.Object" />
        <Parameter Name="newContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldContent"><span data-ttu-id="7a718-372">Ссылка на корневой элемент старого дерева содержимого.</span><span class="sxs-lookup"><span data-stu-id="7a718-372">A reference to the root of the old content tree.</span></span></param>
        <param name="newContent"><span data-ttu-id="7a718-373">Ссылка на корневой элемент нового дерева содержимого.</span><span class="sxs-lookup"><span data-stu-id="7a718-373">A reference to the root of the new content tree.</span></span></param>
        <summary><span data-ttu-id="7a718-374">Вызывается при изменении свойства <see cref="P:System.Windows.Controls.ContentControl.Content" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-374">Called when the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentRendered">
      <MemberSignature Language="C#" Value="protected virtual void OnContentRendered (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentRendered(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnContentRendered(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContentRendered (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContentRendered(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContentRendered : EventArgs -&gt; unit&#xA;override this.OnContentRendered : EventArgs -&gt; unit" Usage="window.OnContentRendered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-375">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-375">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-376">Создает событие <see cref="E:System.Windows.Window.ContentRendered" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-376">Raises the <see cref="E:System.Windows.Window.ContentRendered" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-377">Метод <xref:System.Windows.Window.OnContentRendered%2A> формирует событие <xref:System.Windows.Window.ContentRendered>.</span><span class="sxs-lookup"><span data-stu-id="7a718-377"><xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.</span></span>  
  
 <span data-ttu-id="7a718-378">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnContentRendered%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-378">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>.</span></span> <span data-ttu-id="7a718-379">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnContentRendered%2A> в базовом классе, если <xref:System.Windows.Window.ContentRendered> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-379">The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberSignature Language="F#" Value="override this.OnCreateAutomationPeer : unit -&gt; System.Windows.Automation.Peers.AutomationPeer" Usage="window.OnCreateAutomationPeer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-380">Создает и возвращает объект <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> для этого объекта <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-380">Creates and returns a <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span></span></summary>
        <returns><span data-ttu-id="7a718-381">Объект <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> для этого объекта <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-381">A <see cref="T:System.Windows.Automation.Peers.WindowAutomationPeer" /> object for this <see cref="T:System.Windows.Window" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-382">Этот метод переопределяет метод <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-382">This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeactivated">
      <MemberSignature Language="C#" Value="protected virtual void OnDeactivated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeactivated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDeactivated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDeactivated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDeactivated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDeactivated : EventArgs -&gt; unit&#xA;override this.OnDeactivated : EventArgs -&gt; unit" Usage="window.OnDeactivated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-383">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-383">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-384">Создает событие <see cref="E:System.Windows.Window.Deactivated" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-384">Raises the <see cref="E:System.Windows.Window.Deactivated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-385">Метод <xref:System.Windows.Window.OnDeactivated%2A> формирует событие <xref:System.Windows.Window.Deactivated>.</span><span class="sxs-lookup"><span data-stu-id="7a718-385"><xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.</span></span>  
  
 <span data-ttu-id="7a718-386">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnDeactivated%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-386">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>.</span></span> <span data-ttu-id="7a718-387">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnDeactivated%2A> в базовом классе, если <xref:System.Windows.Window.Deactivated> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-387">The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.OnActivated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChanged">
      <MemberSignature Language="C#" Value="protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDpiChanged(valuetype System.Windows.DpiScale oldDpi, valuetype System.Windows.DpiScale newDpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDpiChanged (oldDpi As DpiScale, newDpi As DpiScale)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDpiChanged(System::Windows::DpiScale oldDpi, System::Windows::DpiScale newDpi);" />
      <MemberSignature Language="F#" Value="override this.OnDpiChanged : System.Windows.DpiScale * System.Windows.DpiScale -&gt; unit" Usage="window.OnDpiChanged (oldDpi, newDpi)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldDpi" Type="System.Windows.DpiScale" />
        <Parameter Name="newDpi" Type="System.Windows.DpiScale" />
      </Parameters>
      <Docs>
        <param name="oldDpi"><span data-ttu-id="7a718-388">Предыдущий параметр масштабирования.</span><span class="sxs-lookup"><span data-stu-id="7a718-388">The previous DPI scale setting.</span></span></param>
        <param name="newDpi"><span data-ttu-id="7a718-389">Новый параметр масштабирования.</span><span class="sxs-lookup"><span data-stu-id="7a718-389">The new DPI scale setting.</span></span></param>
        <summary><span data-ttu-id="7a718-390">Вызывается, когда изменяется параметр "точек на дюйм", по которому определяется разрешение окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-390">Called when the DPI at which this window is rendered changes.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="window.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-391">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-391">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-392">Создает событие <see cref="E:System.Windows.Window.LocationChanged" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-392">Raises the <see cref="E:System.Windows.Window.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-393">Метод <xref:System.Windows.Window.OnLocationChanged%2A> формирует событие <xref:System.Windows.Window.LocationChanged>.</span><span class="sxs-lookup"><span data-stu-id="7a718-393"><xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.</span></span>  
  
 <span data-ttu-id="7a718-394">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnLocationChanged%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-394">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>.</span></span> <span data-ttu-id="7a718-395">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnLocationChanged%2A> в базовом классе, если <xref:System.Windows.Window.LocationChanged> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-395">The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
        <altmember cref="P:System.Windows.Window.Top" />
      </Docs>
    </Member>
    <Member MemberName="OnManipulationBoundaryFeedback">
      <MemberSignature Language="C#" Value="protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnManipulationBoundaryFeedback(class System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnManipulationBoundaryFeedback (e As ManipulationBoundaryFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnManipulationBoundaryFeedback(System::Windows::Input::ManipulationBoundaryFeedbackEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnManipulationBoundaryFeedback : System.Windows.Input.ManipulationBoundaryFeedbackEventArgs -&gt; unit" Usage="window.OnManipulationBoundaryFeedback e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Input.ManipulationBoundaryFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-396">Данные для события.</span><span class="sxs-lookup"><span data-stu-id="7a718-396">The data for the event.</span></span></param>
        <summary><span data-ttu-id="7a718-397">Вызывается, когда происходит событие <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-397">Called when the <see cref="E:System.Windows.UIElement.ManipulationBoundaryFeedback" /> event occurs.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-398">Эта реализация не изменяет состояние обработки ( <xref:System.Windows.RoutedEventArgs.Handled%2A> свойство) из <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-398">This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7a718-399">При переопределении <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, всегда вызывать базовую реализацию вашей <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> реализации.</span><span class="sxs-lookup"><span data-stu-id="7a718-399">If you override <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" />, always call the base implementation in your <see cref="M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)" /> implementation.</span></span> <span data-ttu-id="7a718-400">Сбой вызова базовой реализации предотвращает обработки события, что может повлиять на поведение во время выполнения конечного класса базовых классов.</span><span class="sxs-lookup"><span data-stu-id="7a718-400">Failure to call the base implementation prevents base classes from handling the event, which might change the run-time behavior of the final class.</span></span> <span data-ttu-id="7a718-401">В зависимости от требований можно вызвать базовую реализацию до или после специальной обработки.</span><span class="sxs-lookup"><span data-stu-id="7a718-401">You can call the base implementation either before or after your special handling, depending on your requirements.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSourceInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnSourceInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSourceInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnSourceInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSourceInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSourceInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSourceInitialized : EventArgs -&gt; unit&#xA;override this.OnSourceInitialized : EventArgs -&gt; unit" Usage="window.OnSourceInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-402">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-402">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-403">Создает событие <see cref="E:System.Windows.Window.SourceInitialized" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-403">Raises the <see cref="E:System.Windows.Window.SourceInitialized" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-404">Метод <xref:System.Windows.Window.OnSourceInitialized%2A> формирует событие <xref:System.Windows.Window.SourceInitialized>.</span><span class="sxs-lookup"><span data-stu-id="7a718-404"><xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.</span></span>  
  
 <span data-ttu-id="7a718-405">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnSourceInitialized%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-405">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>.</span></span> <span data-ttu-id="7a718-406">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnSourceInitialized%2A> в базовом классе, если <xref:System.Windows.Window.SourceInitialized> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-406">The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStateChanged : EventArgs -&gt; unit&#xA;override this.OnStateChanged : EventArgs -&gt; unit" Usage="window.OnStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7a718-407">Объект класса <see cref="T:System.EventArgs" />, содержащий данные события.</span><span class="sxs-lookup"><span data-stu-id="7a718-407">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="7a718-408">Создает событие <see cref="E:System.Windows.Window.StateChanged" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-408">Raises the <see cref="E:System.Windows.Window.StateChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-409">Метод <xref:System.Windows.Window.OnStateChanged%2A> формирует событие <xref:System.Windows.Window.StateChanged>.</span><span class="sxs-lookup"><span data-stu-id="7a718-409"><xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.</span></span>  
  
 <span data-ttu-id="7a718-410">Тип, который является производным от <xref:System.Windows.Window> может переопределить <xref:System.Windows.Window.OnStateChanged%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-410">A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>.</span></span> <span data-ttu-id="7a718-411">Переопределенный метод должен вызвать <xref:System.Windows.Window.OnStateChanged%2A> в базовом классе, если <xref:System.Windows.Window.StateChanged> должен вызываться.</span><span class="sxs-lookup"><span data-stu-id="7a718-411">The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualChildrenChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualChildrenChanged(class System.Windows.DependencyObject visualAdded, class System.Windows.DependencyObject visualRemoved) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualChildrenChanged (visualAdded As DependencyObject, visualRemoved As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualChildrenChanged(System::Windows::DependencyObject ^ visualAdded, System::Windows::DependencyObject ^ visualRemoved);" />
      <MemberSignature Language="F#" Value="override this.OnVisualChildrenChanged : System.Windows.DependencyObject * System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualChildrenChanged (visualAdded, visualRemoved)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualAdded" Type="System.Windows.DependencyObject" />
        <Parameter Name="visualRemoved" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="visualAdded"><span data-ttu-id="7a718-412">Объект <see cref="T:System.Windows.Media.Visual" />, добавленный в коллекцию.</span><span class="sxs-lookup"><span data-stu-id="7a718-412">The <see cref="T:System.Windows.Media.Visual" /> that was added to the collection.</span></span></param>
        <param name="visualRemoved"><span data-ttu-id="7a718-413">Объект <see cref="T:System.Windows.Media.Visual" />, который был удален из коллекции.</span><span class="sxs-lookup"><span data-stu-id="7a718-413">The <see cref="T:System.Windows.Media.Visual" /> that was removed from the collection.</span></span></param>
        <summary><span data-ttu-id="7a718-414">Вызывается при изменении коллекции <see cref="T:System.Windows.Media.VisualCollection" /> объекта <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-414">Called when the <see cref="T:System.Windows.Media.VisualCollection" /> of this <see cref="T:System.Windows.Window" /> object is modified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides NotOverridable Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="window.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="7a718-415">Предыдущий родительский элемент.</span><span class="sxs-lookup"><span data-stu-id="7a718-415">The previous parent.</span></span> <span data-ttu-id="7a718-416">Устанавливается на null, если у объекта <see cref="T:System.Windows.DependencyObject" /> не было предыдущего родителя.</span><span class="sxs-lookup"><span data-stu-id="7a718-416">Set to null if the <see cref="T:System.Windows.DependencyObject" /> did not have a previous parent.</span></span></param>
        <summary><span data-ttu-id="7a718-417">Вызывается при изменении родителя окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-417">Called when the parent of the window is changed.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OwnedWindows">
      <MemberSignature Language="C#" Value="public System.Windows.WindowCollection OwnedWindows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.WindowCollection OwnedWindows" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.OwnedWindows" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnedWindows As WindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowCollection ^ OwnedWindows { System::Windows::WindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnedWindows : System.Windows.WindowCollection" Usage="System.Windows.Window.OwnedWindows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-418">Возвращает коллекцию окон, владельцем которых является данное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-418">Gets a collection of windows for which this window is the owner.</span></span></summary>
        <value><span data-ttu-id="7a718-419">Коллекция <see cref="T:System.Windows.WindowCollection" />, содержащая ссылки на окна, владельцем которых является данное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-419">A <see cref="T:System.Windows.WindowCollection" /> that contains references to the windows for which this window is the owner.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-420">Собственное окно является одним которого <xref:System.Windows.Window.Owner%2A> свойству со ссылкой на другое окно, который известен как окно-владелец.</span><span class="sxs-lookup"><span data-stu-id="7a718-420">An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window.</span></span> <span data-ttu-id="7a718-421">Чтобы найти все окна, которому принадлежит окно-владелец, вы можете перечислить <xref:System.Windows.WindowCollection> , возвращаемый <xref:System.Windows.Window.OwnedWindows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-421">To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-422">В следующем примере показано, как перечислить <xref:System.Windows.Window.OwnedWindows%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-422">The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public System.Windows.Window Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Window Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Owner" />
      <MemberSignature Language="VB.NET" Value="Public Property Owner As Window" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Window ^ Owner { System::Windows::Window ^ get(); void set(System::Windows::Window ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Owner : System.Windows.Window with get, set" Usage="System.Windows.Window.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Window</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-423">Возвращает или задает окно <see cref="T:System.Windows.Window" />, которое владеет данным окном <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-423">Gets or sets the <see cref="T:System.Windows.Window" /> that owns this <see cref="T:System.Windows.Window" />.</span></span></summary>
        <value><span data-ttu-id="7a718-424">Объект <see cref="T:System.Windows.Window" />, представляющий владельца данного объекта <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-424">A <see cref="T:System.Windows.Window" /> object that represents the owner of this <see cref="T:System.Windows.Window" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-425">При открытии дочернее окно, родительское окно путем вызова <xref:System.Windows.Window.ShowDialog%2A>, явную связь устанавливается между родительским и дочерним окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-425">When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window.</span></span> <span data-ttu-id="7a718-426">Эта связь накладывает определенное поведение, в том числе по отношению к минимизации, максимизации и восстановление.</span><span class="sxs-lookup"><span data-stu-id="7a718-426">This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.</span></span>  
  
 <span data-ttu-id="7a718-427">При создании дочернего окна, родительское окно путем вызова <xref:System.Windows.Window.Show%2A>, тем не менее, дочернее окно не имеет связи с родительским окном.</span><span class="sxs-lookup"><span data-stu-id="7a718-427">When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window.</span></span> <span data-ttu-id="7a718-428">Это означает следующее.</span><span class="sxs-lookup"><span data-stu-id="7a718-428">This means that:</span></span>  
  
-   <span data-ttu-id="7a718-429">Дочернее окно не имеет ссылку на родительское окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-429">The child window does not have a reference to the parent window.</span></span>  
  
-   <span data-ttu-id="7a718-430">Поведение дочернего окна не зависит от поведения родительского окна. любое окно может перекрывать другое или сворачиваться, разворачиваться и восстанавливаться независимо от другого.</span><span class="sxs-lookup"><span data-stu-id="7a718-430">The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.</span></span>  
  
 <span data-ttu-id="7a718-431">Чтобы можно было создать связь между дочерним и родительского окна, <xref:System.Windows.Window> поддерживает понятие владения.</span><span class="sxs-lookup"><span data-stu-id="7a718-431">To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership.</span></span> <span data-ttu-id="7a718-432">Владение при <xref:System.Windows.Window.Owner%2A> имеет значение свойства объекта window (окно во владении) со ссылкой на другое окно (окно-владелец).</span><span class="sxs-lookup"><span data-stu-id="7a718-432">Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).</span></span>  
  
 <span data-ttu-id="7a718-433">После установления этой связи проявляется следующее поведение:</span><span class="sxs-lookup"><span data-stu-id="7a718-433">Once this relationship is established, the following behaviors are exhibited:</span></span>  
  
-   <span data-ttu-id="7a718-434">Если окно-владелец сворачивается, все его собственные окна также сворачиваются.</span><span class="sxs-lookup"><span data-stu-id="7a718-434">If an owner window is minimized, all its owned windows are minimized as well.</span></span>  
  
-   <span data-ttu-id="7a718-435">Если собственное окно свернуто, ее владелец не сводится к минимуму.</span><span class="sxs-lookup"><span data-stu-id="7a718-435">If an owned window is minimized, its owner is not minimized.</span></span>  
  
-   <span data-ttu-id="7a718-436">Если развернуто окно-владелец, окну-владельцу и его собственные окна восстанавливаются.</span><span class="sxs-lookup"><span data-stu-id="7a718-436">If an owner window is maximized, both the owner window and its owned windows are restored.</span></span>  
  
-   <span data-ttu-id="7a718-437">Окно-владелец никогда не может перекрывать собственное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-437">An owner window can never cover an owned window.</span></span>  
  
-   <span data-ttu-id="7a718-438">Принадлежит windows, которые не были открыты с помощью <xref:System.Windows.Window.ShowDialog%2A> не являются модальными.</span><span class="sxs-lookup"><span data-stu-id="7a718-438">Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal.</span></span> <span data-ttu-id="7a718-439">Пользователь по-прежнему могут взаимодействовать с окну-владельцу.</span><span class="sxs-lookup"><span data-stu-id="7a718-439">The user can still interact with the owner window.</span></span>  
  
-   <span data-ttu-id="7a718-440">Если вы закроете окно-владелец, его собственные окна также будут закрыты.</span><span class="sxs-lookup"><span data-stu-id="7a718-440">If you close an owner window, its owned windows are also closed.</span></span>  
  
-   <span data-ttu-id="7a718-441">Если собственное окно был открыт с помощью окна его владельца <xref:System.Windows.Window.Show%2A>и владелец закрывается окно, окно во владении <xref:System.Windows.Window.Closing> событие не происходит.</span><span class="sxs-lookup"><span data-stu-id="7a718-441">If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.</span></span>  
  
 <span data-ttu-id="7a718-442">При открытии дочернего окна, вызвав <xref:System.Windows.Window.ShowDialog%2A>, также следует задать <xref:System.Windows.Window.Owner%2A> свойство дочернего окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-442">When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window.</span></span> <span data-ttu-id="7a718-443">Этого не сделать, ваши пользователи не смогут восстановить как дочернее окно, так и родительское окно, нажав кнопку в панели задач.</span><span class="sxs-lookup"><span data-stu-id="7a718-443">If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.</span></span> <span data-ttu-id="7a718-444">Вместо этого нажав кнопку в панели задач приведет к получению списка windows, включая дочернего и родительского окна, для них требуется выделить; восстанавливается только выбранное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-444">Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7a718-445">Также следует задать <xref:System.Windows.Window.Owner%2A> свойство на окно, которое открывается путем вызова <xref:System.Windows.Window.ShowDialog%2A> для обеспечения правильного поведения с.</span><span class="sxs-lookup"><span data-stu-id="7a718-445">You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-446">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-446">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-447">В следующем примере показано, как для установления отношений владельца/собственного.</span><span class="sxs-lookup"><span data-stu-id="7a718-447">The following example shows how to establish the owner/owned relationship.</span></span>  
  
 [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]
 [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a718-448">Окно пытается стать владельцем самого себя</span><span class="sxs-lookup"><span data-stu-id="7a718-448">A window tries to own itself</span></span> 
<span data-ttu-id="7a718-449">-или-</span><span class="sxs-lookup"><span data-stu-id="7a718-449">-or-</span></span> 
<span data-ttu-id="7a718-450">Два окна пытаются стать владельцами друг друга.</span><span class="sxs-lookup"><span data-stu-id="7a718-450">Two windows try to own each other.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-451">Свойство <see cref="P:System.Windows.Window.Owner" /> установлено на видимое окно, отображенное методом <see cref="M:System.Windows.Window.ShowDialog" /></span><span class="sxs-lookup"><span data-stu-id="7a718-451">The <see cref="P:System.Windows.Window.Owner" /> property is set on a visible window shown using <see cref="M:System.Windows.Window.ShowDialog" /></span></span>  
  
<span data-ttu-id="7a718-452">-или-</span><span class="sxs-lookup"><span data-stu-id="7a718-452">-or-</span></span> 
<span data-ttu-id="7a718-453">Свойство <see cref="P:System.Windows.Window.Owner" /> установлено на окно, которое ранее не отображалось.</span><span class="sxs-lookup"><span data-stu-id="7a718-453">The <see cref="P:System.Windows.Window.Owner" /> property is set with a window that has not been previously shown.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-454">для разрешения использования все окна и события пользовательского ввода без ограничений.</span><span class="sxs-lookup"><span data-stu-id="7a718-454">for permission to use all windows and user input events without restriction.</span></span> <span data-ttu-id="7a718-455">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-455">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Window.OwnedWindows" />
      </Docs>
    </Member>
    <Member MemberName="ResizeMode">
      <MemberSignature Language="C#" Value="public System.Windows.ResizeMode ResizeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.ResizeMode ResizeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ResizeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ResizeMode As ResizeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResizeMode ResizeMode { System::Windows::ResizeMode get(); void set(System::Windows::ResizeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeMode : System.Windows.ResizeMode with get, set" Usage="System.Windows.Window.ResizeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ResizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-456">Возвращает или задает режим изменения размеров.</span><span class="sxs-lookup"><span data-stu-id="7a718-456">Gets or sets the resize mode.</span></span></summary>
        <value><span data-ttu-id="7a718-457">Значение <see cref="T:System.Windows.ResizeMode" />, задающее режим изменения размеров.</span><span class="sxs-lookup"><span data-stu-id="7a718-457">A <see cref="T:System.Windows.ResizeMode" /> value specifying the resize mode.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-458">Ниже приведены четыре параметра:</span><span class="sxs-lookup"><span data-stu-id="7a718-458">There are four options:</span></span>  
  
-   <span data-ttu-id="7a718-459">**NoResize**.</span><span class="sxs-lookup"><span data-stu-id="7a718-459">**NoResize**.</span></span> <span data-ttu-id="7a718-460">Пользователь не может изменить размер окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-460">The user cannot resize the window.</span></span> <span data-ttu-id="7a718-461">Развернуть и свернуть поля не отображаются.</span><span class="sxs-lookup"><span data-stu-id="7a718-461">The Maximize and Minimize boxes are not shown.</span></span>  
  
-   <span data-ttu-id="7a718-462">**CanMinimize**.</span><span class="sxs-lookup"><span data-stu-id="7a718-462">**CanMinimize**.</span></span> <span data-ttu-id="7a718-463">Пользователь может только свернуть окно и восстановите ее из панели задач.</span><span class="sxs-lookup"><span data-stu-id="7a718-463">The user can only minimize the window and restore it from the taskbar.</span></span> <span data-ttu-id="7a718-464">Свернуть и развернуть отображаются, но включена только кнопка "Свернуть".</span><span class="sxs-lookup"><span data-stu-id="7a718-464">The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.</span></span>  
  
-   <span data-ttu-id="7a718-465">**CanResize**.</span><span class="sxs-lookup"><span data-stu-id="7a718-465">**CanResize**.</span></span> <span data-ttu-id="7a718-466">Пользователь имеет полную возможность изменить размер окна, с помощью свернуть и развернуть, а также перетаскиваемый контур вокруг окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-466">The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.</span></span> <span data-ttu-id="7a718-467">Свернуть и развернуть отображаются и являются.</span><span class="sxs-lookup"><span data-stu-id="7a718-467">The Minimize and Maximize boxes are shown and enabled.</span></span> <span data-ttu-id="7a718-468">(По умолчанию).</span><span class="sxs-lookup"><span data-stu-id="7a718-468">(Default).</span></span>  
  
-   <span data-ttu-id="7a718-469">**CanResizeWithGrip**.</span><span class="sxs-lookup"><span data-stu-id="7a718-469">**CanResizeWithGrip**.</span></span> <span data-ttu-id="7a718-470">Этот параметр имеет ту же функциональность, что <xref:System.Windows.ResizeMode.CanResize>, но добавляет «захват для изменения размера» в правом нижнем углу окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-470">This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a "resize grip" to the lower right corner of the window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-471">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-471">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowResizeMode"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-472">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-472">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-473">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-473">Identifier field</span></span>|<xref:System.Windows.Window.ResizeModeProperty>|  
|<span data-ttu-id="7a718-474">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-474">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Primitives.ResizeGrip" />
      </Docs>
    </Member>
    <Member MemberName="ResizeModeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ResizeModeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ResizeModeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ResizeModeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ResizeModeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ResizeModeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ResizeModeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ResizeModeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-475">Определяет свойство зависимостей <see cref="P:System.Windows.Window.ResizeMode" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-475">Identifies the <see cref="P:System.Windows.Window.ResizeMode" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreBounds">
      <MemberSignature Language="C#" Value="public System.Windows.Rect RestoreBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Rect RestoreBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.RestoreBounds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RestoreBounds As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Rect RestoreBounds { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.RestoreBounds : System.Windows.Rect" Usage="System.Windows.Window.RestoreBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-476">Возвращает размер и расположение окна перед сворачиванием либо разворачиванием.</span><span class="sxs-lookup"><span data-stu-id="7a718-476">Gets the size and location of a window before being either minimized or maximized.</span></span></summary>
        <value><span data-ttu-id="7a718-477">Объект <see cref="T:System.Windows.Rect" />, задающий размер и расположение окна перед сворачиванием либо разворачиванием.</span><span class="sxs-lookup"><span data-stu-id="7a718-477">A <see cref="T:System.Windows.Rect" /> that specifies the size and location of a window before being either minimized or maximized.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-478">Прямоугольник восстановления — область занятую окна, прежде чем его сворачивания или разворачивания.</span><span class="sxs-lookup"><span data-stu-id="7a718-478">The restore rectangle is the region occupied by the window before it was minimized or maximized.</span></span> <span data-ttu-id="7a718-479">Можно использовать <xref:System.Windows.Window.RestoreBounds%2A> сохранить последний размер и расположение окна перед закрытием приложения и получать эти значения при следующем запуске приложения для восстановления окна, как пользователь остался.</span><span class="sxs-lookup"><span data-stu-id="7a718-479">You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.</span></span>  
  
 <span data-ttu-id="7a718-480">Если вы запрашиваете <xref:System.Windows.Window.RestoreBounds%2A> прежде, чем окна или после его закрытия, <xref:System.Windows.Rect.Empty%2A> возвращается.</span><span class="sxs-lookup"><span data-stu-id="7a718-480">If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-481">Не удается получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-481">You cannot get this property when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-482">В следующем примере используется <xref:System.Windows.Window.RestoreBounds%2A> и изолированное хранилище, чтобы размер и расположение окна такие же, как они были в предыдущий раз, окно было отображено.</span><span class="sxs-lookup"><span data-stu-id="7a718-482">The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.</span></span>  
  
 [!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  
[!code-xaml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  
  
 [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]
 [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  
[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]
[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-483">для разрешения на запрос на размер и расположение окна ограничивающий прямоугольник.</span><span class="sxs-lookup"><span data-stu-id="7a718-483">for permission to query for the size and location of a window's bounding rectangle.</span></span> <span data-ttu-id="7a718-484">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-484">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="window.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-485">Открывает окно и возвращается без ожидания закрытия нового открытого окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-485">Opens a window and returns without waiting for the newly opened window to close.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-486">Когда <xref:System.Windows.Window> создается экземпляр класса, она не отображается по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-486">When the <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="7a718-487"><xref:System.Windows.Window.Show%2A> показано окно и возвращается немедленно, без ожидания для окна закрывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-487"><xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed.</span></span> <span data-ttu-id="7a718-488">Следовательно открытое окно не запрещает пользователям взаимодействовать с другими окнами в приложении.</span><span class="sxs-lookup"><span data-stu-id="7a718-488">Consequently, the opened window does not prevent users from interacting with other windows in the application.</span></span> <span data-ttu-id="7a718-489">Этот тип окна называется *немодальное* окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-489">This type of window is called a *modeless* window.</span></span> <span data-ttu-id="7a718-490">Типичными примерами немодальные окна являются свойства окон, панелей инструментов и палитры.</span><span class="sxs-lookup"><span data-stu-id="7a718-490">Common examples of modeless windows are properties windows, toolboxes, and palettes.</span></span> <span data-ttu-id="7a718-491">Чтобы ограничить пользователя для взаимодействия с отдельного окна, необходимо открыть окно путем вызова <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-491">To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7a718-492">Окно, которое открывается путем вызова <xref:System.Windows.Window.Show%2A> does автоматически не имеют связь с окном, которое он открыт; в частности, открытого окна не знает, какое окно его открыло.</span><span class="sxs-lookup"><span data-stu-id="7a718-492">A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="7a718-493">Это отношение можно установить с помощью <xref:System.Windows.Window.Owner%2A> свойство и управляемых с помощью <xref:System.Windows.Window.OwnedWindows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-493">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span>  
  
 <span data-ttu-id="7a718-494">Вызов <xref:System.Windows.Window.Show%2A> один и тот же конечный результат как параметр <xref:System.Windows.UIElement.Visibility%2A> свойство <xref:System.Windows.Window> объект <xref:System.Windows.Visibility.Visible>.</span><span class="sxs-lookup"><span data-stu-id="7a718-494">Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>.</span></span> <span data-ttu-id="7a718-495">Однако есть разница между ними с точки зрения времени.</span><span class="sxs-lookup"><span data-stu-id="7a718-495">However, there is a difference between the two from a timing perspective.</span></span>  
  
 <span data-ttu-id="7a718-496">Вызов <xref:System.Windows.Window.Show%2A> выполняется в синхронном режиме, который возвращает только после того, как <xref:System.Windows.FrameworkElement.Loaded> события на дочернее окно:</span><span class="sxs-lookup"><span data-stu-id="7a718-496">Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]
 [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  
  
 <span data-ttu-id="7a718-497">Параметр <xref:System.Windows.UIElement.Visibility%2A>, однако является асинхронной операцией, немедленно возвращает:</span><span class="sxs-lookup"><span data-stu-id="7a718-497">Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:</span></span>  
  
 [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]
 [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  
  
 <span data-ttu-id="7a718-498">При задании <xref:System.Windows.UIElement.Visibility%2A>, перед настройкой регистрации событий окна <xref:System.Windows.UIElement.Visibility%2A> не будет вызываться после метода, в котором задается <xref:System.Windows.UIElement.Visibility%2A> завершила выполнение.</span><span class="sxs-lookup"><span data-stu-id="7a718-498">When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-499">В следующем образце показано, как открыть немодальное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-499">The following sample demonstrates how to open a modeless window.</span></span>  
  
 [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]
 [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-500">Метод <see cref="M:System.Windows.Window.Show" /> вызывается для окна, которое закрывается (<see cref="E:System.Windows.Window.Closing" />) или закрыто (<see cref="E:System.Windows.Window.Closed" />).</span><span class="sxs-lookup"><span data-stu-id="7a718-500"><see cref="M:System.Windows.Window.Show" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="M:System.Windows.Window.Hide" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowActivated">
      <MemberSignature Language="C#" Value="public bool ShowActivated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowActivated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowActivated" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowActivated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowActivated { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowActivated : bool with get, set" Usage="System.Windows.Window.ShowActivated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-501">Возвращает или задает значение, указывающее, активировано ли окно при первом отображении.</span><span class="sxs-lookup"><span data-stu-id="7a718-501">Gets or sets a value that indicates whether a window is activated when first shown.</span></span></summary>
        <value><span data-ttu-id="7a718-502">Значение <see langword="true" />, если окно активируется при первом отображении; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-502"><see langword="true" /> if a window is activated when first shown; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7a718-503">Значение по умолчанию — <see langword="true" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-503">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-504">Когда появится окно с его <xref:System.Windows.Window.ShowActivated%2A> свойству присвоено `false` будет открыт, окно не активируется и его <xref:System.Windows.Window.Activated> событие не происходит, пока пользователь вручную активирует окно, выбрав его.</span><span class="sxs-lookup"><span data-stu-id="7a718-504">When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it.</span></span> <span data-ttu-id="7a718-505">После выбора окна, она активирует и деактивируется в обычном режиме.</span><span class="sxs-lookup"><span data-stu-id="7a718-505">After the window is selected, it activates and deactivates normally.</span></span>  
  
 <span data-ttu-id="7a718-506">Для предотвращения окно активироваться при его открытии, <xref:System.Windows.Window.ShowActivated%2A> свойству должно быть присвоено `false` перед отображением окна (путем вызова <xref:System.Windows.Window.Show%2A>); при установке <xref:System.Windows.Window.ShowActivated%2A> для `false` после отображается окно, не оказывает влияния.</span><span class="sxs-lookup"><span data-stu-id="7a718-506">To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.</span></span>  
  
 <span data-ttu-id="7a718-507">Установка <xref:System.Windows.Window.ShowActivated%2A> для `false` на окно, которое открывается как модальная, путем вызова <xref:System.Windows.Window.ShowDialog%2A>, имеет никаких реальных последствий.</span><span class="sxs-lookup"><span data-stu-id="7a718-507">Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact.</span></span> <span data-ttu-id="7a718-508">Несмотря на то, что модальное окно не будет активировано, модальное окно будет запрещает пользователю активацию любые другие открытые окна приложения.</span><span class="sxs-lookup"><span data-stu-id="7a718-508">Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowActivated"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-509">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-509">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-510">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-510">Identifier field</span></span>|<xref:System.Windows.Window.ShowActivatedProperty>|  
|<span data-ttu-id="7a718-511">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-511">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-512">None</span><span class="sxs-lookup"><span data-stu-id="7a718-512">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7a718-513">В следующем примере показано, как с помощью разметки можно настроить окно на открытие без активации.</span><span class="sxs-lookup"><span data-stu-id="7a718-513">The following example shows how to use markup to configure a window to be opened without being activated.</span></span>  
  
 [!code-xaml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  
  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  
  
 <span data-ttu-id="7a718-514">Приведенный ниже показано, как использовать код для настройки окно на открытие без активации.</span><span class="sxs-lookup"><span data-stu-id="7a718-514">The following example shows how to use code to configure a window to be opened without it being activated.</span></span>  
  
 [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]
 [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowActivatedProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowActivatedProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowActivatedProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowActivatedProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowActivatedProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowActivatedProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowActivatedProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowActivatedProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-515">Определяет свойство зависимостей <see cref="P:System.Windows.Window.ShowActivated" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-515">Identifies the <see cref="P:System.Windows.Window.ShowActivated" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowDialog">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; ShowDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; ShowDialog() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Window.ShowDialog" />
      <MemberSignature Language="VB.NET" Value="Public Function ShowDialog () As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; ShowDialog();" />
      <MemberSignature Language="F#" Value="member this.ShowDialog : unit -&gt; Nullable&lt;bool&gt;" Usage="window.ShowDialog " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7a718-516">Открывает окно и возвращается только после его закрытия.</span><span class="sxs-lookup"><span data-stu-id="7a718-516">Opens a window and returns only when the newly opened window is closed.</span></span></summary>
        <returns><span data-ttu-id="7a718-517">Значение <see cref="T:System.Nullable`1" /> типа <see cref="T:System.Boolean" />, определяющее было действие принято (<see langword="true" />) или отменено (<see langword="false" />).</span><span class="sxs-lookup"><span data-stu-id="7a718-517">A <see cref="T:System.Nullable`1" /> value of type <see cref="T:System.Boolean" /> that specifies whether the activity was accepted (<see langword="true" />) or canceled (<see langword="false" />).</span></span> <span data-ttu-id="7a718-518">Возвращаемое значение представляет собой значение свойства <see cref="P:System.Windows.Window.DialogResult" /> перед закрытием окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-518">The return value is the value of the <see cref="P:System.Windows.Window.DialogResult" /> property before a window closes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-519">Когда <xref:System.Windows.Window> создается экземпляр класса, она не отображается по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-519">When a <xref:System.Windows.Window> class is instantiated, it is not visible by default.</span></span> <span data-ttu-id="7a718-520"><xref:System.Windows.Window.ShowDialog%2A> показано окно, отключает все остальные окна в приложении и возвращает только в том случае, когда окно закрывается.</span><span class="sxs-lookup"><span data-stu-id="7a718-520"><xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed.</span></span> <span data-ttu-id="7a718-521">Этот тип окна называется *модального* окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-521">This type of window is known as a *modal* window.</span></span>  
  
 <span data-ttu-id="7a718-522">Модальные окна в основном используются как диалоговые окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-522">Modal windows are primarily used as dialog boxes.</span></span> <span data-ttu-id="7a718-523">Диалоговое окно — это особый тип окна, используемый приложениями для взаимодействия с пользователями для выполнения задач, например открытие файлов и печати документов.</span><span class="sxs-lookup"><span data-stu-id="7a718-523">A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.</span></span> <span data-ttu-id="7a718-524">Диалоговые окна часто позволяют пользователям принять или отменить задачу, для которого они были показаны перед закрытием диалоговом окне.</span><span class="sxs-lookup"><span data-stu-id="7a718-524">Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.</span></span> <span data-ttu-id="7a718-525"><xref:System.Windows.Window.ShowDialog%2A> Возвращает <xref:System.Nullable%601> <xref:System.Boolean> значение, указывающее, было ли действие принятия или отмены.</span><span class="sxs-lookup"><span data-stu-id="7a718-525"><xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled.</span></span> <span data-ttu-id="7a718-526">Возвращаемое значение представляет собой значение свойства <xref:System.Windows.Window.DialogResult%2A> перед закрытием окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-526">The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes.</span></span> <span data-ttu-id="7a718-527">Дополнительные сведения см. в разделе <xref:System.Windows.Window.DialogResult%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-527">For more information, see <xref:System.Windows.Window.DialogResult%2A>.</span></span>  
  
 <span data-ttu-id="7a718-528">Окно, которое открывается путем вызова <xref:System.Windows.Window.ShowDialog%2A> метод не имеет связь с окном, которое он открыт автоматически; в частности, открытого окна не знает, какое окно его открыло.</span><span class="sxs-lookup"><span data-stu-id="7a718-528">A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.</span></span> <span data-ttu-id="7a718-529">Это отношение можно установить с помощью <xref:System.Windows.Window.Owner%2A> свойство и управляемых с помощью <xref:System.Windows.Window.OwnedWindows%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="7a718-529">This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.</span></span> <span data-ttu-id="7a718-530">Для поддержки [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] автоматизации (см. в разделе [обзор автоматизации пользовательского интерфейса](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> должно быть задано для окно, открытое посредством вызова <xref:System.Windows.Window.ShowDialog%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-530">To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.</span></span>  
  
 <span data-ttu-id="7a718-531">Когда модальный [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окно (окно, открытое посредством вызова <xref:System.Windows.Window.ShowDialog%2A>) закрыто, ранее активированное окно активируется.</span><span class="sxs-lookup"><span data-stu-id="7a718-531">When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated.</span></span> <span data-ttu-id="7a718-532">Если модальный [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окно имеет окно-владелец (см. в разделе <xref:System.Windows.Window.Owner%2A>), окно-владелец не активируется повторно, когда модальном окне [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] окно закрывается, если он был ранее активированное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-532">If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-533">Этот метод не может вызываться, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-533">This method cannot be called when a window is hosted in a browser.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7a718-534">В следующем образце показано, как открыть модальное окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-534">The following sample demonstrates how to open a modal window.</span></span>  
  
 [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]
 [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="7a718-535">Метод <see cref="M:System.Windows.Window.ShowDialog" /> вызывается для окна, которое закрывается (<see cref="E:System.Windows.Window.Closing" />) или закрыто (<see cref="E:System.Windows.Window.Closed" />).</span><span class="sxs-lookup"><span data-stu-id="7a718-535"><see cref="M:System.Windows.Window.ShowDialog" /> is called on a window that is closing (<see cref="E:System.Windows.Window.Closing" />) or has been closed (<see cref="E:System.Windows.Window.Closed" />).</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="7a718-536">для разрешения для активации окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-536">for permission to activate a window.</span></span> <span data-ttu-id="7a718-537">Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="7a718-537">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="M:System.Windows.Window.Close" />
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbar">
      <MemberSignature Language="C#" Value="public bool ShowInTaskbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowInTaskbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.ShowInTaskbar" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowInTaskbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowInTaskbar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowInTaskbar : bool with get, set" Usage="System.Windows.Window.ShowInTaskbar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-538">Возвращает или задает значение, указывающее, имеет ли окно кнопку в панели задач.</span><span class="sxs-lookup"><span data-stu-id="7a718-538">Gets or sets a value that indicates whether the window has a task bar button.</span></span></summary>
        <value><span data-ttu-id="7a718-539"><see langword="true" />, если окно имеет кнопку в панели задач; в противном случае — <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-539"><see langword="true" /> if the window has a task bar button; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7a718-540">Не применяется, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-540">Does not apply when the window is hosted in a browser.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-541">Если <xref:System.Windows.Window.ShowInTaskbar%2A> присваивается `true`, также откроется окно, в списке выбора приложения ALT + TAB.</span><span class="sxs-lookup"><span data-stu-id="7a718-541">If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.</span></span>  
  
 <span data-ttu-id="7a718-542">Значок, используемый для кнопки панели задач и список выбора приложения ALT + TAB — это значение <xref:System.Windows.Window.Icon%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="7a718-542">The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-543">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-543">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowShowInTaskbar"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-544">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-544">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-545">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-545">Identifier field</span></span>|<xref:System.Windows.Window.ShowInTaskbarProperty>|  
|<span data-ttu-id="7a718-546">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-546">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-547">None</span><span class="sxs-lookup"><span data-stu-id="7a718-547">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInTaskbarProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ShowInTaskbarProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.ShowInTaskbarProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ShowInTaskbarProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ShowInTaskbarProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ShowInTaskbarProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.ShowInTaskbarProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-548">Определяет свойство зависимостей <see cref="P:System.Windows.Window.ShowInTaskbar" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-548">Identifies the <see cref="P:System.Windows.Window.ShowInTaskbar" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeToContent">
      <MemberSignature Language="C#" Value="public System.Windows.SizeToContent SizeToContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.SizeToContent SizeToContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.SizeToContent" />
      <MemberSignature Language="VB.NET" Value="Public Property SizeToContent As SizeToContent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SizeToContent SizeToContent { System::Windows::SizeToContent get(); void set(System::Windows::SizeToContent value); };" />
      <MemberSignature Language="F#" Value="member this.SizeToContent : System.Windows.SizeToContent with get, set" Usage="System.Windows.Window.SizeToContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeToContent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-549">Возвращает или задает значение, указывающее, изменится ли автоматически размер окна в соответствии с размером его содержимого.</span><span class="sxs-lookup"><span data-stu-id="7a718-549">Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.</span></span></summary>
        <value><span data-ttu-id="7a718-550">Значение <see cref="T:System.Windows.SizeToContent" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-550">A <see cref="T:System.Windows.SizeToContent" /> value.</span></span> <span data-ttu-id="7a718-551">Значение по умолчанию — <see cref="F:System.Windows.SizeToContent.Manual" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-551">The default is <see cref="F:System.Windows.SizeToContent.Manual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-552">Когда <xref:System.Windows.Window.SizeToContent%2A> присваивается <xref:System.Windows.SizeToContent.WidthAndHeight>, при настройке любого <xref:System.Windows.FrameworkElement.Height%2A> или <xref:System.Windows.FrameworkElement.Width%2A> не влияет; оба свойства можно задать, но они задаются с помощью значения не применяются к окну.</span><span class="sxs-lookup"><span data-stu-id="7a718-552">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.</span></span>  
  
 <span data-ttu-id="7a718-553">Когда <xref:System.Windows.Window.SizeToContent%2A> присваивается <xref:System.Windows.SizeToContent.Height>, установка <xref:System.Windows.FrameworkElement.Height%2A> не изменяет высоту окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-553">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.</span></span>  
  
 <span data-ttu-id="7a718-554">Когда <xref:System.Windows.Window.SizeToContent%2A> присваивается <xref:System.Windows.SizeToContent.Width>, установка <xref:System.Windows.FrameworkElement.Width%2A> не изменяет ширину окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-554">When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.</span></span>  
  
 <span data-ttu-id="7a718-555">Если <xref:System.Windows.Window.SizeToContent%2A> имеет значение, отличное от <xref:System.Windows.SizeToContent.Manual>:</span><span class="sxs-lookup"><span data-stu-id="7a718-555">If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:</span></span>  
  
-   <span data-ttu-id="7a718-556"><xref:System.Windows.Window.SizeToContent%2A> автоматически присваивается <xref:System.Windows.SizeToContent.Manual> при изменении размера окна, используя захват для изменения размера или перетаскивания границы.</span><span class="sxs-lookup"><span data-stu-id="7a718-556"><xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.</span></span>  
  
-   <span data-ttu-id="7a718-557">При изменении размера содержимого в виде, в окне Изменить размер самого <xref:System.Windows.FrameworkElement.SizeChanged> возникает.</span><span class="sxs-lookup"><span data-stu-id="7a718-557">If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.</span></span>  
  
 <span data-ttu-id="7a718-558">Если окно является прозрачным (см. в разделе <xref:System.Windows.Window.AllowsTransparency%2A>), следует учитывать параметр <xref:System.Windows.Window.SizeToContent%2A> для <xref:System.Windows.SizeToContent.WidthAndHeight> для обеспечения окна не больше, чем его видимого содержимого.</span><span class="sxs-lookup"><span data-stu-id="7a718-558">If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-559">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-559">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowSizeToContent"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-560">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-560">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-561">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-561">Identifier field</span></span>|<xref:System.Windows.Window.SizeToContentProperty>|  
|<span data-ttu-id="7a718-562">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-562">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-563">None</span><span class="sxs-lookup"><span data-stu-id="7a718-563">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7a718-564">В следующем примере показано, как задать <xref:System.Windows.Window.SizeToContent%2A> свойства в коде, чтобы указать, как размер окна изменяется в соответствии с содержимым.</span><span class="sxs-lookup"><span data-stu-id="7a718-564">The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.</span></span>  
  
 [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]
 [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Window.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="P:System.Windows.Window.ResizeMode" />
      </Docs>
    </Member>
    <Member MemberName="SizeToContentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeToContentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeToContentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.SizeToContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeToContentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeToContentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeToContentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.SizeToContentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-565">Определяет свойство зависимостей <see cref="P:System.Windows.Window.SizeToContent" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-565">Identifies the <see cref="P:System.Windows.Window.SizeToContent" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceInitialized">
      <MemberSignature Language="C#" Value="public event EventHandler SourceInitialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SourceInitialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.SourceInitialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceInitialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SourceInitialized;" />
      <MemberSignature Language="F#" Value="member this.SourceInitialized : EventHandler " Usage="member this.SourceInitialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-566">Данное событие инициируется для поддержки взаимодействия с [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span><span class="sxs-lookup"><span data-stu-id="7a718-566">This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)].</span></span> <span data-ttu-id="7a718-567">См. раздел <see cref="T:System.Windows.Interop.HwndSource" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-567">See <see cref="T:System.Windows.Interop.HwndSource" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Window.StateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StateChanged;" />
      <MemberSignature Language="F#" Value="member this.StateChanged : EventHandler " Usage="member this.StateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-568">Происходит при изменении свойства окна <see cref="P:System.Windows.Window.WindowState" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-568">Occurs when the window's <see cref="P:System.Windows.Window.WindowState" /> property changes.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Window.WindowState" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.TaskbarItemInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TaskbarItemInfo As TaskbarItemInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Shell::TaskbarItemInfo ^ TaskbarItemInfo { System::Windows::Shell::TaskbarItemInfo ^ get(); void set(System::Windows::Shell::TaskbarItemInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TaskbarItemInfo : System.Windows.Shell.TaskbarItemInfo with get, set" Usage="System.Windows.Window.TaskbarItemInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Shell.TaskbarItemInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-569">Получает или задает эскиз панели задач [!INCLUDE[win7](~/includes/win7-md.md)] для <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-569">Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span></span></summary>
        <value><span data-ttu-id="7a718-570">Эскиз панели задач [!INCLUDE[win7](~/includes/win7-md.md)] для <see cref="T:System.Windows.Window" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-570">The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <see cref="T:System.Windows.Window" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-571">Дополнительные сведения об использовании [!INCLUDE[win7](~/includes/win7-md.md)] эскиза, см. в разделе задач <xref:System.Windows.Shell.TaskbarItemInfo> класса.</span><span class="sxs-lookup"><span data-stu-id="7a718-571">For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Windows.Shell" />
      </Docs>
    </Member>
    <Member MemberName="TaskbarItemInfoProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TaskbarItemInfoProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TaskbarItemInfoProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TaskbarItemInfoProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TaskbarItemInfoProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TaskbarItemInfoProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-572">Определяет свойство зависимостей <see cref="P:System.Windows.Window.TaskbarItemInfo" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-572">Identifies the <see cref="P:System.Windows.Window.TaskbarItemInfo" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Window.Title" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IWindowService.Title</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Title)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-573">Получение или установка заголовка окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-573">Gets or sets a window's title.</span></span></summary>
        <value><span data-ttu-id="7a718-574">Строка <see cref="T:System.String" />, содержащая заголовок окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-574">A <see cref="T:System.String" /> that contains the window's title.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-575">Заголовок <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, или [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], можно также задать с помощью <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7a718-575">The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=nameWithType>.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTitle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-576">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-576">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-577">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-577">Identifier field</span></span>|<xref:System.Windows.Window.TitleProperty>|  
|<span data-ttu-id="7a718-578">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-578">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-579">None</span><span class="sxs-lookup"><span data-stu-id="7a718-579">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TitleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TitleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TitleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TitleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TitleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TitleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TitleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-580">Определяет свойство зависимостей <see cref="P:System.Windows.Window.Title" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-580">Identifies the <see cref="P:System.Windows.Window.Title" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Top : double with get, set" Usage="System.Windows.Window.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-581">Возвращает или задает позицию верхнего края окна относительно рабочего стола.</span><span class="sxs-lookup"><span data-stu-id="7a718-581">Gets or sets the position of the window's top edge, in relation to the desktop.</span></span></summary>
        <value><span data-ttu-id="7a718-582">Позиция верхнего края окна в логических единицах (1/96 дюйма).</span><span class="sxs-lookup"><span data-stu-id="7a718-582">The position of the window's top, in logical units (1/96").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-583">Когда <xref:System.Windows.Window> свернуто или развернуто, это значение соответствует точки верхнего края восстановления для <xref:System.Windows.Window>.</span><span class="sxs-lookup"><span data-stu-id="7a718-583">When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.</span></span>  
  
 <span data-ttu-id="7a718-584">Это свойство нельзя установить через style.</span><span class="sxs-lookup"><span data-stu-id="7a718-584">This property cannot be set through a style.</span></span>  
  
 <span data-ttu-id="7a718-585">Если вы не укажете значение, <xref:System.Windows.Window.Top%2A> присваивается значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7a718-585">If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value.</span></span> <span data-ttu-id="7a718-586">Можно также указать значение по умолчанию, задав <xref:System.Windows.Window.Top%2A> для <xref:System.Double.NaN>.</span><span class="sxs-lookup"><span data-stu-id="7a718-586">You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>.</span></span> <span data-ttu-id="7a718-587">Ни <xref:System.Double.NegativeInfinity> , ни <xref:System.Double.PositiveInfinity> является допустимым значением для <xref:System.Windows.Window.Top%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-587">Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-588">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-588">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTop"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-589">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-589">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-590">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-590">Identifier field</span></span>|<xref:System.Windows.Window.TopProperty>|  
|<span data-ttu-id="7a718-591">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-591">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-592">None</span><span class="sxs-lookup"><span data-stu-id="7a718-592">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.Left" />
      </Docs>
    </Member>
    <Member MemberName="Topmost">
      <MemberSignature Language="C#" Value="public bool Topmost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Topmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.Topmost" />
      <MemberSignature Language="VB.NET" Value="Public Property Topmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Topmost { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Topmost : bool with get, set" Usage="System.Windows.Window.Topmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-593">Возвращает или задает значение, указывающее, отображается ли окно поверх всех окон в Z-порядке.</span><span class="sxs-lookup"><span data-stu-id="7a718-593">Gets or sets a value that indicates whether a window appears in the topmost z-order.</span></span></summary>
        <value><span data-ttu-id="7a718-594">Значение <see langword="true" />, если окно является самым верхним; в противном случае — значение <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-594"><see langword="true" /> if the window is topmost; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-595">Окно которого <xref:System.Windows.Window.Topmost%2A> свойству `true` отображается поверх всех окон, <xref:System.Windows.Window.Topmost%2A> свойствам присваивается `false`.</span><span class="sxs-lookup"><span data-stu-id="7a718-595">A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.</span></span>  
  
 <span data-ttu-id="7a718-596">В группе, для которых <xref:System.Windows.Window.Topmost%2A> свойству `true`, окна, активированного в данный момент — это самое верхнее окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-596">In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window.</span></span> <span data-ttu-id="7a718-597">Аналогичным образом для группы, для которых <xref:System.Windows.Window.Topmost%2A> свойству `false`.</span><span class="sxs-lookup"><span data-stu-id="7a718-597">Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-598">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-598">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowTopmost"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-599">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-599">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-600">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-600">Identifier field</span></span>|<xref:System.Windows.Window.TopmostProperty>|  
|<span data-ttu-id="7a718-601">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-601">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-602">None</span><span class="sxs-lookup"><span data-stu-id="7a718-602">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Window.Activated" />
        <altmember cref="E:System.Windows.Window.Deactivated" />
      </Docs>
    </Member>
    <Member MemberName="TopmostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopmostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopmostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopmostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopmostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopmostProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopmostProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopmostProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-603">Определяет свойство зависимостей <see cref="P:System.Windows.Window.Topmost" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-603">Identifies the <see cref="P:System.Windows.Window.Topmost" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TopProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.TopProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TopProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TopProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TopProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.TopProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-604">Определяет свойство зависимостей <see cref="P:System.Windows.Window.Top" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-604">Identifies the <see cref="P:System.Windows.Window.Top" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStartupLocation">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStartupLocation WindowStartupLocation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStartupLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStartupLocation As WindowStartupLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStartupLocation WindowStartupLocation { System::Windows::WindowStartupLocation get(); void set(System::Windows::WindowStartupLocation value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStartupLocation : System.Windows.WindowStartupLocation with get, set" Usage="System.Windows.Window.WindowStartupLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStartupLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-605">Получение или установка положения окна при его первом отображении.</span><span class="sxs-lookup"><span data-stu-id="7a718-605">Gets or sets the position of the window when first shown.</span></span></summary>
        <value><span data-ttu-id="7a718-606">Значение <see cref="T:System.Windows.WindowStartupLocation" />, указывающее верхнюю/левую позицию окна при первом отображении.</span><span class="sxs-lookup"><span data-stu-id="7a718-606">A <see cref="T:System.Windows.WindowStartupLocation" /> value that specifies the top/left position of a window when first shown.</span></span> <span data-ttu-id="7a718-607">Значение по умолчанию — <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-607">The default is <see cref="F:System.Windows.WindowStartupLocation.Manual" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-608">Установка `WindowStartupLocation` свойства <xref:System.Windows.WindowStartupLocation.Manual> приводит к появлению окна должен располагаться в соответствии с его <xref:System.Windows.Window.Left%2A> и <xref:System.Windows.Window.Top%2A> значения свойств.</span><span class="sxs-lookup"><span data-stu-id="7a718-608">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values.</span></span> <span data-ttu-id="7a718-609">Если параметр <xref:System.Windows.Window.Left%2A> или <xref:System.Windows.Window.Top%2A> свойства не указаны, их значения определяются Windows.</span><span class="sxs-lookup"><span data-stu-id="7a718-609">If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by Windows.</span></span>  
  
 <span data-ttu-id="7a718-610">Установка `WindowStartupLocation` свойства <xref:System.Windows.WindowStartupLocation.CenterScreen> приводит к появлению окна должен располагаться в центре экрана, который содержит курсор мыши.</span><span class="sxs-lookup"><span data-stu-id="7a718-610">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.</span></span>  
  
 <span data-ttu-id="7a718-611">Установка `WindowStartupLocation` свойства <xref:System.Windows.WindowStartupLocation.CenterOwner> приводит к появлению окна должен располагаться в центре окно-владелец (см. в разделе <xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>), если он указан.</span><span class="sxs-lookup"><span data-stu-id="7a718-611">Setting the `WindowStartupLocation` property to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A?displayProperty=nameWithType>), if specified.</span></span> <span data-ttu-id="7a718-612">Окно-владелец может быть еще одно окно WPF или окно отличных от WPF.</span><span class="sxs-lookup"><span data-stu-id="7a718-612">The owner window can be either another WPF window or a non-WPF window.</span></span>

> [!NOTE]   
>  <span data-ttu-id="7a718-613">Дополнительные сведения об окнах WPF с windows, отличных от WPF см. в разделе [взаимодействие WPF и Win32](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) и <xref:System.Windows.Interop.WindowInteropHelper>.</span><span class="sxs-lookup"><span data-stu-id="7a718-613">For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.</span></span> 

 <span data-ttu-id="7a718-614">Если окно-владелец не указан, положение окна определяется таким же образом, как если бы `WindowStartupLocation` свойству <xref:System.Windows.WindowStartupLocation.Manual>.</span><span class="sxs-lookup"><span data-stu-id="7a718-614">If an owner window is not specified, the position of the window is determined in the same way as if the `WindowStartupLocation` property is set to <xref:System.Windows.WindowStartupLocation.Manual>.</span></span>

> [!NOTE]
>  <span data-ttu-id="7a718-615">Нельзя задать или получить значение этого свойства, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-615">You cannot set or get the value of this property when a window is hosted in a browser.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public System.Windows.WindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As WindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowState WindowState { System::Windows::WindowState get(); void set(System::Windows::WindowState value); };" />
      <MemberSignature Language="F#" Value="member this.WindowState : System.Windows.WindowState with get, set" Usage="System.Windows.Window.WindowState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-616">Возвращает или задает значение, указывающее, восстановлено ли, свернуто или развернуто окно.</span><span class="sxs-lookup"><span data-stu-id="7a718-616">Gets or sets a value that indicates whether a window is restored, minimized, or maximized.</span></span></summary>
        <value><span data-ttu-id="7a718-617">Состояние <see cref="T:System.Windows.WindowState" />, определяющее, является ли окно восстановленным, свернутым или развернутым.</span><span class="sxs-lookup"><span data-stu-id="7a718-617">A <see cref="T:System.Windows.WindowState" /> that determines whether a window is restored, minimized, or maximized.</span></span> <span data-ttu-id="7a718-618">По умолчанию используется значение <see cref="F:System.Windows.WindowState.Normal" /> (восстановлено).</span><span class="sxs-lookup"><span data-stu-id="7a718-618">The default is <see cref="F:System.Windows.WindowState.Normal" /> (restored).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-619">Прежде чем окно свернуто или развернуто, его размер и расположение, хранятся в <xref:System.Windows.Window.RestoreBounds%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-619">Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>.</span></span> <span data-ttu-id="7a718-620">Восстанавливаются при последующем восстановлении окна его размер и расположение значения значениями из <xref:System.Windows.Window.RestoreBounds%2A>.</span><span class="sxs-lookup"><span data-stu-id="7a718-620">When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.</span></span>  
  
 <span data-ttu-id="7a718-621">Когда <xref:System.Windows.Window.WindowState%2A> свойство меняется, <xref:System.Windows.Window.StateChanged> возникает.</span><span class="sxs-lookup"><span data-stu-id="7a718-621">When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-622">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-622">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowState"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-623">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-623">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-624">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-624">Identifier field</span></span>|<xref:System.Windows.Window.WindowStateProperty>|  
|<span data-ttu-id="7a718-625">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-625">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Window.RestoreBounds" />
      </Docs>
    </Member>
    <Member MemberName="WindowStateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStateProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStateProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-626">Определяет свойство зависимостей <see cref="P:System.Windows.Window.WindowState" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-626">Identifies the <see cref="P:System.Windows.Window.WindowState" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public System.Windows.WindowStyle WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.WindowStyle WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Window.WindowStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowStyle As WindowStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::WindowStyle WindowStyle { System::Windows::WindowStyle get(); void set(System::Windows::WindowStyle value); };" />
      <MemberSignature Language="F#" Value="member this.WindowStyle : System.Windows.WindowStyle with get, set" Usage="System.Windows.Window.WindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WindowStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-627">Получение или установка стиля границы окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-627">Gets or sets a window's border style.</span></span></summary>
        <value><span data-ttu-id="7a718-628">Объект <see cref="T:System.Windows.WindowStyle" />, задающий стиль границы окна.</span><span class="sxs-lookup"><span data-stu-id="7a718-628">A <see cref="T:System.Windows.WindowStyle" /> that specifies a window's border style.</span></span> <span data-ttu-id="7a718-629">Значение по умолчанию — <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-629">The default is <see cref="F:System.Windows.WindowStyle.SingleBorderWindow" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7a718-630"><xref:System.Windows.Window.WindowStyle%2A> может принимать одно из <xref:System.Windows.WindowStyle> значений перечисления, включая <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (по умолчанию), и <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span><span class="sxs-lookup"><span data-stu-id="7a718-630"><xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.</span></span>  
  
 <span data-ttu-id="7a718-631">На следующем рисунке показана стили окна на [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero темы с поддержкой прозрачности):</span><span class="sxs-lookup"><span data-stu-id="7a718-631">The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):</span></span>  
  
 <span data-ttu-id="7a718-632">![Стили окна](~/add/media/windowoverviewfigure6.PNG "стили окна")</span><span class="sxs-lookup"><span data-stu-id="7a718-632">![Window styles](~/add/media/windowoverviewfigure6.PNG "Window styles")</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7a718-633">Нельзя задать или получить это свойство, если окно размещено в браузере.</span><span class="sxs-lookup"><span data-stu-id="7a718-633">You cannot set or get this property when a window is hosted in a browser.</span></span>  
  
<a name="dependencyPropertyInfo_WindowWindowStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="7a718-634">Сведения о свойстве зависимостей</span><span class="sxs-lookup"><span data-stu-id="7a718-634">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="7a718-635">Поле идентификатора</span><span class="sxs-lookup"><span data-stu-id="7a718-635">Identifier field</span></span>|<xref:System.Windows.Window.WindowStyleProperty>|  
|<span data-ttu-id="7a718-636">Значение свойства метаданных `true`</span><span class="sxs-lookup"><span data-stu-id="7a718-636">Metadata properties set to `true`</span></span>|<span data-ttu-id="7a718-637">None</span><span class="sxs-lookup"><span data-stu-id="7a718-637">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WindowStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WindowStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Window.WindowStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WindowStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WindowStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WindowStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Window.WindowStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7a718-638">Определяет свойство зависимостей <see cref="P:System.Windows.Window.WindowStyle" />.</span><span class="sxs-lookup"><span data-stu-id="7a718-638">Identifies the <see cref="P:System.Windows.Window.WindowStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>